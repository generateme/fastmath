[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Fastmath documentation",
    "section": "",
    "text": "Preface\n\nsource: clay/index.clj",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "Core",
    "section": "",
    "text": "Reference",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "core.html#reference",
    "href": "core.html#reference",
    "title": "Core",
    "section": "",
    "text": "fastmath.core\nCollection of fast math functions and plethora of constants known from other math libraries.\n### Primitive math operators\nInlined function operating on double/longs as a replacement of Clojure numerical tower: * + - / &gt; &lt; &gt;= &lt;= == rem quot mod bit-or bit-and bit-xor bit-and-not bit-set bit-clear bit-test bit-flip bit-not bit-shift-left bit-shift-right unsigned-bit-shift-right inc dec zero? neg? pos? min max even? odd? abs\nAnd additionally:\n\n&lt;&lt; - bit shift left\n&gt;&gt; - signed bit shift right\n&gt;&gt;&gt; - unsigned bit shift right\nnot== - not equal\n\nTo turn on primitive math on your namespace call use-primitive-operators. To turn off and revert original versions call unuse-primitive-operators which is recomended when Clojure 1.12+ is used.\n### FastMath\nAlmost all math functions are backed by FastMath library. Almost all operates on primitive double and returns double or long\n\n\n*\n\n(*)\n(* a)\n(* a b)\n(* a b c)\n(* a b c d)\n(* a b c d & r)\n\nPrimitive and inlined *.\nsource\n\n\n\n+\n\n(+)\n(+ a)\n(+ a b)\n(+ a b c)\n(+ a b c d)\n(+ a b c d & r)\n\nPrimitive and inlined +.\nsource\n\n\n\n-\n\n(- a)\n(- a b)\n(- a b c)\n(- a b c d)\n(- a b c d & r)\n\nPrimitive and inlined -.\nsource\n\n\n\n-E CONST\n-E = -2.718281828459045\nValue of \\(-e\\)\nsource\n\n\n\n-HALF_PI CONST\n-HALF_PI = -1.5707963267948966\nValue of \\(-\\frac{\\pi}{2}\\)\nsource\n\n\n\n-PI CONST\n-PI = -3.141592653589793\nValue of \\(-\\pi\\)\nsource\n\n\n\n-QUARTER_PI CONST\n-QUARTER_PI = -0.7853981633974483\nValue of \\(-\\frac{\\pi}{4}\\)\nsource\n\n\n\n-TAU CONST\n-TAU = -6.283185307179586\nAlias for TWO_PI-\nsource\n\n\n\n-THIRD_PI CONST\n-THIRD_PI = 1.0471975511965976\nValue of \\(-\\frac{\\pi}{3}\\)\nsource\n\n\n\n-TWO_PI CONST\n-TWO_PI = -6.283185307179586\nValue of \\(-2 {\\pi}\\)\nsource\n\n\n\n/\n\n(/ a)\n(/ a b)\n(/ a b c)\n(/ a b c d)\n(/ a b c d & r)\n\nPrimitive and inlined /.\nsource\n\n\n\n&lt;\n\n(&lt; _)\n(&lt; a b)\n(&lt; a b & r)\n\nPrimitive math less-then function.\nsource\n\n\n\n&lt;&lt;\n\n(&lt;&lt; x shift)\n\nShift bits left\nsource\n\n\n\n&lt;=\n\n(&lt;= _)\n(&lt;= a b)\n(&lt;= a b & r)\n\nPrimitive math less-and-equal function.\nsource\n\n\n\n==\n\n(== _)\n(== a b)\n(== a b & r)\n\nPrimitive math equality function.\nsource\n\n\n\n&gt;\n\n(&gt; _)\n(&gt; a b)\n(&gt; a b & r)\n\nPrimitive math greater-than function.\nsource\n\n\n\n&gt;=\n\n(&gt;= _)\n(&gt;= a b)\n(&gt;= a b & r)\n\nPrimitive math greater-and-equal function.\nsource\n\n\n\n&gt;&gt;\n\n(&gt;&gt; x shift)\n\nShift bits right and keep most significant bit unchanged\nsource\n\n\n\n&gt;&gt;&gt;\n\n(&gt;&gt;&gt; x shift)\n\nShift bits right and set most significant bit to 0\nsource\n\n\n\nCATALAN_G CONST\nCATALAN_G = 0.915965594177219\nCatalan G\nsource\n\n\n\nE CONST\nE = 2.718281828459045\nValue of \\(e\\)\nsource\n\n\n\nEPSILON CONST\nEPSILON = 1.0E-10\nVery small number \\(\\varepsilon\\)\nsource\n\n\n\nFOUR_INV_PI CONST\nFOUR_INV_PI = 1.2732395447351628\nValue of \\(\\frac{4}{\\pi}\\)\nsource\n\n\n\nGAMMA CONST\nGAMMA = 0.5772156649015329\nEuler-Mascheroni constant\nsource\n\n\n\nHALF_PI CONST\nHALF_PI = 1.5707963267948966\nValue of \\(\\frac{\\pi}{2}\\)\nsource\n\n\n\nINV_FOUR_PI CONST\nINV_FOUR_PI = 0.07957747154594767\nValue of \\(\\frac{1}{4 \\pi}\\)\nsource\n\n\n\nINV_LN2 CONST\nINV_LN2 = 1.4426950408889634\n\\(\\frac{1}{\\ln{2}}\\)\nsource\n\n\n\nINV_LOG_HALF CONST\nINV_LOG_HALF = -1.4426950408889634\n\\(\\frac{1}{\\ln{0.5}}\\)\nsource\n\n\n\nINV_PI CONST\nINV_PI = 0.3183098861837907\nValue of \\(\\frac{1}{\\pi}\\)\nsource\n\n\n\nINV_SQRT2PI CONST\nINV_SQRT2PI = 0.3989422804014327\n\\(\\frac{1}{\\sqrt{2\\pi}}\\)\nsource\n\n\n\nINV_SQRTPI CONST\nINV_SQRTPI = 0.5641895835477563\n\\(\\frac{1}{\\sqrt\\pi}\\)\nsource\n\n\n\nINV_SQRT_2 CONST\nINV_SQRT_2 = 0.7071067811865475\n\\(\\frac{1}{\\sqrt{2}}\\)\nsource\n\n\n\nINV_TWO_PI CONST\nINV_TWO_PI = 0.15915494309189535\nValue of \\(\\frac{1}{2 \\pi}\\)\nsource\n\n\n\nLANCZOS_G CONST\nLANCZOS_G = 4.7421875\nLanchos approximation g constant\nsource\n\n\n\nLN10 CONST\nLN10 = 2.302585092994046\n\\(\\ln{10}\\)\nsource\n\n\n\nLN2 CONST\nLN2 = 0.6931471805599453\n\\(\\ln{2}\\)\nsource\n\n\n\nLN2_2 CONST\nLN2_2 = 0.34657359027997264\n\\(\\frac{\\ln{2}}{2}\\)\nsource\n\n\n\nLOG10E CONST\nLOG10E = 0.4342944819032518\n\\(\\log_{10}{e}\\)\nsource\n\n\n\nLOG2E CONST\nLOG2E = 1.4426950408889634\n\\(\\log_{2}{e}\\)\nsource\n\n\n\nLOG_HALF CONST\nLOG_HALF = -0.6931471805599453\n\\(\\ln{0.5}\\)\nsource\n\n\n\nLOG_PI CONST\nLOG_PI = 1.1447298858494002\n\\(\\ln{\\pi}\\)\nsource\n\n\n\nLOG_TWO_PI CONST\nLOG_TWO_PI = 1.8378770664093453\n\\(\\ln{2 \\pi}\\)\nsource\n\n\n\nMACHINE-EPSILON CONST\nMACHINE-EPSILON = 1.1102230246251565E-16\nULP(1)/2. Half of the smallest difference between 1.0 and next possible double floating point number.\nsource\n\n\n\nMACHINE-EPSILON10 CONST\nMACHINE-EPSILON10 = 1.1102230246251565E-15\n5*ULP(1)\nsource\n\n\n\nM_1_PI CONST\nM_1_PI = 0.3183098861837907\n\\(\\frac{1}{\\pi}\\)\nsource\n\n\n\nM_2_PI CONST\nM_2_PI = 0.6366197723675814\n\\(\\frac{2}{\\pi}\\)\nsource\n\n\n\nM_2_SQRTPI CONST\nM_2_SQRTPI = 1.1283791670955126\n\\(\\frac{2}{\\sqrt\\pi}\\)\nsource\n\n\n\nM_3PI_4 CONST\nM_3PI_4 = 2.356194490192345\n\\(\\frac{3\\pi}{4}\\)\nsource\n\n\n\nM_E CONST\nM_E = 2.718281828459045\n\\(e\\)\nsource\n\n\n\nM_INVLN2 CONST\nM_INVLN2 = 1.4426950408889634\n\\(\\frac{1}{\\ln{2}}\\)\nsource\n\n\n\nM_IVLN10 CONST\nM_IVLN10 = 0.43429448190325176\n\\(\\frac{1}{\\ln{10}}\\)\nsource\n\n\n\nM_LN10 CONST\nM_LN10 = 2.302585092994046\n\\(\\ln{10}\\)\nsource\n\n\n\nM_LN2 CONST\nM_LN2 = 0.6931471805599453\n\\(\\ln{2}\\)\nsource\n\n\n\nM_LOG10E CONST\nM_LOG10E = 0.4342944819032518\n\\(\\log_{10}{e}\\)\nsource\n\n\n\nM_LOG2E CONST\nM_LOG2E = 1.4426950408889634\n\\(\\log_{2}{e}\\)\nsource\n\n\n\nM_LOG2_E CONST\nM_LOG2_E = 0.6931471805599453\n\\(\\ln{2}\\)\nsource\n\n\n\nM_PI CONST\nM_PI = 3.141592653589793\n\\(\\pi\\)\nsource\n\n\n\nM_PI_2 CONST\nM_PI_2 = 1.5707963267948966\n\\(\\frac{\\pi}{2}\\)\nsource\n\n\n\nM_PI_4 CONST\nM_PI_4 = 0.7853981633974483\n\\(\\frac{\\pi}{4}\\)\nsource\n\n\n\nM_SQRT1_2 CONST\nM_SQRT1_2 = 0.7071067811865475\n\\(\\frac{1}{\\sqrt{2}}\\)\nsource\n\n\n\nM_SQRT2 CONST\nM_SQRT2 = 1.4142135623730951\n\\(\\sqrt{2}\\)\nsource\n\n\n\nM_SQRT3 CONST\nM_SQRT3 = 1.7320508075688772\n\\(\\sqrt{3}\\)\nsource\n\n\n\nM_SQRT_PI CONST\nM_SQRT_PI = 1.7724538509055159\n\\(\\sqrt\\pi\\)\nsource\n\n\n\nM_TWOPI CONST\nM_TWOPI = 6.283185307179586\n\\(2\\pi\\)\nsource\n\n\n\nONE_SIXTH CONST\nONE_SIXTH = 0.16666666666666666\nValue of \\(\\frac{1}{6}\\)\nsource\n\n\n\nONE_THIRD CONST\nONE_THIRD = 0.3333333333333333\nValue of \\(\\frac{1}{3}\\)\nsource\n\n\n\nPHI CONST\nPHI = 1.618033988749895\nGolden ratio \\(\\phi\\)\nsource\n\n\n\nPI CONST\nPI = 3.141592653589793\nValue of \\(\\pi\\)\nsource\n\n\n\nQUARTER_PI CONST\nQUARTER_PI = 0.7853981633974483\nValue of \\(\\frac{\\pi}{4}\\)\nsource\n\n\n\nSILVER CONST\nSILVER = 2.414213562373095\nSilver ratio \\(\\delta_S\\)\nsource\n\n\n\nSIXTH CONST\nSIXTH = 0.16666666666666666\nValue of \\(\\frac{1}{6}\\)\nsource\n\n\n\nSQRT2 CONST\nSQRT2 = 1.4142135623730951\n\\(\\sqrt{2}\\)\nsource\n\n\n\nSQRT2PI CONST\nSQRT2PI = 2.5066282746310002\n\\(\\sqrt{2\\pi}\\)\nsource\n\n\n\nSQRT2_2 CONST\nSQRT2_2 = 0.7071067811865476\n\\(\\frac{\\sqrt{2}}{2}\\)\nsource\n\n\n\nSQRT3 CONST\nSQRT3 = 1.7320508075688772\n\\(\\sqrt{3}\\)\nsource\n\n\n\nSQRT3_2 CONST\nSQRT3_2 = 0.8660254037844386\n\\(\\frac{\\sqrt{3}}{2}\\)\nsource\n\n\n\nSQRT3_3 CONST\nSQRT3_3 = 0.5773502691896257\n\\(\\frac{\\sqrt{3}}{3}\\)\nsource\n\n\n\nSQRT3_4 CONST\nSQRT3_4 = 0.4330127018922193\n\\(\\frac{\\sqrt{3}}{4}\\)\nsource\n\n\n\nSQRT5 CONST\nSQRT5 = 2.23606797749979\n\\(\\sqrt{5}\\)\nsource\n\n\n\nSQRTPI CONST\nSQRTPI = 1.7724538509055159\n\\(\\sqrt{\\pi}\\)\nsource\n\n\n\nSQRT_2_PI CONST\nSQRT_2_PI = 0.7978845608028654\n\\(\\sqrt{\\frac{2}{\\pi}}\\)\nsource\n\n\n\nSQRT_HALFPI CONST\nSQRT_HALFPI = 1.2533141373155001\n\\(\\sqrt{\\frac{1}{2}\\pi}\\)\nsource\n\n\n\nTAU CONST\nTAU = 6.283185307179586\nAlias for TWO_PI\nsource\n\n\n\nTHIRD CONST\nTHIRD = 0.3333333333333333\nValue of \\(\\frac{1}{3}\\)\nsource\n\n\n\nTHIRD_PI CONST\nTHIRD_PI = 1.0471975511965976\nValue of \\(\\frac{\\pi}{3}\\)\nsource\n\n\n\nTWO_INV_PI CONST\nTWO_INV_PI = 0.6366197723675814\nValue of \\(\\frac{2}{\\pi}\\)\nsource\n\n\n\nTWO_PI CONST\nTWO_PI = 6.283185307179586\nValue of \\(2 {\\pi}\\)\nsource\n\n\n\nTWO_THIRD CONST\nTWO_THIRD = 0.6666666666666666\nValue of \\(\\frac{2}{3}\\)\nsource\n\n\n\nTWO_THIRDS CONST\nTWO_THIRDS = 0.6666666666666666\nValue of \\(\\frac{2}{3}\\)\nsource\n\n\n\nabs\n\n(abs x)\n\n\\(|x|\\) - double version. See iabs.\nsource\n\n\n\nacos\n\n(acos x)\n\nacos(x)\nsource\n\n\n\nacosh\n\n(acosh x)\n\nacosh(x)\nsource\n\n\n\nacot\n\n(acot x)\n\nacot(x)\nsource\n\n\n\nacoth\n\n(acoth x)\n\nArea hyperbolic cotangent\nsource\n\n\n\nacovercos\n\n(acovercos x)\n\nArc covercosine\nsource\n\n\n\nacoversin\n\n(acoversin x)\n\nArc coversine\nsource\n\n\n\nacrd\n\n(acrd x)\n\nInverse chord\nsource\n\n\n\nacsc\n\n(acsc x)\n\nacsc(x)\nsource\n\n\n\nacsch\n\n(acsch v)\n\nArea hyperbolic cosecant\nsource\n\n\n\naexcsc\n\n(aexcsc x)\n\nArc excosecant\nsource\n\n\n\naexsec\n\n(aexsec x)\n\nArc exsecant\nsource\n\n\n\nahacovercos\n\n(ahacovercos x)\n\nArc hacovercosine\nsource\n\n\n\nahacoversin\n\n(ahacoversin x)\n\nArc hacoversine\nsource\n\n\n\nahavercos\n\n(ahavercos x)\n\nArc havecosine\nsource\n\n\n\nahaversin\n\n(ahaversin x)\n\nArc haversine\nsource\n\n\n\napprox\n\n(approx v)\n(approx v digits)\n\nRound v to specified (default: 2) decimal places. Be aware of double number accuracy.\nsource\n\n\n\napprox-eq\n\n(approx-eq a b)\n(approx-eq a b digits)\n\nChecks equality approximately. See approx.\nsource\n\n\n\napprox=\nAlias for approx-eq\nsource\n\n\n\nasec\n\n(asec x)\n\nasec(x)\nsource\n\n\n\nasech\n\n(asech x)\n\nArea hyperbolic secant\nsource\n\n\n\nasin\n\n(asin x)\n\nasin(x)\nsource\n\n\n\nasinh\n\n(asinh x)\n\nasinh(x)\nsource\n\n\n\natan\n\n(atan x)\n\natan(x)\nsource\n\n\n\natan2\n\n(atan2 x y)\n\natan2(x,y)\nsource\n\n\n\natanh\n\n(atanh x)\n\natanh(x)\nsource\n\n\n\navercos\n\n(avercos x)\n\nArc vecosine\nsource\n\n\n\naversin\n\n(aversin x)\n\nArc versine\nsource\n\n\n\nbetween-?\n\n(between-? [x y] v)\n(between-? x y v)\n\nCheck if given number is within the range (x,y].\nsource\n\n\n\nbetween?\n\n(between? [x y] v)\n(between? x y v)\n\nCheck if given number is within the range [x,y].\nsource\n\n\n\nbit-and\n\n(bit-and x)\n(bit-and x y)\n(bit-and x y & r)\n\nx ∧ y - bitwise AND\nsource\n\n\n\nbit-and-not\n\n(bit-and-not x)\n(bit-and-not x y)\n(bit-and-not x y & r)\n\nx ∧ ~y - bitwise AND (with complement second argument)\nsource\n\n\n\nbit-clear\n\n(bit-clear x bit)\n\nClear bit (set to 0).\nsource\n\n\n\nbit-flip\n\n(bit-flip x bit)\n\nFlip bit (set to 0 when 1 or to 1 when 0).\nsource\n\n\n\nbit-nand\n\n(bit-nand x)\n(bit-nand x y)\n(bit-nand x y & r)\n\n~(x ∧ y) - bitwise NAND\nsource\n\n\n\nbit-nor\n\n(bit-nor x)\n(bit-nor x y)\n(bit-nor x y & r)\n\n~(x ∨ y) - bitwise NOR\nsource\n\n\n\nbit-not\n\n(bit-not x)\n\n~x - bitwise NOT\nsource\n\n\n\nbit-or\n\n(bit-or x)\n(bit-or x y)\n(bit-or x y & r)\n\nx ∨ y - bitwise OR\nsource\n\n\n\nbit-set\n\n(bit-set x bit)\n\nSet bit (set to 1).\nsource\n\n\n\nbit-shift-left\n\n(bit-shift-left x shift)\n\nShift bits left\nsource\n\n\n\nbit-shift-right\n\n(bit-shift-right x shift)\n\nShift bits right and keep most significant bit unchanged\nsource\n\n\n\nbit-test\n\n(bit-test x bit)\n\nTest bit (return to true when 1 or false when 0).\nsource\n\n\n\nbit-xnor\n\n(bit-xnor x)\n(bit-xnor x y)\n(bit-xnor x y & r)\n\n~(x⊕y) - bitwise XNOR\nsource\n\n\n\nbit-xor\n\n(bit-xor x)\n(bit-xor x y)\n(bit-xor x y & r)\n\nx⊕y - bitwise XOR\nsource\n\n\n\nbits-&gt;double\n\n(bits-&gt;double v)\n\nConvert 64 bits to double\nsource\n\n\n\nbool-not\n\n(bool-not x)\n\nPrimitive boolean not\nsource\n\n\n\nbool-xor\n\n(bool-xor x y)\n(bool-xor x y & r)\n\nPrimitive boolean xor\nsource\n\n\n\ncb\n\n(cb x)\n\n\\(x^3\\)\nsource\n\n\n\ncbrt\n\n(cbrt x)\n\n\\(\\sqrt[3]{x}\\)\nsource\n\n\n\nceil\n\n(ceil x)\n(ceil x scale)\n\n\\(\\lceil x \\rceil\\). See: qceil.\nRounding is done to a multiply of scale value (when provided).\nsource\n\n\n\ncexpexp\n\n(cexpexp x)\n\n1-exp(-exp(x))\nsource\n\n\n\ncloglog\n\n(cloglog x)\n\nlog(-log(1-x))\nsource\n\n\n\ncnorm\n\n(cnorm v start1 stop1 start2 stop2)\n(cnorm v start stop)\n\nConstrained version of norm. Result of norm is applied to constrain to [0,1] or [start2,stop2] ranges.\nsource\n\n\n\nco-intervals\n\n(co-intervals data)\n(co-intervals data number)\n(co-intervals data number overlap)\n\nDivide sequence to overlaping intervals containing similar number of values. Same as R’s co.intervals()\nsource\n\n\n\ncombinations\n\n(combinations n k)\n\nBinomial coefficient (n choose k)\nsource\n\n\n\nconstrain MACRO\n\n(constrain value mn mx)\n\nClamp value to the range [mn,mx].\nsource\n\n\n\ncopy-sign\n\n(copy-sign magnitude sign)\n\nReturns a value with a magnitude of first argument and sign of second.\nsource\n\n\n\ncos\n\n(cos x)\n\ncos(x)\nsource\n\n\n\ncos-interpolation\n\n(cos-interpolation start stop t)\n\noF interpolateCosine interpolation. See also lerp/mlerp, quad-interpolation or smooth-interpolation.\nsource\n\n\n\ncosh\n\n(cosh x)\n\ncosh(x)\nsource\n\n\n\ncospi\n\n(cospi x)\n\ncos(pi*x)\nsource\n\n\n\ncot\n\n(cot x)\n\ncot(x)\nsource\n\n\n\ncoth\n\n(coth x)\n\nHyperbolic cotangent\nsource\n\n\n\ncotpi\n\n(cotpi x)\n\ncot(pi*x)\nsource\n\n\n\ncovercos\n\n(covercos x)\n\nCovercosine\nsource\n\n\n\ncoversin\n\n(coversin x)\n\nCoversine\nsource\n\n\n\ncrd\n\n(crd x)\n\nChord\nsource\n\n\n\ncsc\n\n(csc x)\n\ncsc(x)\nsource\n\n\n\ncsch\n\n(csch x)\n\nHyperbolic cosecant\nsource\n\n\n\ncscpi\n\n(cscpi x)\n\ncsc(pi*x)\nsource\n\n\n\ncut\n\n(cut data breaks)\n(cut x1 x2 breaks)\n\nCut range or sequence into intervals\nsource\n\n\n\ndec\n\n(dec x)\n\nPrimitive and inlined dec\nsource\n\n\n\ndeg-in-rad CONST\ndeg-in-rad = 0.017453292519943295\n\\(\\frac{\\pi}{180}\\)\nsource\n\n\n\ndegrees\n\n(degrees rad)\n\nConvert radians into degrees.\nsource\n\n\n\ndelta-eq\n\n(delta-eq a b)\n(delta-eq a b accuracy)\n(delta-eq a b abs-tol rel-tol)\n\nChecks equality for given absolute accuracy (default 1.0e-6).\nVersion with 4-arity accepts absolute and relative accuracy.\nsource\n\n\n\ndelta=\nAlias for delta-eq\nsource\n\n\n\ndifference-of-products\n\n(difference-of-products a b c d)\n\nKahan’s algorithm for (ab)-(cd) to avoid catastrophic cancellation.\nsource\n\n\n\ndist\n\n(dist [x1 y1] [x2 y2])\n(dist x1 y1 x2 y2)\n\nEuclidean distance between points (x1,y1) and (x2,y2). See fastmath.vector namespace to see other metrics which work on vectors.\nsource\n\n\n\ndouble-array-&gt;seq\nConvert double array into sequence.\nAlias for seq.\nsource\n\n\n\ndouble-array-type\nsource\n\n\n\ndouble-bits\n\n(double-bits v)\n\nReturns double as 64-bits (long)\nsource\n\n\n\ndouble-double-array-&gt;seq\n\n(double-double-array-&gt;seq res)\n\nConvert double array of double arrays into sequence of sequences.\nsource\n\n\n\ndouble-double-array-type\nsource\n\n\n\ndouble-exponent\n\n(double-exponent v)\n\nExtract exponent information from double\nsource\n\n\n\ndouble-high-bits\n\n(double-high-bits v)\n\nReturns high word from double as bits\nsource\n\n\n\ndouble-low-bits\n\n(double-low-bits v)\n\nReturns low word from double as bits\nsource\n\n\n\ndouble-one-minus-epsilon CONST\ndouble-one-minus-epsilon = 0.9999999999999999\nValue of 0x1.fffffffffffffp-1d = 0.(9)\nsource\n\n\n\ndouble-significand\n\n(double-significand v)\n\nExtract significand from double\nsource\n\n\n\neq\n\n(eq _)\n(eq a b)\n(eq a b & r)\n\nPrimitive math equality function.\nsource\n\n\n\neven?\n\n(even? x)\n\nPrimitive and inlined even?\nsource\n\n\n\nexcsc\n\n(excsc x)\n\nExcosecant\nsource\n\n\n\nexp\n\n(exp x)\n\nexp(x) = e^x\nsource\n\n\n\nexpexp\n\n(expexp x)\n\nexp(-exp(-x))\nsource\n\n\n\nexpm1\n\n(expm1 x)\n\nexp(x)-1 for small x\nsource\n\n\n\nexsec\n\n(exsec x)\n\nExsecant\nsource\n\n\n\nfactorial\n\n(factorial n)\n\nFactorial\nsource\n\n\n\nfactorial20\n\n(factorial20 n)\n\nFactorial table up to 20!\nsource\n\n\n\nfalling-factorial\n\n(falling-factorial n x)\n\nFalling (descending) factorial.\nsource\n\n\n\nfalling-factorial-int\n\n(falling-factorial-int n x)\n\nFalling (descending) factorial for integer n.\nsource\n\n\n\nfast* DEPRECATED\nDeprecated: Use * instead\n\n(fast*)\n(fast* a)\n(fast* a b)\n(fast* a b & r)\n\nPrimitive and inlined * as a function\nsource\n\n\n\nfast+ DEPRECATED\nDeprecated: Use + instead\n\n(fast+)\n(fast+ a)\n(fast+ a b)\n(fast+ a b & r)\n\nPrimitive and inlined + as a function\nsource\n\n\n\nfast- DEPRECATED\nDeprecated: Use - instead\n\n(fast-)\n(fast- a)\n(fast- a b)\n(fast- a b & r)\n\nPrimitive and inlined - as a function\nsource\n\n\n\nfast-div DEPRECATED\nDeprecated: Use / instead\n\n(fast-div)\n(fast-div a)\n(fast-div a b)\n(fast-div a b & r)\n\nPrimitive and inlined / as a function\nsource\n\n\n\nfast-identity DEPRECATED\nDeprecated: Use identity-double instead\n\n(fast-identity a)\n\nIdentity on double.\nsource\n\n\n\nfast-max DEPRECATED\nDeprecated: Use max instead\n\n(fast-max a)\n(fast-max a b)\n(fast-max a b & r)\n\nPrimitive and inlined max as a function\nsource\n\n\n\nfast-min DEPRECATED\nDeprecated: Use min instead\n\n(fast-min a)\n(fast-min a b)\n(fast-min a b & r)\n\nPrimitive and inlined min as a function\nsource\n\n\n\nfloor\n\n(floor x)\n(floor x scale)\n\n\\(\\lfloor x \\rfloor\\). See: qfloor.\nRounding is done to a multiply of scale value (when provided).\nsource\n\n\n\nfma\n\n(fma x y z)\n\n(x y z) -&gt; (+ z (* x y)) or Math/fma for java 9+\nsource\n\n\n\nfpow\n\n(fpow x exponent)\n\nFast version of pow where exponent is integer.\nsource\n\n\n\nfrac\n\n(frac v)\n\nFractional part, always returns values from 0.0 to 1.0 (exclusive). See sfrac for signed version.\nsource\n\n\n\ngcd\n\n(gcd a b)\n\nFast binary greatest common divisor (Stein’s algorithm)\nsource\n\n\n\ngroup-by-intervals\n\n(group-by-intervals coll)\n(group-by-intervals intervals coll)\n\nGroup sequence of values into given intervals.\nIf intervals are missing, use co-intervals to find some.\nsource\n\n\n\nhacovercos\n\n(hacovercos x)\n\nHacovercosine\nsource\n\n\n\nhacoversin\n\n(hacoversin x)\n\nHacoversine\nsource\n\n\n\nhavercos\n\n(havercos x)\n\nHavercosine\nsource\n\n\n\nhaversin\n\n(haversin x)\n(haversin [lat1 lon1] [lat2 lon2])\n(haversin lat1 lon1 lat2 lon2)\n\nHaversine formula for value or lattitude and longitude pairs.\nsource\n\n\n\nhaversine\nHaversine (haversin alias)\nsource\n\n\n\nhaversine-dist\n\n(haversine-dist [lat1 lon1] [lat2 lon2])\n(haversine-dist lat1 lon1 lat2 lon2)\n\nHaversine distance d for r=1\nsource\n\n\n\nhigh-2-exp\n\n(high-2-exp x)\n\nFind lowest exponent (power of 2) which is greater or equal x. See low-2-exp.\nsource\n\n\n\nhigh-exp\n\n(high-exp b x)\n\nFind lowest exponent for base b which is higher or equalx. See also low-exp.\nsource\n\n\n\nhypot\n\n(hypot x y)\n(hypot x y z)\n\nHypot. See also hypot-sqrt.\nsource\n\n\n\nhypot-sqrt\n\n(hypot-sqrt x y)\n(hypot-sqrt x y z)\n\nHypot, sqrt version: \\(\\sqrt{x^2+y^2}\\) or \\(\\sqrt{x^2+y^2+z^2}\\).\nsource\n\n\n\niabs\n\n(iabs x)\n\n\\(|x|\\) - long version. See abs.\nsource\n\n\n\nidentity-double\n\n(identity-double a)\n\nIdentity on double.\nsource\n\n\n\nidentity-long\n\n(identity-long a)\n\nIdentity on double.\nsource\n\n\n\ninc\n\n(inc x)\n\nPrimitive and inlined inc\nsource\n\n\n\ninf?\n\n(inf? v)\n\nCheck if a number is an infinite (positive or negative).\nsource\n\n\n\ninteger?\n\n(integer? v)\n\nCheck if given real number is an integer.\nsource\n\n\n\ninv-factorial\n\n(inv-factorial n)\n\nInverse of factorial, 1/n!\nsource\n\n\n\ninvalid-double?\n\n(invalid-double? v)\n\nCheck if a number is not finite double (NaN or ±Inf).\nsource\n\n\n\nitrunc\n\n(itrunc v)\n\nTruncate fractional part, keep sign. Returns long.\nsource\n\n\n\njvm-version CONST\njvm-version = 21\nsource\n\n\n\nlcm\n\n(lcm a b)\n\nFast binary least common multiplier.\nsource\n\n\n\nlerp\n\n(lerp start stop t)\n\nLinear interpolation between start and stop for amount t. See also mlerp, cos-interpolation, quad-interpolation or smooth-interpolation.\nsource\n\n\n\nln\n\n(ln x)\n\nlog(x)=ln(x)\nsource\n\n\n\nlog\n\n(log x)\n(log base x)\n\nlog(x)=ln(x) or logarithm with given base.\nsource\n\n\n\nlog-combinations\n\n(log-combinations n k)\n\nLog of binomial coefficient (n choose k)\nsource\n\n\n\nlog-factorial\n\n(log-factorial x)\n\nLog factorial, alias to log-gamma\nsource\n\n\n\nlog10\n\n(log10 x)\n\nlog_10(x)\nsource\n\n\n\nlog1mexp\n\n(log1mexp x)\n\nlog(1-exp(x)), x&lt;0\nsource\n\n\n\nlog1p\n\n(log1p x)\n\nlog(1+x) for small x\nsource\n\n\n\nlog1pexp\n\n(log1pexp x)\n\nlog(1+exp(x))\nsource\n\n\n\nlog1pmx\n\n(log1pmx x)\n\nlog(1+x)-x\nsource\n\n\n\nlog1psq\n\n(log1psq x)\n\nlog(1+x^2))\nsource\n\n\n\nlog2\n\n(log2 x)\n\nLogarithm with base 2.\n\\(\\ln_2{x}\\)\nsource\n\n\n\nlog2int\n\n(log2int v)\n\nFast and integer version of log2, returns long\nsource\n\n\n\nlog2mexp\n\n(log2mexp x)\n\nlog(2-exp(x))\nsource\n\n\n\nlogaddexp\n\n(logaddexp x y)\n\nlog(exp(x)+exp(y))\nsource\n\n\n\nlogb\n\n(logb b x)\n\nLogarithm with base b.\n\\(\\ln_b{x}\\)\nsource\n\n\n\nlogcosh\n\n(logcosh x)\n\nlog(cosh(x))\nsource\n\n\n\nlogexpm1\n\n(logexpm1 x)\n\nlog(exp(x)-1))\nsource\n\n\n\nlogistic\nAlias for sigmoid\nsource\n\n\n\nlogit\n\n(logit x)\n\nLogit function\nsource\n\n\n\nloglog\n\n(loglog x)\n\n-log(-log(x))\nsource\n\n\n\nlogmxp1\n\n(logmxp1 x)\n\nlog(x)-x+1\nsource\n\n\n\nlogsubexp\n\n(logsubexp x y)\n\nlog(abs(exp(x)-exp(y)))\nsource\n\n\n\nlogsumexp\n\n(logsumexp xs)\n\nlog(exp(x1)+…+exp(xn))\nsource\n\n\n\nlong-add\n\n(long-add)\n(long-add a)\n(long-add a b)\n(long-add a b c)\n(long-add a b c d)\n(long-add a b c d & r)\n\nPrimitive and inlined +. Coerces arguments and returned value to a long.\nsource\n\n\n\nlong-dec\n\n(long-dec x)\n\nPrimitive and inlined dec coerced to a long\nsource\n\n\n\nlong-div\n\n(long-div a)\n(long-div a b)\n(long-div a b c)\n(long-div a b c d)\n(long-div a b c d & r)\n\nPrimitive and inlined /. Coerces to arguments and returned value to a long.\nsource\n\n\n\nlong-inc\n\n(long-inc x)\n\nPrimitive and inlined inc coerced to a long\nsource\n\n\n\nlong-max\n\n(long-max a)\n(long-max a b)\n(long-max a b c)\n(long-max a b c d)\n(long-max a b c d & r)\n\nPrimitive and inlined max. Coerces arguments and returned values to longs.\nsource\n\n\n\nlong-min\n\n(long-min a)\n(long-min a b)\n(long-min a b c)\n(long-min a b c d)\n(long-min a b c d & r)\n\nPrimitive and inlined min. Coerces arguments and returned values to longs.\nsource\n\n\n\nlong-mod\n\n(long-mod x y)\n\nPrimitive and inlined mod coerced to longs\nsource\n\n\n\nlong-mult\n\n(long-mult)\n(long-mult a)\n(long-mult a b)\n(long-mult a b c)\n(long-mult a b c d)\n(long-mult a b c d & r)\n\nPrimitive and inlined *. Coerces arguments and returned value to a long.\nsource\n\n\n\nlong-quot\n\n(long-quot x y)\n\nPrimitive and inlined quot coerced to longs\nsource\n\n\n\nlong-rem\n\n(long-rem x y)\n\nPrimitive and inlined rem coerced to longs\nsource\n\n\n\nlong-sub\n\n(long-sub a)\n(long-sub a b)\n(long-sub a b c)\n(long-sub a b c d)\n(long-sub a b c d & r)\n\nPrimitive and inlined -. Coerces arguments and returned value to a long.\nsource\n\n\n\nlow-2-exp\n\n(low-2-exp x)\n\nFind greatest exponent (power of 2) which is lower or equal x. See high-2-exp.\nsource\n\n\n\nlow-exp\n\n(low-exp b x)\n\nFind greatest exponent for base b which is lower or equal x. See also high-exp.\nsource\n\n\n\nmake-norm\n\n(make-norm start stop)\n(make-norm start stop dstart dstop)\n\nMake norm function for given range. Resulting function accepts double value (with optional target [dstart,dstop] range) and returns double.\nsource\n\n\n\nmax\n\n(max a)\n(max a b)\n(max a b c)\n(max a b c d)\n(max a b c d & r)\n\nPrimitive and inlined max.\nsource\n\n\n\nmin\n\n(min a)\n(min a b)\n(min a b c)\n(min a b c d)\n(min a b c d & r)\n\nPrimitive and inlined min.\nsource\n\n\n\nmlerp MACRO\n\n(mlerp start stop t)\n\nlerp as macro. For inline code. See also lerp, cos-interpolation, quad-interpolation or smooth-interpolation.\nsource\n\n\n\nmnorm MACRO\n\n(mnorm v start stop)\n(mnorm v start1 stop1 start2 stop2)\n\nMacro version of norm.\nsource\n\n\n\nmod\n\n(mod x y)\n\nPrimitive and inlined mod\nsource\n\n\n\nmuladd\n\n(muladd x y z)\n\n(x y z) -&gt; (+ z (* x y)) or Math/fma for java 9+\nsource\n\n\n\nnan?\n\n(nan? v)\n\nCheck if a number is a NaN\nsource\n\n\n\nnear-zero?\n\n(near-zero? x)\n(near-zero? x abs-tol)\n(near-zero? x abs-tol rel-tol)\n\nChecks if given value is near zero with absolute (default: 1.0e-6) and/or relative (default 0.0) tolerance.\nsource\n\n\n\nneg-inf?\n\n(neg-inf? v)\n\nCheck if a number is negatively infinite.\nsource\n\n\n\nneg?\n\n(neg? x)\n\nPrimitive and inlined neg?\nsource\n\n\n\nnegative-zero?\n\n(negative-zero? x)\n\nCheck if zero is negative, ie. -0.0\nsource\n\n\n\nnegmuladd\n\n(negmuladd x y z)\n\n(x y z) -&gt; (+ z (* -x y)) or Math/fma for java 9+\nsource\n\n\n\nnext-double\n\n(next-double v)\n(next-double v delta)\n\nNext double value. Optional value delta sets step amount.\nsource\n\n\n\nnorm\n\n(norm v start stop)\n(norm v start1 stop1 start2 stop2)\n\nNormalize v from the range [start,stop] to the range [0,1] or map v from the range [start1,stop1] to the range [start2,stop2]. See also make-norm.\nsource\n\n\n\nnot-neg?\n\n(not-neg? x)\n\nPrimitive and inlined not-neg? (x&gt;=0.0)\nsource\n\n\n\nnot-pos?\n\n(not-pos? x)\n\nPrimitive and inlined not-pos? (x&lt;=0.0)\nsource\n\n\n\nnot==\n\n(not== _)\n(not== a b)\n(not== a b & r)\n\nNot equality. For more than two arguments, pairwise not equality is checked.\n(not== 1 2 1) === (and (not= 1 2) (not= 2 1))\nsource\n\n\n\nodd?\n\n(odd? x)\n\nPrimitive and inlined odd?\nsource\n\n\n\none?\n\n(one? x)\n\nPrimitive and inlined one? (x==1.0)\nsource\n\n\n\norder\n\n(order vs)\n(order vs decreasing?)\n\nOrdering permutation. See R docs\nOrder uses 0 based indexing.\nsource\n\n\n\npos-inf?\n\n(pos-inf? v)\n\nCheck if a number is positively infinite.\nsource\n\n\n\npos?\n\n(pos? x)\n\nPrimitive and inlined pos?\nsource\n\n\n\npow\n\n(pow x exponent)\n\nPower of a number\nsource\n\n\n\npow2\n\n(pow2 x)\n\nSame as sq. \\(x^2\\)\nsource\n\n\n\npow3\n\n(pow3 x)\n\n\\(x^3\\)\nsource\n\n\n\nprev-double\n\n(prev-double v)\n(prev-double v delta)\n\nNext double value. Optional value delta sets step amount.\nsource\n\n\n\nqceil\n\n(qceil x)\n\nFast version of ceil. Returns long.\nsource\n\n\n\nqcos\n\n(qcos x)\n\nFast and less accurate cos(x)\nsource\n\n\n\nqdist\n\n(qdist [x1 y1] [x2 y2])\n(qdist x1 y1 x2 y2)\n\nQuick version of Euclidean distance between points. qsqrt is used instead of sqrt.\nsource\n\n\n\nqexp\n\n(qexp x)\n\nQuick and less accurate version of exp.\nsource\n\n\n\nqfloor\n\n(qfloor x)\n\nFast version of floor. Returns long.\nsource\n\n\n\nqlog\n\n(qlog x)\n\nFast and less accurate version of log.\nsource\n\n\n\nqpow\n\n(qpow x exponent)\n\nFast and less accurate version of pow.\nsource\n\n\n\nqround\n\n(qround x)\n\nFast version of round. Returns long\nsource\n\n\n\nqsin\n\n(qsin x)\n\nFast and less accurate sin(x)\nsource\n\n\n\nqsqrt\n\n(qsqrt x)\n\nApproximated sqrt using binary operations with error 1.0E-2.\nsource\n\n\n\nquad-interpolation\n\n(quad-interpolation start stop t)\n\nQuad interpolation. See also lerp/mlerp, cos-interpolation or smooth-interpolation.\nsource\n\n\n\nquot\n\n(quot x y)\n\nPrimitive and inlined quot\nsource\n\n\n\nrad-in-deg CONST\nrad-in-deg = 57.29577951308232\n\\(\\frac{180}{\\pi}\\)\nsource\n\n\n\nradians\n\n(radians deg)\n\nConvert degrees into radians.\nsource\n\n\n\nrank\n\n(rank vs)\n(rank vs ties)\n(rank vs ties desc?)\n\nSample ranks. See R docs.\nRank uses 0 based indexing.\nPossible tie strategies: :average, :first, :last, :random, :min, :max, :dense.\n:dense is the same as in data.table::frank from R\nsource\n\n\n\nrank1\nsource\n\n\n\nrem\n\n(rem x y)\n\nPrimitive and inlined rem\nsource\n\n\n\nremainder\n\n(remainder dividend divisor)\n\nFrom FastMath doc: returns dividend - divisor * n, where n is the mathematical integer closest to dividend/divisor. Returned value in [-|divisor|/2,|divisor|/2]\nsource\n\n\n\nrint\n\n(rint x)\n(rint x scale)\n\nRound to double. See round, qround.\nRounding is done to a multiply of scale value (when provided).\nsource\n\n\n\nrising-factorial\n\n(rising-factorial n x)\n\nRising (Pochhammer) factorial.\nsource\n\n\n\nrising-factorial-int\n\n(rising-factorial-int n x)\n\nRising (Pochhammer) factorial for integer n.\nsource\n\n\n\nround\n\n(round x)\n\nRound to long. See: rint, qround.\nsource\n\n\n\nround-even\n\n(round-even x)\n\nRound evenly (like in round in R), IEEE / IEC rounding\nsource\n\n\n\nround-up-pow2\n\n(round-up-pow2 v)\n\nRound long to the next power of 2\nsource\n\n\n\nrqsqrt\n\n(rqsqrt x)\n\nReciprocal of qsqrt. Quick and less accurate.\nsource\n\n\n\nsafe-sqrt\n\n(safe-sqrt value)\n\nSafe sqrt, for value &lt;= 0 result is 0.\n$ \\{\n\\[\\begin{array}{lr}\n  0 & : x \\leq 0\\\\\\\\\n  \\sqrt{x} & : x &gt; 0\n  \\end{array}\\]\n\\right. $\nsource\n\n\n\nsample\n\n(sample f number-of-values)\n(sample f number-of-values domain?)\n(sample f domain-min domain-max number-of-values)\n(sample f domain-min domain-max number-of-values domain?)\n\nSample function f and return sequence of values.\nrange-min defaults to 0.0, range-max to 1.0.\nRange is inclusive.\nWhen optional domain? is set to true (default: false) function returns pairs [x,(f x)].\nsource\n\n\n\nsec\n\n(sec x)\n\nsec(x)\nsource\n\n\n\nsech\n\n(sech x)\n\nHyperbolic secant\nsource\n\n\n\nsecpi\n\n(secpi x)\n\nsec(pi*x)\nsource\n\n\n\nseq-&gt;double-array\n\n(seq-&gt;double-array vs)\n\nConvert sequence to double array. Returns input if vs is double array already.\nsource\n\n\n\nseq-&gt;double-double-array\n\n(seq-&gt;double-double-array vss)\n\nConvert sequence to double-array of double-arrays.\nIf sequence is double-array of double-arrays returns vss\nsource\n\n\n\nsfrac\n\n(sfrac v)\n\nFractional part, always returns values from -1.0 to 1.0 (exclusive). See frac for unsigned version.\nsource\n\n\n\nsgn\n\n(sgn value)\n\nReturn -1 when value is negative, 1 otherwise. See also signum.\n$ \\{\n\\[\\begin{array}{lr}\n  1.0 & : x \\geq 0\\\\\\\\\n  -1.0 & : x &lt; 0\\\\\\\\\n  \\end{array}\\]\n\\right. $\nsource\n\n\n\nsigmoid\n\n(sigmoid x)\n\nSigmoid function\nsource\n\n\n\nsignum\n\n(signum value)\n\nReturn 1 if value is &gt; 0, 0 if it is 0, -1 otherwise. See also sgn.\n$ \\{\n\\[\\begin{array}{lr}\n  1.0 & : x &gt; 0\\\\\\\\\n  -1.0 & : x &lt; 0\\\\\\\\\n  0.0 & : x = 0\n  \\end{array}\\]\n\\right. $\nsource\n\n\n\nsin\n\n(sin x)\n\nsin(x)\nsource\n\n\n\nsinc\n\n(sinc v)\n\nSinc function.\nsource\n\n\n\nsinh\n\n(sinh x)\n\nsinh(x)\nsource\n\n\n\nsinpi\n\n(sinpi x)\n\nsin(pi*x)\nsource\n\n\n\nslice-range\n\n(slice-range start end cnt)\n(slice-range cnt)\n\nSlice range to get cnt number of points evenly distanced.\nsource\n\n\n\nsmooth-interpolation\n\n(smooth-interpolation start stop t)\n\nSmoothstep based interpolation. See also lerp/mlerp, quad-interpolation or cos-interpolation.\nsource\n\n\n\nsmooth-max\n\n(smooth-max xs)\n(smooth-max xs alpha)\n(smooth-max xs alpha family)\n\nSmooth maximum function.\nA smooth function with alpha argument. When alpha goes to infinity, function returns maximum value of xs.\nFamily:\n\n:lse - LogSumExp (default)\n:boltzmann - Boltzmann operator, works for small alpha values\n:mellowmax\n:p-norm\n:smu - smooth maximum unit, epsilon = 1/alpha &gt; 0\n\nsource\n\n\n\nsmoothstep\n\n(smoothstep edge0 edge1 x)\n\nGL smoothstep.\nsource\n\n\n\nsq\n\n(sq x)\n\nSame as pow2. \\(x^2\\)\nsource\n\n\n\nsqrt\n\n(sqrt x)\n\n\\(\\sqrt{x}\\)\nsource\n\n\n\nsum-of-products\n\n(sum-of-products a b c d)\n\nKahan’s algorithm for (ab)+(cd) to avoid catastrophic cancellation.\nsource\n\n\n\ntan\n\n(tan x)\n\ntan(x)\nsource\n\n\n\ntanh\n\n(tanh x)\n\ntanh(x)\nsource\n\n\n\ntanpi\n\n(tanpi x)\n\ntan(pi*x)\nsource\n\n\n\ntrunc\n\n(trunc v)\n\nTruncate fractional part, keep sign. Returns double.\nsource\n\n\n\nulp\n\n(ulp x)\n\nUnit in the Last Place, distance between next value larger than x and x\nsource\n\n\n\nunsigned-bit-shift-right\n\n(unsigned-bit-shift-right x shift)\n\nShift bits right and set most significant bit to 0\nsource\n\n\n\nunuse-primitive-operators\n\n(unuse-primitive-operators)\n(unuse-primitive-operators skip-set)\n\nUndoes the work of use-primitive-operators. This is idempotent.\nsource\n\n\n\nuse-primitive-operators\n\n(use-primitive-operators)\n(use-primitive-operators skip-set)\n\nReplaces Clojure’s arithmetic and number coercion functions with primitive equivalents. These are defined as macros, so they cannot be used as higher-order functions. This is an idempotent operation. Undo with unuse-primitive-operators.\nsource\n\n\n\nvalid-double?\n\n(valid-double? v)\n\nCheck if a number is finite double.\nsource\n\n\n\nvercos\n\n(vercos x)\n\nVercosine\nsource\n\n\n\nversin\n\n(versin x)\n\nVersine\nsource\n\n\n\nwrap\n\n(wrap [start stop] value)\n(wrap start stop value)\n\nWrap overflowed value into the range, similar to ofWrap.\nsource\n\n\n\nxexpx\n\n(xexpx x)\n\nx * exp(x)\nsource\n\n\n\nxexpy\n\n(xexpy x y)\n\nx * exp(x)\nsource\n\n\n\nxlog1py\n\n(xlog1py x y)\n\nx * log(1+y)\nsource\n\n\n\nxlogx\n\n(xlogx x)\n\nx * log(x)\nsource\n\n\n\nxlogy\n\n(xlogy x y)\n\nx * log(y)\nsource\n\n\n\nxor\n\n(xor x y)\n(xor x y & r)\n\nPrimitive boolean xor\nsource\n\n\n\nzero?\n\n(zero? x)\n\nPrimitive and inlined zero?\nsource\n\nsource: clay/core.clj",
    "crumbs": [
      "Core"
    ]
  },
  {
    "objectID": "vector_matrix.html",
    "href": "vector_matrix.html",
    "title": "Vectors and matrices",
    "section": "",
    "text": "Vectors",
    "crumbs": [
      "Vectors and matrices"
    ]
  },
  {
    "objectID": "vector_matrix.html#vectors",
    "href": "vector_matrix.html#vectors",
    "title": "Vectors and matrices",
    "section": "",
    "text": "Reference\n\nfastmath.vector\nMathematical vector operations.\n### Types\n\nFixed size (custom types):\n\nNumber - 1d vector\nVec2 - 2d vector, creator vec2\nVec3 - 3d vector, creator vec3\nVec4 - 4d vector, creator vec4\nArrayVec - fixed size double array wrapper, n-dimensional, creator array-vec\n\nFixed size\n\ndoubles - double array itself\n\nVariable size:\n\nClojure’s IPersistentVector, creator []\nClojure’s ISeq\n\n\nVectorProto defines most of the functions.\nVectors implements also:\n\nSequable\nSequencial\nIFn\nCounted\nReversible\nIndexed\nILookup\nequals and toString from Object\nIPersistentVector\nAssociative\nclojure.core.matrix.protocols\nIReduce and IReduceInit\n\nThat means that vectors can be destructured, treated as sequence or called as a function. See vec2 for examples.\n\n\n-&gt;ArrayVec\n\n(-&gt;ArrayVec array)\n\nPositional factory function for class fastmath.vector.ArrayVec.\nsource\n\n\n\n-&gt;Vec2\n\n(-&gt;Vec2 x y)\n\nPositional factory function for class fastmath.vector.Vec2.\nsource\n\n\n\n-&gt;Vec3\n\n(-&gt;Vec3 x y z)\n\nPositional factory function for class fastmath.vector.Vec3.\nsource\n\n\n\n-&gt;Vec4\n\n(-&gt;Vec4 x y z w)\n\nPositional factory function for class fastmath.vector.Vec4.\nsource\n\n\n\nabs\n\n(abs v)\n\nAbsolute value of vector elements\nsource\n\n\n\nacos\n\n(acos vector)\n\nApply acos to vector elements.\nsource\n\n\n\nacosh\n\n(acosh vector)\n\nApply acosh to vector elements.\nsource\n\n\n\nacot\n\n(acot vector)\n\nApply acot to vector elements.\nsource\n\n\n\nacoth\n\n(acoth vector)\n\nApply acoth to vector elements.\nsource\n\n\n\nacsc\n\n(acsc vector)\n\nApply acsc to vector elements.\nsource\n\n\n\nacsch\n\n(acsch vector)\n\nApply acsch to vector elements.\nsource\n\n\n\nadd\n\n(add v)\n(add v1 v2)\n\nSum of two vectors.\nsource\n\n\n\naligned?\n\n(aligned? v1 v2 tol)\n(aligned? v1 v2)\n\nAre vectors aligned (have the same direction)?\nsource\n\n\n\nangle-between\n\n(angle-between v1 v2)\n\nAngle between two vectors\nSee also relative-angle-between.\nsource\n\n\n\napplyf DEPRECATED\nDeprecated: v1.3.0\nSame as fmap. Deprecated.\nsource\n\n\n\napprox\n\n(approx v)\n(approx v d)\n\nRound to 2 (or d) decimal places\nsource\n\n\n\narray-&gt;vec2\n\n(array-&gt;vec2 arr)\n\nDoubles array to Vec2\nsource\n\n\n\narray-&gt;vec3\n\n(array-&gt;vec3 arr)\n\nDoubles array to Vec3\nsource\n\n\n\narray-&gt;vec4\n\n(array-&gt;vec4 arr)\n\nDoubles array to Vec4\nsource\n\n\n\narray-vec\n\n(array-vec xs)\n\nMake ArrayVec type based on provided sequence xs.\nsource\n\n\n\nas-vec\n\n(as-vec v)\n(as-vec v xs)\n\nCreate vector from sequence as given type. If there is no sequence fill with 0.0.\nsource\n\n\n\nasec\n\n(asec vector)\n\nApply asec to vector elements.\nsource\n\n\n\nasech\n\n(asech vector)\n\nApply asech to vector elements.\nsource\n\n\n\nasin\n\n(asin vector)\n\nApply asin to vector elements.\nsource\n\n\n\nasinh\n\n(asinh vector)\n\nApply asinh to vector elements.\nsource\n\n\n\natan\n\n(atan vector)\n\nApply atan to vector elements.\nsource\n\n\n\natanh\n\n(atanh vector)\n\nApply atanh to vector elements.\nsource\n\n\n\naverage\n\n(average v)\n(average v weights)\n\nMean or weighted average of the vector\nsource\n\n\n\naverage-vectors\n\n(average-vectors init vs)\n(average-vectors vs)\n\nAverage / centroid of vectors. Input: initial vector (optional), list of vectors\nsource\n\n\n\naxis-rotate\n\n(axis-rotate v angle axis)\n(axis-rotate v angle axis pivot)\n\nRotate vector. Only for Vec3 types\nsource\n\n\n\nbase-from\n\n(base-from v)\n\nList of perpendicular vectors (basis). Works only for Vec2 and Vec3 types.\nsource\n\n\n\ncb\n\n(cb vector)\n\nApply cb to vector elements.\nsource\n\n\n\ncbrt\n\n(cbrt vector)\n\nApply cbrt to vector elements.\nsource\n\n\n\nceil\n\n(ceil vector)\n\nApply ceil to vector elements.\nsource\n\n\n\nclamp\n\n(clamp v mn mx)\n(clamp v)\n\nClamp elements.\nsource\n\n\n\ncos\n\n(cos vector)\n\nApply cos to vector elements.\nsource\n\n\n\ncosh\n\n(cosh vector)\n\nApply cosh to vector elements.\nsource\n\n\n\ncot\n\n(cot vector)\n\nApply cot to vector elements.\nsource\n\n\n\ncoth\n\n(coth vector)\n\nApply coth to vector elements.\nsource\n\n\n\ncross\n\n(cross v1 v2)\n\nCross product\nsource\n\n\n\ncsc\n\n(csc vector)\n\nApply csc to vector elements.\nsource\n\n\n\ncsch\n\n(csch vector)\n\nApply csch to vector elements.\nsource\n\n\n\ndegrees\n\n(degrees vector)\n\nApply degrees to vector elements.\nsource\n\n\n\ndelta-eq\n\n(delta-eq v1 v2)\n(delta-eq v1 v2 abs-tol)\n(delta-eq v1 v2 abs-tol rel-tol)\n\nEquality with given absolute (and/or relative) toleance.\nsource\n\n\n\ndhash-code\n\n(dhash-code state a)\n(dhash-code a)\n\ndouble hashcode\nsource\n\n\n\ndist\n\n(dist v1 v2)\n\nEuclidean distance between vectors\nsource\n\n\n\ndist-abs\n\n(dist-abs v1 v2)\n\nManhattan distance between vectors\nsource\n\n\n\ndist-ang\n\n(dist-ang v1 v2)\n\nAngular distance\nsource\n\n\n\ndist-canberra\n\n(dist-canberra v1 v2)\n\nCanberra distance\nsource\n\n\n\ndist-cheb\n\n(dist-cheb v1 v2)\n\nChebyshev distance between 2d vectors\nsource\n\n\n\ndist-discrete\n\n(dist-discrete v1 v2)\n\nDiscrete distance between 2d vectors\nsource\n\n\n\ndist-emd\n\n(dist-emd v1 v2)\n\nEarth Mover’s Distance\nsource\n\n\n\ndist-sq\n\n(dist-sq v1 v2)\n\nSquared Euclidean distance between vectors\nsource\n\n\n\ndistances\nsource\n\n\n\ndiv\n\n(div v1 v)\n(div v1)\n\nVector division or reciprocal.\nsource\n\n\n\ndot\n\n(dot v1 v2)\n\nDot product of two vectors.\nsource\n\n\n\neconstrain\n\n(econstrain v mn mx)\n\nElement-wise constrain\nsource\n\n\n\nedelta-eq\n\n(edelta-eq v1 v2)\n(edelta-eq v1 v2 abs-tol)\n(edelta-eq v1 v2 abs-tol rel-tol)\n\nElement-wise equality with given absolute (and/or relative) toleance.\nsource\n\n\n\nediv\n\n(ediv v1 v2)\n\nElement-wise division of two vectors.\nsource\n\n\n\neinterpolate\n\n(einterpolate v1 v2 v)\n(einterpolate v1 v2 v f)\n\nInterpolate vector selement-wise, optionally set interpolation fn (default: lerp)\nsource\n\n\n\nemn\n\n(emn v1 v2)\n\nElement-wise min from two vectors.\nsource\n\n\n\nemult\n\n(emult v1 v2)\n\nElement-wise vector multiplication (Hadamard product).\nsource\n\n\n\nemx\n\n(emx v1 v2)\n\nElement-wise max from two vectors.\nsource\n\n\n\nexp\n\n(exp vector)\n\nApply exp to vector elements.\nsource\n\n\n\nexpm1\n\n(expm1 vector)\n\nApply expm1 to vector elements.\nsource\n\n\n\nfaceforward\n\n(faceforward n v)\n\nFlip normal n to match the same direction as v.\nsource\n\n\n\nfloor\n\n(floor vector)\n\nApply floor to vector elements.\nsource\n\n\n\nfmap\n\n(fmap v f)\n\nApply function to all vector values (like map but returns the same type).\nsource\n\n\n\nfrac\n\n(frac vector)\n\nApply frac to vector elements.\nsource\n\n\n\nfrom-polar\n\n(from-polar v)\n\nFrom polar coordinates (2d, 3d only)\nsource\n\n\n\ngenerate-vec2\n\n(generate-vec2 f1 f2)\n(generate-vec2 f)\n\nGenerate Vec2 with fn(s)\nsource\n\n\n\ngenerate-vec3\n\n(generate-vec3 f1 f2 f3)\n(generate-vec3 f)\n\nGenerate Vec3 with fn(s)\nsource\n\n\n\ngenerate-vec4\n\n(generate-vec4 f1 f2 f3 f4)\n(generate-vec4 f)\n\nGenerate Vec4 with fn(s)\nsource\n\n\n\nheading\n\n(heading v)\n\nAngle between vector and unit vector [1,0,...]\nsource\n\n\n\ninterpolate\n\n(interpolate v1 v2 t)\n(interpolate v1 v2 t f)\n\nInterpolate vectors, optionally set interpolation fn (default: lerp)\nsource\n\n\n\nis-near-zero?\n\n(is-near-zero? v)\n(is-near-zero? v abs-tol)\n(is-near-zero? v abs-tol rel-tol)\n\nEquality to zero 0 with given absolute (and/or relative) toleance.\nsource\n\n\n\nis-zero?\n\n(is-zero? v)\n\nIs vector zero?\nsource\n\n\n\nlerp\n\n(lerp v1 v2 t)\n\nLinear interpolation of vectors\nsource\n\n\n\nlimit\n\n(limit v len)\n\nLimit length of the vector by given value\nsource\n\n\n\nln\n\n(ln vector)\n\nApply ln to vector elements.\nsource\n\n\n\nlog\n\n(log vector)\n\nApply log to vector elements.\nsource\n\n\n\nlog10\n\n(log10 vector)\n\nApply log10 to vector elements.\nsource\n\n\n\nlog1mexp\n\n(log1mexp vector)\n\nApply log1mexp to vector elements.\nsource\n\n\n\nlog1p\n\n(log1p vector)\n\nApply log1p to vector elements.\nsource\n\n\n\nlog1pexp\n\n(log1pexp vector)\n\nApply log1pexp to vector elements.\nsource\n\n\n\nlog1pmx\n\n(log1pmx vector)\n\nApply log1pmx to vector elements.\nsource\n\n\n\nlog1psq\n\n(log1psq vector)\n\nApply log1psq to vector elements.\nsource\n\n\n\nlog2\n\n(log2 vector)\n\nApply log2 to vector elements.\nsource\n\n\n\nlogexpm1\n\n(logexpm1 vector)\n\nApply logexpm1 to vector elements.\nsource\n\n\n\nlogit\n\n(logit vector)\n\nApply logit to vector elements.\nsource\n\n\n\nlogmeanexp\n\n(logmeanexp v)\n\nsource\n\n\n\nlogmxp1\n\n(logmxp1 vector)\n\nApply logmxp1 to vector elements.\nsource\n\n\n\nlogsoftmax\n\n(logsoftmax v)\n\nsource\n\n\n\nlogsumexp\n\n(logsumexp v)\n\nsource\n\n\n\nmag\n\n(mag v)\n\nLength of the vector.\nsource\n\n\n\nmagsq\n\n(magsq v)\n\nLength of the vector squared.\nsource\n\n\n\nmake-vector\n\n(make-vector dims xs)\n(make-vector dims)\n\nReturns fixed size vector for given number of dimensions.\nProper type is used.\nsource\n\n\n\nmaxdim\n\n(maxdim v)\n\nIndex of maximum value.\nsource\n\n\n\nmindim\n\n(mindim v)\n\nIndex of minimum value.\nsource\n\n\n\nmn\n\n(mn v)\n\nMinimum value of vector elements\nsource\n\n\n\nmult\n\n(mult v x)\n\nMultiply vector by number x.\nsource\n\n\n\nmx\n\n(mx v)\n\nMaximum value of vector elements\nsource\n\n\n\nnear-zero?\n\n(near-zero? v)\n(near-zero? v abs-tol)\n(near-zero? v abs-tol rel-tol)\n\nEquality to zero 0 with given absolute (and/or relative) toleance.\nsource\n\n\n\nnonzero-count\n\n(nonzero-count v)\n\nCount non zero velues in vector\nsource\n\n\n\nnormalize\n\n(normalize v)\n\nNormalize vector (set length = 1.0)\nsource\n\n\n\northogonal-polynomials\n\n(orthogonal-polynomials xs)\n\nCreates orthogonal list of vectors based on xs, starting from degree 1\nsource\n\n\n\northonormal-polynomials\n\n(orthonormal-polynomials xs)\n\nCreates orthonormal list of vector based on xs, starting from degree 1\nsource\n\n\n\npermute\n\n(permute v idxs)\n\nPermute vector elements with given indices.\nsource\n\n\n\nperpendicular\n\n(perpendicular v)\n(perpendicular v1 v2)\n\nPerpendicular vector. Only for Vec2 and Vec3 types.\nsource\n\n\n\nprod\n\n(prod v)\n\nProduct of elements\nsource\n\n\n\nproject\n\n(project v1 v2)\n\nProject v1 onto v2\nsource\n\n\n\nradians\n\n(radians vector)\n\nApply radians to vector elements.\nsource\n\n\n\nreciprocal\n\n(reciprocal v)\n\nReciprocal of elements.\nsource\n\n\n\nrelative-angle-between\n\n(relative-angle-between v1 v2)\n\nAngle between two vectors relative to each other.\nSee also angle-between.\nsource\n\n\n\nrint\n\n(rint vector)\n\nApply rint to vector elements.\nsource\n\n\n\nrotate\n\n(rotate v angle)\n(rotate v angle-x angle-y angle-z)\n\nRotate vector. Only for Vec2 and Vec3 types.\nsource\n\n\n\nround\n\n(round vector)\n\nApply round to vector elements.\nsource\n\n\n\nsafe-sqrt\n\n(safe-sqrt vector)\n\nApply safe-sqrt to vector elements.\nsource\n\n\n\nsec\n\n(sec vector)\n\nApply sec to vector elements.\nsource\n\n\n\nsech\n\n(sech vector)\n\nApply sech to vector elements.\nsource\n\n\n\nseq-&gt;vec2\n\n(seq-&gt;vec2 xs)\n\nAny seq to Vec2\nsource\n\n\n\nseq-&gt;vec3\n\n(seq-&gt;vec3 xs)\n\nAny seq to Vec3\nsource\n\n\n\nseq-&gt;vec4\n\n(seq-&gt;vec4 xs)\n\nAny seq to Vec4\nsource\n\n\n\nset-mag\n\n(set-mag v len)\n\nSet length of the vector\nsource\n\n\n\nsfrac\n\n(sfrac vector)\n\nApply sfrac to vector elements.\nsource\n\n\n\nsgn\n\n(sgn vector)\n\nApply sgn to vector elements.\nsource\n\n\n\nshift\n\n(shift v)\n(shift v x)\n\nAdd value to every vector element.\nsource\n\n\n\nsigmoid\n\n(sigmoid vector)\n\nApply sigmoid to vector elements.\nsource\n\n\n\nsignum\n\n(signum vector)\n\nApply signum to vector elements.\nsource\n\n\n\nsim-cos\n\n(sim-cos v1 v2)\n\nCosine similarity\nsource\n\n\n\nsin\n\n(sin vector)\n\nApply sin to vector elements.\nsource\n\n\n\nsinc\n\n(sinc vector)\n\nApply sinc to vector elements.\nsource\n\n\n\nsinh\n\n(sinh vector)\n\nApply sinh to vector elements.\nsource\n\n\n\nsize\n\n(size v)\n\nLength of the vector.\nsource\n\n\n\nsoftmax\n\n(softmax v)\n\nsource\n\n\n\nsq\n\n(sq vector)\n\nApply sq to vector elements.\nsource\n\n\n\nsqrt\n\n(sqrt vector)\n\nApply sqrt to vector elements.\nsource\n\n\n\nsub\n\n(sub v)\n(sub v1 v2)\n\nSubtraction of two vectors.\nsource\n\n\n\nsum\n\n(sum v)\n\nSum of elements\nsource\n\n\n\ntan\n\n(tan vector)\n\nApply tan to vector elements.\nsource\n\n\n\ntanh\n\n(tanh vector)\n\nApply tanh to vector elements.\nsource\n\n\n\nto-polar\n\n(to-polar v)\n\nTo polar coordinates (2d, 3d only), first element is length, the rest angle.\nsource\n\n\n\nto-vec DEPRECATED\nDeprecated: v1.5.0\nSame as vec-&gt;Vec. Deprecated.\nsource\n\n\n\ntransform\n\n(transform v o vx vy)\n(transform v o vx vy vz)\n\nTransform vector; map point to coordinate system defined by origin, vx and vy (as bases), Only for Vec2 and Vec3 types.\nsource\n\n\n\ntriple-product\n\n(triple-product a b c)\n\na o (b x c)\nsource\n\n\n\ntrunc\n\n(trunc vector)\n\nApply trunc to vector elements.\nsource\n\n\n\nvec-&gt;RealVector\n\n(vec-&gt;RealVector v)\n\nConvert to Apache Commons Math RealVector\nsource\n\n\n\nvec-&gt;Vec\n\n(vec-&gt;Vec v)\n\nConvert to Clojure primitive vector Vec.\nsource\n\n\n\nvec-&gt;array\n\n(vec-&gt;array v)\n\nConvert to double array\nsource\n\n\n\nvec-&gt;seq\n\n(vec-&gt;seq v)\n\nConvert to sequence (same as seq)\nsource\n\n\n\nvec2\n\n(vec2 x y)\n(vec2)\n\nMake 2d vector.\nsource\n\n\n\nvec3\n\n(vec3 x y z)\n(vec3 v z)\n(vec3)\n\nMake Vec2 vector\nsource\n\n\n\nvec4\n\n(vec4 x y z w)\n(vec4 v w)\n(vec4 v z w)\n(vec4)\n\nMake Vec4 vector\nsource\n\n\n\nxlogx\n\n(xlogx vector)\n\nApply xlogx to vector elements.\nsource\n\n\n\nzero-count\n\n(zero-count v)\n\nCount zeros in vector\nsource\n\n\n\nzero?\n\n(zero? v)\n\nIs vector zero?\nsource",
    "crumbs": [
      "Vectors and matrices"
    ]
  },
  {
    "objectID": "vector_matrix.html#matrices",
    "href": "vector_matrix.html#matrices",
    "title": "Vectors and matrices",
    "section": "Matrices",
    "text": "Matrices\n\nReference\n\nfastmath.matrix\nFixed size (2x2, 3x3, 4x4) matrix types.\n\n\n-&gt;Mat2x2\n\n(-&gt;Mat2x2 a00 a01 a10 a11)\n\nPositional factory function for class fastmath.matrix.Mat2x2.\nsource\n\n\n\n-&gt;Mat3x3\n\n(-&gt;Mat3x3 a00 a01 a02 a10 a11 a12 a20 a21 a22)\n\nPositional factory function for class fastmath.matrix.Mat3x3.\nsource\n\n\n\n-&gt;Mat4x4\n\n(-&gt;Mat4x4 a00 a01 a02 a03 a10 a11 a12 a13 a20 a21 a22 a23 a30 a31 a32 a33)\n\nPositional factory function for class fastmath.matrix.Mat4x4.\nsource\n\n\n\nacos\n\n(acos vector)\n\nApply acos to matrix elements.\nsource\n\n\n\nacosh\n\n(acosh vector)\n\nApply acosh to matrix elements.\nsource\n\n\n\nacot\n\n(acot vector)\n\nApply acot to matrix elements.\nsource\n\n\n\nacoth\n\n(acoth vector)\n\nApply acoth to matrix elements.\nsource\n\n\n\nacsc\n\n(acsc vector)\n\nApply acsc to matrix elements.\nsource\n\n\n\nacsch\n\n(acsch vector)\n\nApply acsch to matrix elements.\nsource\n\n\n\nadd\n\n(add A)\n(add A B)\n\nAdd matrices, C=A+B.\nsource\n\n\n\nadds\n\n(adds A s)\n\nAdd scalar to all matrix elements\nsource\n\n\n\nasec\n\n(asec vector)\n\nApply asec to matrix elements.\nsource\n\n\n\nasech\n\n(asech vector)\n\nApply asech to matrix elements.\nsource\n\n\n\nasin\n\n(asin vector)\n\nApply asin to matrix elements.\nsource\n\n\n\nasinh\n\n(asinh vector)\n\nApply asinh to matrix elements.\nsource\n\n\n\natan\n\n(atan vector)\n\nApply atan to matrix elements.\nsource\n\n\n\natanh\n\n(atanh vector)\n\nApply atanh to matrix elements.\nsource\n\n\n\ncb\n\n(cb vector)\n\nApply cb to matrix elements.\nsource\n\n\n\ncbrt\n\n(cbrt vector)\n\nApply cbrt to matrix elements.\nsource\n\n\n\nceil\n\n(ceil vector)\n\nApply ceil to matrix elements.\nsource\n\n\n\ncholesky\n\n(cholesky A)\n(cholesky A upper?)\n\nCalculate L (lower by default) triangular for where L * L^T = A.\nChecks only for symmetry, can return NaNs when A is not positive-definite.\nsource\n\n\n\ncol\n\n(col A c)\n\nReturn column as a vector\nsource\n\n\n\ncols\n\n(cols A)\n\nReturn matrix columns\nsource\n\n\n\ncols-&gt;RealMatrix\n\n(cols-&gt;RealMatrix cols)\n\nReturn Apache Commons Math Array2DRowMatrix from sequence of columns\nsource\n\n\n\ncols-&gt;mat\n\n(cols-&gt;mat real-matrix-cols)\n(cols-&gt;mat [a00 a10] [a01 a11])\n(cols-&gt;mat [a00 a10 a20] [a01 a11 a21] [a02 a12 a22])\n(cols-&gt;mat [a00 a10 a20 a30] [a01 a11 a21 a31] [a02 a12 a22 a32] [a03 a13 a23 a33])\n\nCreate nxn matrix from nd vectors (columns).\nsource\n\n\n\ncols-&gt;mat2x2\n\n(cols-&gt;mat2x2 [a00 a10] [a01 a11])\n\nCreate 2x2 matrix from 2d vectors (columns).\nsource\n\n\n\ncols-&gt;mat3x3\n\n(cols-&gt;mat3x3 [a00 a10 a20] [a01 a11 a21] [a02 a12 a22])\n\nCreate 3x3 matrix from 3d vectors (columns).\nsource\n\n\n\ncols-&gt;mat4x4\n\n(cols-&gt;mat4x4 [a00 a10 a20 a30] [a01 a11 a21 a31] [a02 a12 a22 a32] [a03 a13 a23 a33])\n\nCreate 4x4 matrix from 4d vectors (columns).\nsource\n\n\n\ncondition\n\n(condition A)\n(condition A norm-type)\n\nCondition number calculated for L2 norm by default (see norm for other norm types).\nCond(A) = norm(A) * norm(inv(A))\nsource\n\n\n\ncos\n\n(cos vector)\n\nApply cos to matrix elements.\nsource\n\n\n\ncosh\n\n(cosh vector)\n\nApply cosh to matrix elements.\nsource\n\n\n\ncot\n\n(cot vector)\n\nApply cot to matrix elements.\nsource\n\n\n\ncoth\n\n(coth vector)\n\nApply coth to matrix elements.\nsource\n\n\n\ncsc\n\n(csc vector)\n\nApply csc to matrix elements.\nsource\n\n\n\ncsch\n\n(csch vector)\n\nApply csch to matrix elements.\nsource\n\n\n\ndegrees\n\n(degrees vector)\n\nApply degrees to matrix elements.\nsource\n\n\n\ndet\n\n(det A)\n\nReturn determinant of the matrix.\nsource\n\n\n\ndiag\n\n(diag A)\n\nReturn diagonal of the matrix as a vector.\nsource\n\n\n\ndiagonal\n\n(diagonal v)\n(diagonal a11 a22)\n(diagonal a11 a22 a33)\n(diagonal a11 a22 a33 a44)\n\nCreate diagonal matrix\nsource\n\n\n\neigenvalues\n\n(eigenvalues A)\n\nReturn complex eigenvalues for given matrix as a sequence\nsource\n\n\n\neigenvalues-matrix\n\n(eigenvalues-matrix A)\n\nReturn eigenvalues for given matrix as a diagonal or block diagonal matrix\nsource\n\n\n\neigenvectors\n\n(eigenvectors A)\n(eigenvectors A normalize?)\n\nReturn eigenvectors as a matrix (columns). Vectors can be normalized.\nsource\n\n\n\nemulm\n\n(emulm A B)\n\nMultiply two matrices element-wise, Hadamard product, C=AoB\nsource\n\n\n\nentry\n\n(entry A row col)\n\nGet entry at given row and column\nsource\n\n\n\nexp\n\n(exp vector)\n\nApply exp to matrix elements.\nsource\n\n\n\nexpm1\n\n(expm1 vector)\n\nApply expm1 to matrix elements.\nsource\n\n\n\neye\nsource\n\n\n\nfloor\n\n(floor vector)\n\nApply floor to matrix elements.\nsource\n\n\n\nfmap\n\n(fmap A f)\n\nApply a function f to each matrix element.\nsource\n\n\n\nfrac\n\n(frac vector)\n\nApply frac to matrix elements.\nsource\n\n\n\ninverse\n\n(inverse m)\n\nMatrix inversion.\nReturns nil if inversion doesn’t exist.\nsource\n\n\n\nln\n\n(ln vector)\n\nApply ln to matrix elements.\nsource\n\n\n\nlog\n\n(log vector)\n\nApply log to matrix elements.\nsource\n\n\n\nlog10\n\n(log10 vector)\n\nApply log10 to matrix elements.\nsource\n\n\n\nlog1mexp\n\n(log1mexp vector)\n\nApply log1mexp to matrix elements.\nsource\n\n\n\nlog1p\n\n(log1p vector)\n\nApply log1p to matrix elements.\nsource\n\n\n\nlog1pexp\n\n(log1pexp vector)\n\nApply log1pexp to matrix elements.\nsource\n\n\n\nlog1pmx\n\n(log1pmx vector)\n\nApply log1pmx to matrix elements.\nsource\n\n\n\nlog1psq\n\n(log1psq vector)\n\nApply log1psq to matrix elements.\nsource\n\n\n\nlog2\n\n(log2 vector)\n\nApply log2 to matrix elements.\nsource\n\n\n\nlogexpm1\n\n(logexpm1 vector)\n\nApply logexpm1 to matrix elements.\nsource\n\n\n\nlogit\n\n(logit vector)\n\nApply logit to matrix elements.\nsource\n\n\n\nlogmxp1\n\n(logmxp1 vector)\n\nApply logmxp1 to matrix elements.\nsource\n\n\n\nmat\n\n(mat real-matrix-rows)\n(mat a00 a01 a10 a11)\n(mat a00 a01 a02 a10 a11 a12 a20 a21 a22)\n(mat a00 a01 a02 a03 a10 a11 a12 a13 a20 a21 a22 a23 a30 a31 a32 a33)\n\nCreate mat2x2, mat3x3 or mat4x4 or RealMatrix from rows\nsource\n\n\n\nmat-&gt;RealMatrix\n\n(mat-&gt;RealMatrix A)\n\nReturn Apache Commons Math Array2DRowMatrix from a 2x2, 3x3 or 4x4 matrix\nsource\n\n\n\nmat-&gt;array\n\n(mat-&gt;array A)\n\nReturn flat double array of entries (row order)\nsource\n\n\n\nmat-&gt;array2d\n\n(mat-&gt;array2d A)\n\nReturn doubles of doubles\nsource\n\n\n\nmat-&gt;float-array\n\n(mat-&gt;float-array A)\n\nReturn flat float array of entries (row order)\nsource\n\n\n\nmat-&gt;float-array2d\n\n(mat-&gt;float-array2d A)\n\nReturn doubles of doubles\nsource\n\n\n\nmat-&gt;seq\n\n(mat-&gt;seq A)\n\nReturn flat sequence of entries (row order)\nsource\n\n\n\nmat2x2\n\n(mat2x2 v)\n(mat2x2 d1 d2)\n(mat2x2 a00 a01 a10 a11)\n\nCreate 2x2 matrix.\nArity:\n\n1 - fills matrix with given value\n2 - creates diagonal matrix\n4 - creates row ordered matrix\n\nsource\n\n\n\nmat3x3\n\n(mat3x3 v)\n(mat3x3 d1 d2 d3)\n(mat3x3 a00 a01 a02 a10 a11 a12 a20 a21 a22)\n\nCreate 3x3 matrix.\nArity:\n\n1 - fills matrix with given value\n3 - creates diagonal matrix\n9 - creates row ordered matrix\n\nsource\n\n\n\nmat4x4\n\n(mat4x4 v)\n(mat4x4 d1 d2 d3 d4)\n(mat4x4 a00 a01 a02 a03 a10 a11 a12 a13 a20 a21 a22 a23 a30 a31 a32 a33)\n\nCreate 4x4 matrix.\nArity:\n\n1 - fills matrix with given value\n4 - creates diagonal matrix\n16 - creates row ordered matrix\n\nsource\n\n\n\nmulm\n\n(mulm A B)\n(mulm A transposeA? B transposeB?)\n\nMultiply two matrices, C=AxB.\nOptionally you can request transposition of matrices.\nsource\n\n\n\nmulmt\n\n(mulmt A B)\n\nMultiply with transposed matrix, C=AxB^T\nsource\n\n\n\nmuls\n\n(muls A s)\n\nMultply matrix by a scalar, C=sA\nsource\n\n\n\nmulv\n\n(mulv A v)\n\nMultply matrix by vector, x=Av\nsource\n\n\n\nncol\n\n(ncol A)\n\nReturn number of rows\nsource\n\n\n\nnegate\n\n(negate A)\n\nNegate all matrix elements, C=-A\nsource\n\n\n\nnorm\n\n(norm A)\n(norm A norm-type)\n\nCalculate norm of the matrix for given type, default: 1 (maximum absolute column sum).\nAll norm types are: * 1 - maximum absolute column sum * :inf - maximum absolute row sum * 2 - spectral norm, maximum singular value * :max - maximum absolute value * :frobenius - Frobenius norm * [p,q] - generalized L_pq norm, [2,2] - Frobenius norm, [p,p] - entrywise p-norm * [p] - Shatten p-norm, [1] - nuclear/trace norm\nsource\n\n\n\nnormalize\n\n(normalize A)\n(normalize A rows?)\n\nNormalize columns (or rows)\nsource\n\n\n\nnrow\n\n(nrow A)\n\nReturn number of rows\nsource\n\n\n\nouter\n\n(outer v1 v2)\n\nOuter project for two vectors.\nsource\n\n\n\nradians\n\n(radians vector)\n\nApply radians to matrix elements.\nsource\n\n\n\nrint\n\n(rint vector)\n\nApply rint to matrix elements.\nsource\n\n\n\nrotation-matrix-2d\n\n(rotation-matrix-2d theta)\n\nCreate rotation matrix for a plane\nsource\n\n\n\nrotation-matrix-3d\n\n(rotation-matrix-3d [x y z])\n(rotation-matrix-3d x y z)\n\nCreate rotation matrix for a 3d space. Tait–Bryan angles z-y′-x″\nsource\n\n\n\nrotation-matrix-3d-x\n\n(rotation-matrix-3d-x a)\n\nCreate rotation matrix for a 3d space, x-axis, right hand rule.\nsource\n\n\n\nrotation-matrix-3d-y\n\n(rotation-matrix-3d-y a)\n\nCreate rotation matrix for a 3d space, y-axis, right hand rule.\nsource\n\n\n\nrotation-matrix-3d-z\n\n(rotation-matrix-3d-z a)\n\nCreate rotation matrix for a 3d space, z-axis, right hand rule.\nsource\n\n\n\nrotation-matrix-axis-3d\n\n(rotation-matrix-axis-3d angle axis)\n\nCreate 3d rotation matrix for axis ratation.\nsource\n\n\n\nround\n\n(round vector)\n\nApply round to matrix elements.\nsource\n\n\n\nrow\n\n(row A r)\n\nReturn row as a vector\nsource\n\n\n\nrows\n\n(rows A)\n\nReturn matrix rows\nsource\n\n\n\nrows-&gt;RealMatrix\n\n(rows-&gt;RealMatrix rows)\n\nReturn Apache Commons Math Array2DRowMatrix from sequence of rows\nsource\n\n\n\nrows-&gt;mat\n\n(rows-&gt;mat real-matrix-rows)\n(rows-&gt;mat [a00 a01] [a10 a11])\n(rows-&gt;mat [a00 a01 a02] [a10 a11 a12] [a20 a21 a22])\n(rows-&gt;mat [a00 a01 a02 a03] [a10 a11 a12 a13] [a20 a21 a22 a23] [a30 a31 a32 a33])\n\nCreate nxn matrix from nd vectors (rows).\nsource\n\n\n\nrows-&gt;mat2x2\n\n(rows-&gt;mat2x2 [a00 a01] [a10 a11])\n\nCreate 2x2 matrix from 2d vectors (rows).\nsource\n\n\n\nrows-&gt;mat3x3\n\n(rows-&gt;mat3x3 [a00 a01 a02] [a10 a11 a12] [a20 a21 a22])\n\nCreate 3x3 matrix from 3d vectors (rows).\nsource\n\n\n\nrows-&gt;mat4x4\n\n(rows-&gt;mat4x4 [a00 a01 a02 a03] [a10 a11 a12 a13] [a20 a21 a22 a23] [a30 a31 a32 a33])\n\nCreate 4x4 matrix from 4d vectors (rows).\nsource\n\n\n\nsafe-sqrt\n\n(safe-sqrt vector)\n\nApply safe-sqrt to matrix elements.\nsource\n\n\n\nscale-cols\n\n(scale-cols A)\n(scale-cols A scale)\n\nShift columns by a value (default: sqrt(sum(x^2)/(n-1))) or a result of the function\nsource\n\n\n\nscale-rows\n\n(scale-rows A)\n(scale-rows A scale)\n\nShift rows by a value (default: sqrt(sum(x^2)/(n-1))) or a result of the function\nsource\n\n\n\nsec\n\n(sec vector)\n\nApply sec to matrix elements.\nsource\n\n\n\nsech\n\n(sech vector)\n\nApply sech to matrix elements.\nsource\n\n\n\nsfrac\n\n(sfrac vector)\n\nApply sfrac to matrix elements.\nsource\n\n\n\nsgn\n\n(sgn vector)\n\nApply sgn to matrix elements.\nsource\n\n\n\nshift-cols\n\n(shift-cols A)\n(shift-cols A shift)\n\nShift columns by a value or a result of the function (mean by default)\nsource\n\n\n\nshift-rows\n\n(shift-rows A)\n(shift-rows A shift)\n\nShift rows by a value or a result of the function (mean by default)\nsource\n\n\n\nsigmoid\n\n(sigmoid vector)\n\nApply sigmoid to matrix elements.\nsource\n\n\n\nsignum\n\n(signum vector)\n\nApply signum to matrix elements.\nsource\n\n\n\nsin\n\n(sin vector)\n\nApply sin to matrix elements.\nsource\n\n\n\nsinc\n\n(sinc vector)\n\nApply sinc to matrix elements.\nsource\n\n\n\nsingular-values\n\n(singular-values A)\n\nReturun singular values of the matrix as sqrt of eigenvalues of A^T * A matrix.\nsource\n\n\n\nsinh\n\n(sinh vector)\n\nApply sinh to matrix elements.\nsource\n\n\n\nsolve\n\n(solve A b)\n\nSolve linear equation Ax=b\nsource\n\n\n\nsq\n\n(sq vector)\n\nApply sq to matrix elements.\nsource\n\n\n\nsqrt\n\n(sqrt vector)\n\nApply sqrt to matrix elements.\nsource\n\n\n\nsub\n\n(sub A)\n(sub A B)\n\nSubract matrices, C=A-B.\nsource\n\n\n\nsymmetric?\n\n(symmetric? A)\n\nCheck if matrix is symmetric\nsource\n\n\n\ntan\n\n(tan vector)\n\nApply tan to matrix elements.\nsource\n\n\n\ntanh\n\n(tanh vector)\n\nApply tanh to matrix elements.\nsource\n\n\n\ntmulm\n\n(tmulm A B)\n\nTranspose and multiply, C=A^TxB\nsource\n\n\n\ntmulmt\n\n(tmulmt A B)\n\nTranspose both and multiply, C=ATxBT\nsource\n\n\n\ntrace\n\n(trace A)\n\nReturn trace of the matrix (sum of diagonal elements)\nsource\n\n\n\ntranspose\n\n(transpose A)\n\nTranspose matrix, C=A^T\nsource\n\n\n\ntrunc\n\n(trunc vector)\n\nApply trunc to matrix elements.\nsource\n\n\n\nvtmul\n\n(vtmul A v)\n\nMultiply transposed vector by matrix, C=v^T A\nsource\n\n\n\nxlogx\n\n(xlogx vector)\n\nApply xlogx to matrix elements.\nsource\n\n\n\nzero\nsource\n\nsource: clay/vector_matrix.clj",
    "crumbs": [
      "Vectors and matrices"
    ]
  },
  {
    "objectID": "random.html",
    "href": "random.html",
    "title": "Random",
    "section": "",
    "text": "Reference",
    "crumbs": [
      "Random"
    ]
  },
  {
    "objectID": "random.html#reference",
    "href": "random.html#reference",
    "title": "Random",
    "section": "",
    "text": "fastmath.random\nVarious random and noise functions.\nNamespace defines various random number generators (RNGs), different types of random functions, sequence generators and noise functions.\n### RNGs\nYou can use a selection of various RNGs defined in Apache Commons Math library.\nCurrently supported RNGs:\n\n:jdk - default java.util.Random\n:mersenne - MersenneTwister\n:isaac - ISAAC\n:well512a, :well1024a, :well19937a, :well19937c, :well44497a, :well44497b - several WELL variants\n\nTo create your RNG use rng multimethod. Pass RNG name and (optional) seed. Returned RNG is equipped with RNGProto protocol with methods: irandom, lrandom, frandom drandom, grandom, brandom which return random primitive value with given RNG.\n(let [rng (rng :isaac 1337)]\n  (irandom rng))\nFor conveniency default RNG (:jdk) with following functions are created: irand, lrand, frand, drand, grand, brand.\nEach prefix denotes returned type:\n\ni - int\nl - long\nf - float\nd - double\ng - gaussian (double)\nb - boolean\n\nCheck individual function for parameters description.\n### Random Vector Sequences\nCouple of functions to generate sequences of numbers or vectors.\nTo create generator call sequence-generator with generator name and vector size. Following generators are available:\n\n:halton - Halton low-discrepancy sequence; range [0,1]\n:sobol - Sobol low-discrepancy sequence; range [0,1]\n:r2 - R2 low-discrepancy sequence; range [0,1], more…\n:sphere - uniformly random distributed on unit sphere\n:ball - uniformly random distributed from unit ball\n:gaussian - gaussian distributed (mean=0, stddev=1)\n:default - uniformly random; range:[0,1]\n\n:halton, :sobol and :r2 can be also randomly jittered according to this article. Call jittered-sequence-generator.\nAfter creation you get lazy sequence\n### Noise\nList of continuous noise functions (1d, 2d and 3d):\n\n:value - value noise\n:gradient - gradient noise (improved Ken Perlin version)\n:simplex - simplex noise\n\nFirst two (:value and :gradient) can use 4 different interpolation types: :none, :linear, :hermite (cubic) and :quintic.\nAll can be combined in following variants:\n\nNoise - pure noise value, create with single-noise\nFBM - fractal brownian motion, create with fbm-noise\nBillow - billow noise, billow-noise\nRidgedMulti - ridged multi, ridgedmulti-noise\n\nNoise creation requires detailed configuration which is simple map of following keys:\n\n:seed - seed as integer\n:noise-type - type of noise: :value, :gradient (default), :simplex\n:interpolation - type of interpolation (for value and gradient): :none, :linear, :hermite (default) or :quintic\n:octaves - number of octaves for combined noise (like FBM), default: 6\n:lacunarity - scaling factor for combined noise, default: 2.00\n:gain - amplitude scaling factor for combined noise, default: 0.5\n:normalize? - should be normalized to [0,1] range (true, default) or to [-1,1] range (false)\n\nFor usage convenience 3 ready to use functions are prepared. Returning value from [0,1] range:\n\nnoise - Perlin Noise (gradient noise, 6 octaves, quintic interpolation)\nvnoise - Value Noise (as in Processing, 6 octaves, hermite interpolation)\nsimplex - Simplex Noise (6 octaves)\n\nFor random noise generation you can use random-noise-cfg and random-noise-fn. Both can be feed with configuration. Additional configuration:\n\n:generator can be set to one of the noise variants, defaults to :fbm\n:warp-scale - 0.0 - do not warp, &gt;0.0 warp\n:warp-depth - depth for warp (default 1.0, if warp-scale is positive)\n\n#### Discrete Noise\ndiscrete-noise is a 1d or 2d hash function for given integers. Returns double from [0,1] range.\n### Distribution\nVarious real and integer distributions. See DistributionProto and RNGProto for functions.\nTo create distribution call distribution multimethod with name as a keyword and map as parameters.\n\n\n-&gt;seq\n\n(-&gt;seq)\n(-&gt;seq rng)\n(-&gt;seq rng n)\n(-&gt;seq rng n sampling-method)\n\nReturns lazy sequence of random samples (can be limited to optional n values).\nAdditionally one of the sampling methods can be provided, ie: :uniform, :antithetic, :systematic and :stratified.\nsource\n\n\n\nball-random\n\n(ball-random dims)\n(ball-random rng dims)\n\nReturn random vector from a ball\nsource\n\n\n\nbillow-noise\n\n(billow-noise)\n(billow-noise cfg__60237__auto__)\n\nCreate billow-noise function with optional configuration.\nsource\n\n\n\nbrand\nRandom boolean with default RNG.\nReturns true or false with equal probability. You can set p probability for true\nsource\n\n\n\nbrandom\n\n(brandom rng)\n(brandom rng p)\n\nRandom boolean with provided RNG\nsource\n\n\n\nccdf\n\n(ccdf d v)\n\nComplementary cumulative probability.\nsource\n\n\n\ncdf\n\n(cdf d v)\n(cdf d v1 v2)\n\nCumulative probability.\nsource\n\n\n\ncontinuous?\n\n(continuous? d)\n\nDoes distribution support continuous domain?\nsource\n\n\n\ncovariance\n\n(covariance d)\n\nDistribution covariance matrix (for multivariate distributions)\nsource\n\n\n\ndefault-normal\nDefault normal distribution (u=0.0, sigma=1.0).\nsource\n\n\n\ndefault-rng\nDefault RNG - JDK\nsource\n\n\n\ndimensions\n\n(dimensions d)\n\nDistribution dimensionality\nsource\n\n\n\ndiscrete-noise\n\n(discrete-noise X Y)\n(discrete-noise X)\n\nDiscrete noise. Parameters:\n\nX (long)\nY (long, optional)\n\nReturns double value from [0,1] range\nsource\n\n\n\ndistribution\nCreate distribution object.\n\nFirst parameter is distribution as a :key.\nSecond parameter is a map with configuration.\n\nAll distributions accept rng under :rng key (default: default-rng) and some of them accept inverse-cumm-accuracy (default set to 1e-9).\nsource\n\n\n\ndistribution-id\n\n(distribution-id d)\n\nDistribution identifier as keyword.\nsource\n\n\n\ndistribution-parameters\n\n(distribution-parameters d)\n(distribution-parameters d all?)\n\nDistribution highest supported value.\nWhen all? is true, technical parameters are included, ie: :rng and :inverser-cumm-accuracy.\nsource\n\n\n\ndistribution?\n\n(distribution? distr)\n\nChecks if distr is a distribution object.\nsource\n\n\n\ndistributions-list\nList of distributions.\nsource\n\n\n\ndrand\n\n(drand)\n(drand mx)\n(drand mn mx)\n\nRandom double number with default RNG.\nAs default returns random double from [0,1) range. When mx is passed, range is set to [0, mx). When mn is passed, range is set to [mn, mx).\nsource\n\n\n\ndrandom\n\n(drandom rng)\n(drandom rng mx)\n(drandom rng mn mx)\n\nRandom double number with provided RNG\nsource\n\n\n\nfbm-noise\n\n(fbm-noise)\n(fbm-noise cfg__60237__auto__)\n\nCreate fbm-noise function with optional configuration.\nsource\n\n\n\nflip\n\n(flip p)\n(flip)\n\nReturns 1 with given probability, 0 otherwise\nsource\n\n\n\nflip-rng\n\n(flip-rng rng p)\n(flip-rng rng)\n\nReturns 1 with given probability, 0 otherwise, for given rng\nsource\n\n\n\nflipb\n\n(flipb p)\n(flipb)\n\nReturns true with given probability, false otherwise\nsource\n\n\n\nflipb-rng\n\n(flipb-rng rng p)\n(flipb-rng rng)\n\nReturns true with given probability, false otherwise, for given rng\nsource\n\n\n\nfrand\n\n(frand)\n(frand mx)\n(frand mn mx)\n\nRandom double number with default RNG.\nAs default returns random float from [0,1) range. When mx is passed, range is set to [0, mx). When mn is passed, range is set to [mn, mx).\nsource\n\n\n\nfrandom\n\n(frandom rng)\n(frandom rng mx)\n(frandom rng mn mx)\n\nRandom double number with provided RNG\nsource\n\n\n\ngrand\n\n(grand)\n(grand stddev)\n(grand mean stddev)\n\nRandom gaussian double number with default RNG.\nAs default returns random double from N(0,1). When std is passed, N(0,std) is used. When mean is passed, distribution is set to N(mean, std).\nsource\n\n\n\ngrandom\n\n(grandom rng)\n(grandom rng stddev)\n(grandom rng mean stddev)\n\nRandom gaussian double number with provided RNG\nsource\n\n\n\nicdf\n\n(icdf d v)\n\nInverse cumulative probability\nsource\n\n\n\nintegrate-pdf\n\n(integrate-pdf pdf-func mn mx steps)\n(integrate-pdf pdf-func {:keys [mn mx steps interpolator], :or {mn 0.0, mx 1.0, steps 1000, interpolator :linear}, :as options})\n\nIntegrate PDF function, returns CDF and iCDF\nParameters: * pdf-func - univariate function * mn - lower bound for integration, value of pdf-func should be 0.0 at this point * mx - upper bound for integration * steps - how much subintervals to integrate (default 1000) * interpolator - interpolation method between integrated points (default :linear)\nAlso other integration related parameters are accepted (:gauss-kronrod integration is used).\nPossible interpolation methods: :linear (default), :spline, :monotone or any function from fastmath.interpolation\nsource\n\n\n\nirand\n\n(irand)\n(irand mx)\n(irand mn mx)\n\nRandom integer number with default RNG.\nAs default returns random integer from full integer range. When mx is passed, range is set to [0, mx). When mn is passed, range is set to [mn, mx).\nsource\n\n\n\nirandom\n\n(irandom rng)\n(irandom rng mx)\n(irandom rng mn mx)\n\nRandom integer number with provided RNG\nsource\n\n\n\njittered-sequence-generator\n\n(jittered-sequence-generator seq-generator dimensions)\n(jittered-sequence-generator seq-generator dimensions jitter)\n\nCreate jittered sequence generator.\nSuitable for :r2, :sobol and :halton sequences.\njitter parameter range is from 0 (no jitter) to 1 (full jitter). Default: 0.25.\nSee also sequence-generator.\nsource\n\n\n\nlikelihood\n\n(likelihood d vs)\n\nLikelihood of samples\nsource\n\n\n\nlog-likelihood\n\n(log-likelihood d vs)\n\nLog likelihood of samples\nsource\n\n\n\nlower-bound\n\n(lower-bound d)\n\nDistribution lowest supported value\nsource\n\n\n\nlpdf\n\n(lpdf d v)\n\nLog density\nsource\n\n\n\nlrand\n\n(lrand)\n(lrand mx)\n(lrand mn mx)\n\nRandom long number with default RNG.\nAs default returns random long from full integer range. When mx is passed, range is set to [0, mx). When mn is passed, range is set to [mn, mx).\nsource\n\n\n\nlrandom\n\n(lrandom rng)\n(lrandom rng mx)\n(lrandom rng mn mx)\n\nRandom long number with provided RNG\nsource\n\n\n\nmean\n\n(mean d)\n\nDistribution mean\nsource\n\n\n\nmeans\n\n(means d)\n\nDistribution means (for multivariate distributions)\nsource\n\n\n\nnoise\n\n(noise x)\n(noise x y)\n(noise x y z)\n\nImproved Perlin Noise.\n6 octaves, quintic interpolation.\nsource\n\n\n\nnoise-generators\nList of possible noise generators as a map of names and functions.\nsource\n\n\n\nnoise-interpolations\nList of possible noise interpolations as a map of names and values.\nsource\n\n\n\nnoise-types\nList of possible noise types as a map of names and values.\nsource\n\n\n\nobserve MACRO\n\n(observe d vs)\n\nLog likelihood of samples. Alias for log-likelihood.\nsource\n\n\n\nobserve1\n\n(observe1 d v)\n\nLog of probability/density of the value. Alias for lpdf.\nsource\n\n\n\npdf\n\n(pdf d v)\n\nDensity\nsource\n\n\n\nprobability\n\n(probability d v)\n\nProbability (PMF)\nsource\n\n\n\nrandom-noise-cfg\n\n(random-noise-cfg pre-config)\n(random-noise-cfg)\n\nCreate random noise configuration.\nOptional map with fixed values.\nsource\n\n\n\nrandom-noise-fn\n\n(random-noise-fn cfg)\n(random-noise-fn)\n\nCreate random noise function from all possible options.\nOptionally provide own configuration cfg. In this case one of 4 different blending methods will be selected.\nsource\n\n\n\nrandval MACRO\n\n(randval v1 v2)\n(randval prob v1 v2)\n(randval prob)\n(randval)\n\nReturn value with given probability (default 0.5)\nsource\n\n\n\nrandval-rng MACRO\n\n(randval-rng rng v1 v2)\n(randval-rng rng prob v1 v2)\n(randval-rng rng prob)\n(randval-rng rng)\n\nReturn value with given probability (default 0.5), for given rng\nsource\n\n\n\nridgedmulti-noise\n\n(ridgedmulti-noise)\n(ridgedmulti-noise cfg__60237__auto__)\n\nCreate ridgedmulti-noise function with optional configuration.\nsource\n\n\n\nrng\nCreate RNG for given name (as keyword) and optional seed. Return object enhanced with RNGProto. See: rngs-list for names.\nsource\n\n\n\nrngs-list\nList of all possible RNGs.\nsource\n\n\n\nroll-a-dice\n\n(roll-a-dice sides)\n(roll-a-dice dices sides)\n\nRoll a dice with given sides\nsource\n\n\n\nroll-a-dice-rng\n\n(roll-a-dice-rng rng sides)\n(roll-a-dice-rng rng dices sides)\n\nRoll a dice with given sides and given rng\nsource\n\n\n\nsample\n\n(sample d)\n\nRandom sample\nsource\n\n\n\nsequence-generator\nCreate Sequence generator. See sequence-generators-list for names.\nValues:\n\n:r2, :halton, :sobol, :default/:uniform - range [0-1] for each dimension\n:gaussian - from N(0,1) distribution\n:sphere - from surface of unit sphere (ie. euclidean distance from origin equals 1.0)\n:ball - from an unit ball\n\nPossible dimensions:\n\n:r2 - 1-15\n:halton - 1-40\n:sobol - 1-1000\nthe rest - 1+\n\nSee also jittered-sequence-generator.\nsource\n\n\n\nsequence-generators-list\nList of random sequence generator. See sequence-generator.\nsource\n\n\n\nset-seed\n\n(set-seed)\n(set-seed v)\n(set-seed rng v)\n\nCreate and return new RNG\nsource\n\n\n\nset-seed!\n\n(set-seed!)\n(set-seed! v)\n(set-seed! rng v)\n\nSets seed.\nsource\n\n\n\nsimplex\n\n(simplex x)\n(simplex x y)\n(simplex x y z)\n\nSimplex noise. 6 octaves.\nsource\n\n\n\nsingle-noise\n\n(single-noise)\n(single-noise cfg__60237__auto__)\n\nCreate single-noise function with optional configuration.\nsource\n\n\n\nsource-object\n\n(source-object d)\n\nReturns Java or proxy object from backend library (if available)\nsource\n\n\n\nsynced-rng\n\n(synced-rng m)\n(synced-rng m seed)\n\nCreate synchronized RNG for given name and optional seed. Wraps rng method.\nsource\n\n\n\nupper-bound\n\n(upper-bound d)\n\nDistribution highest supported value\nsource\n\n\n\nvariance\n\n(variance d)\n\nDistribution variance\nsource\n\n\n\nvnoise\n\n(vnoise x)\n(vnoise x y)\n(vnoise x y z)\n\nValue Noise.\n6 octaves, Hermite interpolation (cubic, h01).\nsource\n\n\n\nwarp-noise-fn\n\n(warp-noise-fn noise scale depth)\n(warp-noise-fn noise scale)\n(warp-noise-fn noise)\n(warp-noise-fn)\n\nCreate warp noise (see Inigo Quilez article).\nParameters:\n\nnoise function, default: vnoise\nscale factor, default: 4.0\ndepth (1 or 2), default 1\n\nNormalization of warp noise depends on normalization of noise function.\nsource\n\nsource: clay/random.clj",
    "crumbs": [
      "Random"
    ]
  },
  {
    "objectID": "stats.html",
    "href": "stats.html",
    "title": "Statistics",
    "section": "",
    "text": "Reference",
    "crumbs": [
      "Statistics"
    ]
  },
  {
    "objectID": "stats.html#reference",
    "href": "stats.html#reference",
    "title": "Statistics",
    "section": "",
    "text": "fastmath.stats\n\nStatistics functions.\n\nDescriptive statistics.\nCorrelation / covariance\nOutliers\nConfidence intervals\nExtents\nEffect size\nTests\nHistogram\nACF/PACF\nBootstrap (see fastmath.stats.bootstrap)\nBinary measures\n\nFunctions are backed by Apache Commons Math or SMILE libraries. All work with Clojure sequences.\n##### Descriptive statistics\nAll in one function stats-map contains:\n\n:Size - size of the samples, (count ...)\n:Min - minimum value\n:Max - maximum value\n:Range - range of values\n:Mean - mean/average\n:Median - median, see also: median-3\n:Mode - mode, see also: modes\n:Q1 - first quartile, use: percentile, quartile\n:Q3 - third quartile, use: percentile, quartile\n:Total - sum of all samples\n:SD - sample standard deviation\n:Variance - variance\n:MAD - median-absolute-deviation\n:SEM - standard error of mean\n:LAV - lower adjacent value, use: adjacent-values\n:UAV - upper adjacent value, use: adjacent-values\n:IQR - interquartile range, (- q3 q1)\n:LOF - lower outer fence, (- q1 (* 3.0 iqr))\n:UOF - upper outer fence, (+ q3 (* 3.0 iqr))\n:LIF - lower inner fence, (- q1 (* 1.5 iqr))\n:UIF - upper inner fence, (+ q3 (* 1.5 iqr))\n:Outliers - list of outliers, samples which are outside outer fences\n:Kurtosis - kurtosis\n:Skewness - skewness\n\nNote: percentile and quartile can have 10 different interpolation strategies. See docs\n\n\n\n-&gt;confusion-matrix\n\n(-&gt;confusion-matrix tp fn fp tn)\n(-&gt;confusion-matrix confusion-matrix)\n(-&gt;confusion-matrix actual prediction)\n(-&gt;confusion-matrix actual prediction encode-true)\n\nConvert input to confusion matrix\nsource\n\n\n\nL0\nCount equal values in both seqs. Same as count==\nsource\n\n\n\nL1\n\n(L1 [vs1 vs2-or-val])\n(L1 vs1 vs2-or-val)\n\nManhattan distance\nsource\n\n\n\nL2\n\n(L2 [vs1 vs2-or-val])\n(L2 vs1 vs2-or-val)\n\nEuclidean distance\nsource\n\n\n\nL2sq\n\n(L2sq [vs1 vs2-or-val])\n(L2sq vs1 vs2-or-val)\n\nSquared euclidean distance\nsource\n\n\n\nLInf\n\n(LInf [vs1 vs2-or-val])\n(LInf vs1 vs2-or-val)\n\nChebyshev distance\nsource\n\n\n\nacf\n\n(acf data)\n(acf data lags)\n\nCalculate acf (autocorrelation function) for given number of lags or a list of lags.\nIf lags is omitted function returns maximum possible number of lags.\nSee also acf-ci, pacf, pacf-ci\nsource\n\n\n\nacf-ci\n\n(acf-ci data)\n(acf-ci data lags)\n(acf-ci data lags alpha)\n\nacf with added confidence interval data.\n:cis contains list of calculated ci for every lag.\nsource\n\n\n\nad-test-one-sample\n\n(ad-test-one-sample xs)\n(ad-test-one-sample xs distribution-or-ys)\n(ad-test-one-sample xs distribution-or-ys {:keys [sides kernel bandwidth], :or {sides :one-sided-greater, kernel :gaussian}})\n\nAnderson-Darling test\nsource\n\n\n\nadjacent-values\n\n(adjacent-values vs)\n(adjacent-values vs estimation-strategy)\n(adjacent-values vs q1 q3 m)\n\nLower and upper adjacent values (LAV and UAV).\nLet Q1 is 25-percentile and Q3 is 75-percentile. IQR is (- Q3 Q1).\n\nLAV is smallest value which is greater or equal to the LIF = (- Q1 (* 1.5 IQR)).\nUAV is largest value which is lower or equal to the UIF = (+ Q3 (* 1.5 IQR)).\nthird value is a median of samples\n\nOptional estimation-strategy argument can be set to change quantile calculations estimation type. See estimation-strategies.\nsource\n\n\n\nameasure\n\n(ameasure [group1 group2])\n(ameasure group1 group2)\n\nVargha-Delaney A measure for two populations a and b\nsource\n\n\n\nbinary-measures\n\n(binary-measures tp fn fp tn)\n(binary-measures confusion-matrix)\n(binary-measures actual prediction)\n(binary-measures actual prediction true-value)\n\nSubset of binary measures. See binary-measures-all.\nFollowing keys are returned: [:tp :tn :fp :fn :accuracy :fdr :f-measure :fall-out :precision :recall :sensitivity :specificity :prevalence]\nsource\n\n\n\nbinary-measures-all\n\n(binary-measures-all tp fn fp tn)\n(binary-measures-all confusion-matrix)\n(binary-measures-all actual prediction)\n(binary-measures-all actual prediction true-value)\n\nCollection of binary measures.\nArguments: * confusion-matrix - either map or sequence with [:tp :fn :fp :tn] values\nor\n\nactual - list of ground truth values\nprediction - list of predicted values\ntrue-value - optional, true/false encoding, what is true in truth and prediction\n\ntrue-value can be one of:\n\nnil - values are treating as booleans\nany sequence - values from sequence will be treated as true\nmap - conversion will be done according to provided map (if there is no correspondin key, value is treated as false)\nany predicate\n\nhttps://en.wikipedia.org/wiki/Precision_and_recall\nsource\n\n\n\nbinomial-ci\n\n(binomial-ci number-of-successes number-of-trials)\n(binomial-ci number-of-successes number-of-trials method)\n(binomial-ci number-of-successes number-of-trials method alpha)\n\nReturn confidence interval for a binomial distribution.\nPossible methods are: * :asymptotic (normal aproximation, based on central limit theorem), default * :agresti-coull * :clopper-pearson * :wilson * :prop.test - one sample proportion test * :cloglog * :logit * :probit * :arcsine * :all - apply all methods and return a map of triplets\nDefault alpha is 0.05\nReturns a triple [lower ci, upper ci, p=successes/trials]\nsource\n\n\n\nbinomial-ci-methods\nsource\n\n\n\nbinomial-test\n\n(binomial-test xs)\n(binomial-test xs maybe-params)\n(binomial-test number-of-successes number-of-trials {:keys [alpha p ci-method sides], :or {alpha 0.05, p 0.5, ci-method :asymptotic, sides :two-sided}})\n\nBinomial test\n\nalpha - significance level (default: 0.05)\nsides - one of: :two-sided (default), :one-sided-less (short: :one-sided) or :one-sided-greater\nci-method - see binomial-ci-methods\np - tested probability\n\nsource\n\n\n\nbootstrap DEPRECATED\nDeprecated: Please use fastmath.stats.bootstrap/bootstrap instead\n\n(bootstrap vs)\n(bootstrap vs samples)\n(bootstrap vs samples size)\n\nGenerate set of samples of given size from provided data.\nDefault samples is 200, number of size defaults to sample size.\nsource\n\n\n\nbootstrap-ci DEPRECATED\nDeprecated: Please use fastmath.stats.boostrap/ci-basic instead\n\n(bootstrap-ci vs)\n(bootstrap-ci vs alpha)\n(bootstrap-ci vs alpha samples)\n(bootstrap-ci vs alpha samples stat-fn)\n\nBootstrap method to calculate confidence interval.\nAlpha defaults to 0.98, samples to 1000. Last parameter is statistical function used to measure, default: mean.\nReturns ci and statistical function value.\nsource\n\n\n\nbrown-forsythe-test\n\n(brown-forsythe-test xss)\n(brown-forsythe-test xss params)\n\nsource\n\n\n\nchisq-test\n\n(chisq-test contingency-table-or-xs)\n(chisq-test contingency-table-or-xs params)\n\nChi square test, a power divergence test for lambda 1.0\nPower divergence test.\nFirst argument should be one of:\n\ncontingency table\nsequence of counts (for goodness of fit)\nsequence of data (for goodness of fit against distribution)\n\nFor goodness of fit there are two options:\n\ncomparison of observed counts vs expected probabilities or weights (:p)\ncomparison of data against given distribution (:p), in this case histogram from data is created and compared to distribution PDF in bins ranges. Use :bins option to control histogram creation.\n\nOptions are:\n\n:lambda - test type:\n\n1.0 - chisq-test\n0.0 - multinomial-likelihood-ratio-test\n-1.0 - minimum-discrimination-information-test\n-2.0 - neyman-modified-chisq-test\n-0.5 - freeman-tukey-test\n2/3 - cressie-read-test - default\n\n:p - probabilites, weights or distribution object.\n:alpha - significance level (default: 0.05)\n:ci-sides - confidence interval sides (default: :two-sided)\n:sides - p-value sides (:two-sided, :one-side-greater - default, :one-side-less)\n:bootstrap-samples - number of samples to estimate confidence intervals (default: 1000)\n:ddof - delta degrees of freedom, adjustment for dof (default: 0.0)\n:bins - number of bins or estimator name for histogram\n\nsource\n\n\n\nci\n\n(ci vs)\n(ci vs alpha)\n\nT-student based confidence interval for given data. Alpha value defaults to 0.05.\nLast value is mean.\nsource\n\n\n\ncliffs-delta\n\n(cliffs-delta [group1 group2])\n(cliffs-delta group1 group2)\n\nCliff’s delta effect size for ordinal data.\nsource\n\n\n\ncoefficient-matrix\n\n(coefficient-matrix vss)\n(coefficient-matrix vss measure-fn)\n(coefficient-matrix vss measure-fn symmetric?)\n\nGenerate coefficient (correlation, covariance, any two arg function) matrix from seq of seqs. Row order.\nDefault method: pearson-correlation\nsource\n\n\n\ncohens-d\n\n(cohens-d [group1 group2])\n(cohens-d group1 group2)\n(cohens-d group1 group2 method)\n\nCohen’s d effect size for two groups\nsource\n\n\n\ncohens-d-corrected\n\n(cohens-d-corrected [group1 group2])\n(cohens-d-corrected group1 group2)\n(cohens-d-corrected group1 group2 method)\n\nCohen’s d corrected for small group size\nsource\n\n\n\ncohens-f\n\n(cohens-f [group1 group2])\n(cohens-f group1 group2)\n(cohens-f group1 group2 type)\n\nCohens f, sqrt of Cohens f2.\nPossible type values are: :eta (default), :omega and :epsilon.\nsource\n\n\n\ncohens-f2\n\n(cohens-f2 [group1 group2])\n(cohens-f2 group1 group2)\n(cohens-f2 group1 group2 type)\n\nCohens f2, by default based on eta-sq.\nPossible type values are: :eta (default), :omega and :epsilon.\nsource\n\n\n\ncohens-kappa\n\n(cohens-kappa group1 group2)\n(cohens-kappa contingency-table)\n\nCohens kappa\nsource\n\n\n\ncohens-q\n\n(cohens-q r1 r2)\n(cohens-q group1 group2a group2b)\n(cohens-q group1a group2a group1b group2b)\n\nComparison of two correlations.\nArity:\n\n2 - compare two correlation values\n3 - compare correlation of group1 and group2a with correlation of group1 and group2b\n4 - compare correlation of first two arguments with correlation of last two arguments\n\nsource\n\n\n\ncohens-u2\n\n(cohens-u2 [group1 group2])\n(cohens-u2 group1 group2)\n(cohens-u2 group1 group2 estimation-strategy)\n\nCohen’s U2, the proportion of one of the groups that exceeds the same proportion in the other group.\nsource\n\n\n\ncohens-u3\n\n(cohens-u3 [group1 group2])\n(cohens-u3 group1 group2)\n(cohens-u3 group1 group2 estimation-strategy)\n\nCohen’s U3, the proportion of the second group that is smaller than the median of the first group.\nsource\n\n\n\ncohens-w\n\n(cohens-w group1 group2)\n(cohens-w contingency-table)\n\nCohen’s W effect size for discrete data.\nsource\n\n\n\ncontingency-2x2-measures\n\n(contingency-2x2-measures & args)\n\nsource\n\n\n\ncontingency-2x2-measures-all\n\n(contingency-2x2-measures-all a b c d)\n(contingency-2x2-measures-all map-or-seq)\n(contingency-2x2-measures-all [a b] [c d])\n\nsource\n\n\n\ncontingency-table\n\n(contingency-table & seqs)\n\nReturns frequencies map of tuples built from seqs.\nsource\n\n\n\ncontingency-table-&gt;marginals\n\n(contingency-table-&gt;marginals ct)\n\nsource\n\n\n\ncorrelation\n\n(correlation [vs1 vs2])\n(correlation vs1 vs2)\n\nCorrelation of two sequences.\nsource\n\n\n\ncorrelation-matrix\n\n(correlation-matrix vss)\n(correlation-matrix vss measure)\n\nGenerate correlation matrix from seq of seqs. Row order.\nPossible measures: :pearson (default), :kendall, :spearman.\nsource\n\n\n\ncount=\n\n(count= [vs1 vs2-or-val])\n(count= vs1 vs2-or-val)\n\nCount equal values in both seqs. Same as L0\nsource\n\n\n\ncovariance\n\n(covariance [vs1 vs2])\n(covariance vs1 vs2)\n\nCovariance of two sequences.\nsource\n\n\n\ncovariance-matrix\n\n(covariance-matrix vss)\n\nGenerate covariance matrix from seq of seqs. Row order.\nsource\n\n\n\ncramers-c\n\n(cramers-c group1 group2)\n(cramers-c contingency-table)\n\nCramer’s C effect size for discrete data.\nsource\n\n\n\ncramers-v\n\n(cramers-v group1 group2)\n(cramers-v contingency-table)\n\nCramer’s V effect size for discrete data.\nsource\n\n\n\ncramers-v-corrected\n\n(cramers-v-corrected group1 group2)\n(cramers-v-corrected contingency-table)\n\nCorrected Cramer’s V\nsource\n\n\n\ncressie-read-test\n\n(cressie-read-test contingency-table-or-xs)\n(cressie-read-test contingency-table-or-xs params)\n\nCressie-Read test, a power divergence test for lambda 2/3\nPower divergence test.\nFirst argument should be one of:\n\ncontingency table\nsequence of counts (for goodness of fit)\nsequence of data (for goodness of fit against distribution)\n\nFor goodness of fit there are two options:\n\ncomparison of observed counts vs expected probabilities or weights (:p)\ncomparison of data against given distribution (:p), in this case histogram from data is created and compared to distribution PDF in bins ranges. Use :bins option to control histogram creation.\n\nOptions are:\n\n:lambda - test type:\n\n1.0 - chisq-test\n0.0 - multinomial-likelihood-ratio-test\n-1.0 - minimum-discrimination-information-test\n-2.0 - neyman-modified-chisq-test\n-0.5 - freeman-tukey-test\n2/3 - cressie-read-test - default\n\n:p - probabilites, weights or distribution object.\n:alpha - significance level (default: 0.05)\n:ci-sides - confidence interval sides (default: :two-sided)\n:sides - p-value sides (:two-sided, :one-side-greater - default, :one-side-less)\n:bootstrap-samples - number of samples to estimate confidence intervals (default: 1000)\n:ddof - delta degrees of freedom, adjustment for dof (default: 0.0)\n:bins - number of bins or estimator name for histogram\n\nsource\n\n\n\ndemean\n\n(demean vs)\n\nSubtract mean from sequence\nsource\n\n\n\ndissimilarity\n\n(dissimilarity method P-observed Q-expected)\n(dissimilarity method P-observed Q-expected {:keys [bins probabilities? epsilon log-base power remove-zeros?], :or {probabilities? true, epsilon 1.0E-6, log-base m/E, power 2.0}})\n\nVarious PDF distance between two histograms (frequencies) or probabilities.\nQ can be a distribution object. Then, histogram will be created out of P.\nArguments:\n\nmethod - distance method\nP-observed - frequencies, probabilities or actual data (when Q is a distribution of :bins is set)\nQ-expected - frequencies, probabilities or distribution object (when P is a data or :bins is set)\n\nOptions:\n\n:probabilities? - should P/Q be converted to a probabilities, default: true.\n:epsilon - small number which replaces 0.0 when division or logarithm is used`\n:log-base - base for logarithms, default: e\n:power - exponent for :minkowski distance, default: 2.0\n:bins - number of bins or bins estimation method, see histogram.\n\nThe list of methods: :euclidean, :city-block, :manhattan, :chebyshev, :minkowski, :sorensen, :gower, :soergel, :kulczynski, :canberra, :lorentzian, :non-intersection, :wave-hedges, :czekanowski, :motyka, :tanimoto, :jaccard, :dice, :bhattacharyya, :hellinger, :matusita, :squared-chord, :euclidean-sq, :squared-euclidean, :pearson-chisq, :chisq, :neyman-chisq, :squared-chisq, :symmetric-chisq, :divergence, :clark, :additive-symmetric-chisq, :kullback-leibler, :jeffreys, :k-divergence, :topsoe, :jensen-shannon, :jensen-difference, :taneja, :kumar-johnson, :avg\nSee more: Comprehensive Survey on Distance/Similarity Measures between Probability Density Functions by Sung-Hyuk Cha\nsource\n\n\n\ndurbin-watson\n\n(durbin-watson rs)\n\nLag-1 Autocorrelation test for residuals\nsource\n\n\n\nepsilon-sq\n\n(epsilon-sq [group1 group2])\n(epsilon-sq group1 group2)\n\nLess biased R2\nsource\n\n\n\nestimate-bins\n\n(estimate-bins vs)\n(estimate-bins vs bins-or-estimate-method)\n\nEstimate number of bins for histogram.\nPossible methods are: :sqrt :sturges :rice :doane :scott :freedman-diaconis (default).\nThe number returned is not higher than number of samples.\nsource\n\n\n\nestimation-strategies-list\nList of estimation strategies for percentile/quantile functions.\nsource\n\n\n\neta-sq\n\n(eta-sq [group1 group2])\n(eta-sq group1 group2)\n\nR2, coefficient of determination\nsource\n\n\n\nextent\n\n(extent vs)\n\nReturn extent (min, max, mean) values from sequence\nsource\n\n\n\nf-test\n\n(f-test xs ys)\n(f-test xs ys {:keys [sides alpha], :or {sides :two-sided, alpha 0.05}})\n\nVariance F-test of two samples.\n\nalpha - significance level (default: 0.05)\nsides - one of: :two-sided (default), :one-sided-less (short: :one-sided) or :one-sided-greater\n\nsource\n\n\n\nfligner-killeen-test\n\n(fligner-killeen-test xss)\n(fligner-killeen-test xss {:keys [sides], :or {sides :one-sided-greater}})\n\nsource\n\n\n\nfreeman-tukey-test\n\n(freeman-tukey-test contingency-table-or-xs)\n(freeman-tukey-test contingency-table-or-xs params)\n\nFreeman-Tukey test, a power divergence test for lambda -0.5\nPower divergence test.\nFirst argument should be one of:\n\ncontingency table\nsequence of counts (for goodness of fit)\nsequence of data (for goodness of fit against distribution)\n\nFor goodness of fit there are two options:\n\ncomparison of observed counts vs expected probabilities or weights (:p)\ncomparison of data against given distribution (:p), in this case histogram from data is created and compared to distribution PDF in bins ranges. Use :bins option to control histogram creation.\n\nOptions are:\n\n:lambda - test type:\n\n1.0 - chisq-test\n0.0 - multinomial-likelihood-ratio-test\n-1.0 - minimum-discrimination-information-test\n-2.0 - neyman-modified-chisq-test\n-0.5 - freeman-tukey-test\n2/3 - cressie-read-test - default\n\n:p - probabilites, weights or distribution object.\n:alpha - significance level (default: 0.05)\n:ci-sides - confidence interval sides (default: :two-sided)\n:sides - p-value sides (:two-sided, :one-side-greater - default, :one-side-less)\n:bootstrap-samples - number of samples to estimate confidence intervals (default: 1000)\n:ddof - delta degrees of freedom, adjustment for dof (default: 0.0)\n:bins - number of bins or estimator name for histogram\n\nsource\n\n\n\ngeomean\n\n(geomean vs)\n(geomean vs weights)\n\nGeometric mean for positive values only with optional weights\nsource\n\n\n\nglass-delta\n\n(glass-delta [group1 group2])\n(glass-delta group1 group2)\n\nGlass’s delta effect size for two groups\nsource\n\n\n\nharmean\n\n(harmean vs)\n(harmean vs weights)\n\nHarmonic mean with optional weights\nsource\n\n\n\nhedges-g\n\n(hedges-g [group1 group2])\n(hedges-g group1 group2)\n\nHedges’s g effect size for two groups\nsource\n\n\n\nhedges-g*\n\n(hedges-g* [group1 group2])\n(hedges-g* group1 group2)\n\nLess biased Hedges’s g effect size for two groups, J term correction.\nsource\n\n\n\nhedges-g-corrected\n\n(hedges-g-corrected [group1 group2])\n(hedges-g-corrected group1 group2)\n\nCohen’s d corrected for small group size\nsource\n\n\n\nhistogram\n\n(histogram vs)\n(histogram vs bins-or-estimate-method)\n(histogram vs bins-or-estimate-method [mn mx])\n(histogram vs bins-or-estimate-method mn mx)\n\nCalculate histogram.\nEstimation method can be a number, named method: :sqrt :sturges :rice :doane :scott :freedman-diaconis (default) or a sequence of points used as intervals. In the latter case or when mn and mx values are provided - data will be filtered to fit in desired interval(s).\nReturns map with keys:\n\n:size - number of bins\n:step - average distance between bins\n:bins - seq of pairs of range lower value and number of elements\n:min - min value\n:max - max value\n:samples - number of used samples\n:frequencies - a map containing counts for bin’s average\n:intervals - intervals used to create bins\n:bins-maps - seq of maps containing:\n\n:min - lower bound\n:max - upper bound\n:step - actual distance between bins\n:count - number of elements\n:avg - average value\n:probability - probability for bin\n\n\nIf difference between min and max values is 0, number of bins is set to 1.\nsource\n\n\n\nhpdi-extent\n\n(hpdi-extent vs)\n(hpdi-extent vs size)\n\nHigher Posterior Density interval + median.\nsize parameter is the target probability content of the interval.\nsource\n\n\n\ninner-fence-extent\n\n(inner-fence-extent vs)\n(inner-fence-extent vs estimation-strategy)\n\nReturns LIF, UIF and median\nsource\n\n\n\niqr\n\n(iqr vs)\n(iqr vs estimation-strategy)\n\nInterquartile range.\nsource\n\n\n\njarque-bera-test\n\n(jarque-bera-test xs)\n(jarque-bera-test xs params)\n(jarque-bera-test xs skew kurt {:keys [sides], :or {sides :one-sided-greater}})\n\nGoodness of fit test whether skewness and kurtosis of data match normal distribution\nsource\n\n\n\njensen-shannon-divergence DEPRECATED\nDeprecated: Use dissimilarity.\n\n(jensen-shannon-divergence [vs1 vs2])\n(jensen-shannon-divergence vs1 vs2)\n\nJensen-Shannon divergence of two sequences.\nsource\n\n\n\nkendall-correlation\n\n(kendall-correlation [vs1 vs2])\n(kendall-correlation vs1 vs2)\n\nKendall’s correlation of two sequences.\nsource\n\n\n\nkruskal-test\n\n(kruskal-test xss)\n(kruskal-test xss {:keys [sides], :or {sides :right}})\n\nKruskal-Wallis rank sum test.\nsource\n\n\n\nks-test-one-sample\n\n(ks-test-one-sample xs)\n(ks-test-one-sample xs distribution-or-ys)\n(ks-test-one-sample xs distribution-or-ys {:keys [sides kernel bandwidth distinct?], :or {sides :two-sided, kernel :gaussian, distinct? true}})\n\nOne sample Kolmogorov-Smirnov test\nsource\n\n\n\nks-test-two-samples\n\n(ks-test-two-samples xs ys)\n(ks-test-two-samples xs ys {:keys [sides distinct?], :or {sides :two-sided, distinct? true}})\n\nTwo samples Kolmogorov-Smirnov test\nsource\n\n\n\nkullback-leibler-divergence DEPRECATED\nDeprecated: Use dissimilarity.\n\n(kullback-leibler-divergence [vs1 vs2])\n(kullback-leibler-divergence vs1 vs2)\n\nKullback-Leibler divergence of two sequences.\nsource\n\n\n\nkurtosis\n\n(kurtosis vs)\n(kurtosis vs typ)\n\nCalculate kurtosis from sequence.\nPossible typs: :G2 (default), :g2 (or :excess), :geary, ,:crow, :moors, :hogg or :kurt.\nsource\n\n\n\nkurtosis-test\n\n(kurtosis-test xs)\n(kurtosis-test xs params)\n(kurtosis-test xs kurt {:keys [sides type], :or {sides :two-sided, type :kurt}})\n\nNormality test for kurtosis\nsource\n\n\n\nlevene-test\n\n(levene-test xss)\n(levene-test xss {:keys [sides statistic scorediff], :or {sides :one-sided-greater, statistic mean, scorediff abs}})\n\nsource\n\n\n\nmad\nAlias for median-absolute-deviation\nsource\n\n\n\nmad-extent\n\n(mad-extent vs)\n\n-/+ median-absolute-deviation and median\nsource\n\n\n\nmae\n\n(mae [vs1 vs2-or-val])\n(mae vs1 vs2-or-val)\n\nMean absolute error\nsource\n\n\n\nmape\n\n(mape [vs1 vs2-or-val])\n(mape vs1 vs2-or-val)\n\nMean absolute percentage error\nsource\n\n\n\nmaximum\n\n(maximum vs)\n\nMaximum value from sequence.\nsource\n\n\n\nmcc\n\n(mcc group1 group2)\n(mcc ct)\n\nMatthews correlation coefficient also known as phi coefficient.\nsource\n\n\n\nme\n\n(me [vs1 vs2-or-val])\n(me vs1 vs2-or-val)\n\nMean error\nsource\n\n\n\nmean\n\n(mean vs)\n(mean vs weights)\n\nCalculate mean of vs with optional weights.\nsource\n\n\n\nmean-absolute-deviation\n\n(mean-absolute-deviation vs)\n(mean-absolute-deviation vs center)\n\nCalculate mean absolute deviation\nsource\n\n\n\nmeans-ratio\n\n(means-ratio [group1 group2])\n(means-ratio group1 group2)\n(means-ratio group1 group2 adjusted?)\n\nMeans ratio\nsource\n\n\n\nmeans-ratio-corrected\n\n(means-ratio-corrected [group1 group2])\n(means-ratio-corrected group1 group2)\n\nBias correced means ratio\nsource\n\n\n\nmedian\n\n(median vs estimation-strategy)\n(median vs)\n\nCalculate median of vs. See median-3.\nsource\n\n\n\nmedian-3\n\n(median-3 a b c)\n\nMedian of three values. See median.\nsource\n\n\n\nmedian-absolute-deviation\n\n(median-absolute-deviation vs)\n(median-absolute-deviation vs center)\n(median-absolute-deviation vs center estimation-strategy)\n\nCalculate MAD\nsource\n\n\n\nminimum\n\n(minimum vs)\n\nMinimum value from sequence.\nsource\n\n\n\nminimum-discrimination-information-test\n\n(minimum-discrimination-information-test contingency-table-or-xs)\n(minimum-discrimination-information-test contingency-table-or-xs params)\n\nMinimum discrimination information test, a power divergence test for lambda -1.0\nPower divergence test.\nFirst argument should be one of:\n\ncontingency table\nsequence of counts (for goodness of fit)\nsequence of data (for goodness of fit against distribution)\n\nFor goodness of fit there are two options:\n\ncomparison of observed counts vs expected probabilities or weights (:p)\ncomparison of data against given distribution (:p), in this case histogram from data is created and compared to distribution PDF in bins ranges. Use :bins option to control histogram creation.\n\nOptions are:\n\n:lambda - test type:\n\n1.0 - chisq-test\n0.0 - multinomial-likelihood-ratio-test\n-1.0 - minimum-discrimination-information-test\n-2.0 - neyman-modified-chisq-test\n-0.5 - freeman-tukey-test\n2/3 - cressie-read-test - default\n\n:p - probabilites, weights or distribution object.\n:alpha - significance level (default: 0.05)\n:ci-sides - confidence interval sides (default: :two-sided)\n:sides - p-value sides (:two-sided, :one-side-greater - default, :one-side-less)\n:bootstrap-samples - number of samples to estimate confidence intervals (default: 1000)\n:ddof - delta degrees of freedom, adjustment for dof (default: 0.0)\n:bins - number of bins or estimator name for histogram\n\nsource\n\n\n\nmode\n\n(mode vs method)\n(mode vs method opts)\n(mode vs)\n\nFind the value that appears most often in a dataset vs.\nFor sample from continuous distribution, three algorithms are possible: * :histogram - calculated from histogram * :kde - calculated from KDE * :pearson - mode = mean-3(median-mean) * :default - discrete mode\nHistogram accepts optional :bins (see histogram). KDE method accepts :kde for kernel name (default :gaussian) and :bandwidth (auto). Pearson can accept :estimation-strategy for median.\nSee also modes.\nsource\n\n\n\nmodes\n\n(modes vs method)\n(modes vs method opts)\n(modes vs)\n\nFind the values that appears most often in a dataset vs.\nReturns sequence with all most appearing values in increasing order.\nSee also mode.\nsource\n\n\n\nmodified-power-transformation\n\n(modified-power-transformation xs)\n(modified-power-transformation xs lambda)\n(modified-power-transformation xs lambda alpha)\n\nModified power transformation (Box-Cox transformation) of data.\nThere is no scaling by geometric mean.\nArguments: * lambda - power parameter (default: 0.0) * alpha - shift parameter (optional)\nsource\n\n\n\nmoment\n\n(moment vs)\n(moment vs order)\n(moment vs order {:keys [absolute? center mean? normalize?], :or {mean? true}})\n\nCalculate moment (central or/and absolute) of given order (default: 2).\nAdditional parameters as a map:\n\n:absolute? - calculate sum as absolute values (default: false)\n:mean? - returns mean (proper moment) or just sum of differences (default: true)\n:center - value of center (default: nil = mean)\n:normalize? - apply normalization by standard deviation to the order power\n\nsource\n\n\n\nmse\n\n(mse [vs1 vs2-or-val])\n(mse vs1 vs2-or-val)\n\nMean squared error\nsource\n\n\n\nmultinomial-likelihood-ratio-test\n\n(multinomial-likelihood-ratio-test contingency-table-or-xs)\n(multinomial-likelihood-ratio-test contingency-table-or-xs params)\n\nMultinomial likelihood ratio test, a power divergence test for lambda 0.0\nPower divergence test.\nFirst argument should be one of:\n\ncontingency table\nsequence of counts (for goodness of fit)\nsequence of data (for goodness of fit against distribution)\n\nFor goodness of fit there are two options:\n\ncomparison of observed counts vs expected probabilities or weights (:p)\ncomparison of data against given distribution (:p), in this case histogram from data is created and compared to distribution PDF in bins ranges. Use :bins option to control histogram creation.\n\nOptions are:\n\n:lambda - test type:\n\n1.0 - chisq-test\n0.0 - multinomial-likelihood-ratio-test\n-1.0 - minimum-discrimination-information-test\n-2.0 - neyman-modified-chisq-test\n-0.5 - freeman-tukey-test\n2/3 - cressie-read-test - default\n\n:p - probabilites, weights or distribution object.\n:alpha - significance level (default: 0.05)\n:ci-sides - confidence interval sides (default: :two-sided)\n:sides - p-value sides (:two-sided, :one-side-greater - default, :one-side-less)\n:bootstrap-samples - number of samples to estimate confidence intervals (default: 1000)\n:ddof - delta degrees of freedom, adjustment for dof (default: 0.0)\n:bins - number of bins or estimator name for histogram\n\nsource\n\n\n\nneyman-modified-chisq-test\n\n(neyman-modified-chisq-test contingency-table-or-xs)\n(neyman-modified-chisq-test contingency-table-or-xs params)\n\nNeyman modifield chi square test, a power divergence test for lambda -2.0\nPower divergence test.\nFirst argument should be one of:\n\ncontingency table\nsequence of counts (for goodness of fit)\nsequence of data (for goodness of fit against distribution)\n\nFor goodness of fit there are two options:\n\ncomparison of observed counts vs expected probabilities or weights (:p)\ncomparison of data against given distribution (:p), in this case histogram from data is created and compared to distribution PDF in bins ranges. Use :bins option to control histogram creation.\n\nOptions are:\n\n:lambda - test type:\n\n1.0 - chisq-test\n0.0 - multinomial-likelihood-ratio-test\n-1.0 - minimum-discrimination-information-test\n-2.0 - neyman-modified-chisq-test\n-0.5 - freeman-tukey-test\n2/3 - cressie-read-test - default\n\n:p - probabilites, weights or distribution object.\n:alpha - significance level (default: 0.05)\n:ci-sides - confidence interval sides (default: :two-sided)\n:sides - p-value sides (:two-sided, :one-side-greater - default, :one-side-less)\n:bootstrap-samples - number of samples to estimate confidence intervals (default: 1000)\n:ddof - delta degrees of freedom, adjustment for dof (default: 0.0)\n:bins - number of bins or estimator name for histogram\n\nsource\n\n\n\nnormality-test\n\n(normality-test xs)\n(normality-test xs params)\n(normality-test xs skew kurt {:keys [sides], :or {sides :one-sided-greater}})\n\nNormality test based on skewness and kurtosis\nsource\n\n\n\nomega-sq\n\n(omega-sq [group1 group2])\n(omega-sq group1 group2)\n(omega-sq group1 group2 degrees-of-freedom)\n\nAdjusted R2\nsource\n\n\n\none-way-anova-test\n\n(one-way-anova-test xss)\n(one-way-anova-test xss {:keys [sides], :or {sides :one-sided-greater}})\n\nsource\n\n\n\nouter-fence-extent\n\n(outer-fence-extent vs)\n(outer-fence-extent vs estimation-strategy)\n\nReturns LOF, UOF and median\nsource\n\n\n\noutliers\n\n(outliers vs)\n(outliers vs estimation-strategy)\n(outliers vs q1 q3)\n\nFind outliers defined as values outside inner fences.\nLet Q1 is 25-percentile and Q3 is 75-percentile. IQR is (- Q3 Q1).\n\nLIF (Lower Inner Fence) equals (- Q1 (* 1.5 IQR)).\nUIF (Upper Inner Fence) equals (+ Q3 (* 1.5 IQR)).\n\nReturns a sequence of outliers.\nOptional estimation-strategy argument can be set to change quantile calculations estimation type. See estimation-strategies.\nsource\n\n\n\np-overlap\n\n(p-overlap [group1 group2])\n(p-overlap group1 group2)\n(p-overlap group1 group2 {:keys [kde bandwidth min-iterations steps], :or {kde :gaussian, min-iterations 3, steps 500}})\n\nOverlapping index, kernel density approximation\nsource\n\n\n\np-value\n\n(p-value stat)\n(p-value distribution stat)\n(p-value distribution stat sides)\n\nCalculate p-value for given distribution (default: N(0,1)), stat and sides (one of :two-sided, :one-sided-greater or :one-sided-less/:one-sided).\nsource\n\n\n\npacf\n\n(pacf data)\n(pacf data lags)\n\nCaluclate pacf (partial autocorrelation function) for given number of lags.\nIf lags is omitted function returns maximum possible number of lags.\npacf returns also lag 0 (which is 0.0).\nSee also acf, acf-ci, pacf-ci\nsource\n\n\n\npacf-ci\n\n(pacf-ci data)\n(pacf-ci data lags)\n(pacf-ci data lags alpha)\n\npacf with added confidence interval data.\nsource\n\n\n\npearson-correlation\n\n(pearson-correlation [vs1 vs2])\n(pearson-correlation vs1 vs2)\n\nPearson’s correlation of two sequences.\nsource\n\n\n\npearson-r\n\n(pearson-r [group1 group2])\n(pearson-r group1 group2)\n\nPearson r correlation coefficient\nsource\n\n\n\npercentile\n\n(percentile vs p)\n(percentile vs p estimation-strategy)\n\nCalculate percentile of a vs.\nPercentile p is from range 0-100.\nSee docs.\nOptionally you can provide estimation-strategy to change interpolation methods for selecting values. Default is :legacy. See more here\nSee also quantile.\nsource\n\n\n\npercentile-bc-extent\n\n(percentile-bc-extent vs)\n(percentile-bc-extent vs p)\n(percentile-bc-extent vs p1 p2)\n(percentile-bc-extent vs p1 p2 estimation-strategy)\n\nReturn bias corrected percentile range and mean for bootstrap samples. See https://projecteuclid.org/euclid.ss/1032280214\np - calculates extent of bias corrected p and 100-p (default: p=2.5)\nSet estimation-strategy to :r7 to get the same result as in R coxed::bca.\nsource\n\n\n\npercentile-bca-extent\n\n(percentile-bca-extent vs)\n(percentile-bca-extent vs p)\n(percentile-bca-extent vs p1 p2)\n(percentile-bca-extent vs p1 p2 estimation-strategy)\n(percentile-bca-extent vs p1 p2 accel estimation-strategy)\n\nReturn bias corrected percentile range and mean for bootstrap samples. Also accounts for variance variations throught the accelaration parameter. See https://projecteuclid.org/euclid.ss/1032280214\np - calculates extent of bias corrected p and 100-p (default: p=2.5)\nSet estimation-strategy to :r7 to get the same result as in R coxed::bca.\nsource\n\n\n\npercentile-extent\n\n(percentile-extent vs)\n(percentile-extent vs p)\n(percentile-extent vs p1 p2)\n(percentile-extent vs p1 p2 estimation-strategy)\n\nReturn percentile range and median.\np - calculates extent of p and 100-p (default: p=25)\nsource\n\n\n\npercentiles\n\n(percentiles vs)\n(percentiles vs ps)\n(percentiles vs ps estimation-strategy)\n\nCalculate percentiles of a vs.\nPercentiles are sequence of values from range 0-100.\nSee docs.\nOptionally you can provide estimation-strategy to change interpolation methods for selecting values. Default is :legacy. See more here\nSee also quantile.\nsource\n\n\n\npi\n\n(pi vs)\n(pi vs size)\n(pi vs size estimation-strategy)\n\nReturns PI as a map, quantile intervals based on interval size.\nQuantiles are (1-size)/2 and 1-(1-size)/2\nsource\n\n\n\npi-extent\n\n(pi-extent vs)\n(pi-extent vs size)\n(pi-extent vs size estimation-strategy)\n\nReturns PI extent, quantile intervals based on interval size + median.\nQuantiles are (1-size)/2 and 1-(1-size)/2\nsource\n\n\n\npooled-stddev\n\n(pooled-stddev groups)\n(pooled-stddev groups method)\n\nCalculate pooled standard deviation for samples and method\nsource\n\n\n\npooled-variance\n\n(pooled-variance groups)\n(pooled-variance groups method)\n\nCalculate pooled variance for samples and method.\nMethods: * :unbiased - sqrt of weighted average of variances (default) * :biased - biased version of :unbiased * :avg - sqrt of average of variances\nsource\n\n\n\npopulation-stddev\n\n(population-stddev vs)\n(population-stddev vs mu)\n\nCalculate population standard deviation of vs.\nSee stddev.\nsource\n\n\n\npopulation-variance\n\n(population-variance vs)\n(population-variance vs mu)\n\nCalculate population variance of vs.\nSee variance.\nsource\n\n\n\npopulation-wstddev\n\n(population-wstddev vs weights)\n\nCalculate population weighted standard deviation of vs\nsource\n\n\n\npopulation-wvariance\n\n(population-wvariance vs freqs)\n\nCalculate population weighted variance of vs.\nsource\n\n\n\npower-divergence-test\n\n(power-divergence-test contingency-table-or-xs)\n(power-divergence-test contingency-table-or-xs {:keys [lambda ci-sides sides p alpha bootstrap-samples ddof bins], :or {lambda m/TWO_THIRD, sides :one-sided-greater, ci-sides :two-sided, alpha 0.05, bootstrap-samples 1000, ddof 0}})\n\nPower divergence test.\nFirst argument should be one of:\n\ncontingency table\nsequence of counts (for goodness of fit)\nsequence of data (for goodness of fit against distribution)\n\nFor goodness of fit there are two options:\n\ncomparison of observed counts vs expected probabilities or weights (:p)\ncomparison of data against given distribution (:p), in this case histogram from data is created and compared to distribution PDF in bins ranges. Use :bins option to control histogram creation.\n\nOptions are:\n\n:lambda - test type:\n\n1.0 - chisq-test\n0.0 - multinomial-likelihood-ratio-test\n-1.0 - minimum-discrimination-information-test\n-2.0 - neyman-modified-chisq-test\n-0.5 - freeman-tukey-test\n2/3 - cressie-read-test - default\n\n:p - probabilites, weights or distribution object.\n:alpha - significance level (default: 0.05)\n:ci-sides - confidence interval sides (default: :two-sided)\n:sides - p-value sides (:two-sided, :one-side-greater - default, :one-side-less)\n:bootstrap-samples - number of samples to estimate confidence intervals (default: 1000)\n:ddof - delta degrees of freedom, adjustment for dof (default: 0.0)\n:bins - number of bins or estimator name for histogram\n\nsource\n\n\n\npower-transformation\n\n(power-transformation xs)\n(power-transformation xs lambda)\n(power-transformation xs lambda alpha)\n\nPower transformation of data.\nAll values should be positive.\nArguments: * lambda - power parameter (default: 0.0) * alpha - shift parameter (optional)\nsource\n\n\n\npowmean\n\n(powmean vs power)\n(powmean vs weights power)\n\nGeneralized power mean\nsource\n\n\n\npsnr\n\n(psnr [vs1 vs2-or-val])\n(psnr vs1 vs2-or-val)\n(psnr vs1 vs2-or-val max-value)\n\nPeak signal to noise, max-value is maximum possible value (default: max from vs1 and vs2)\nsource\n\n\n\nquantile\n\n(quantile vs q)\n(quantile vs q estimation-strategy)\n\nCalculate quantile of a vs.\nQuantile q is from range 0.0-1.0.\nSee docs for interpolation strategy.\nOptionally you can provide estimation-strategy to change interpolation methods for selecting values. Default is :legacy. See more here\nSee also percentile.\nsource\n\n\n\nquantile-extent\n\n(quantile-extent vs)\n(quantile-extent vs q)\n(quantile-extent vs q1 q2)\n(quantile-extent vs q1 q2 estimation-strategy)\n\nReturn quantile range and median.\nq - calculates extent of q and 1.0-q (default: q=0.25)\nsource\n\n\n\nquantiles\n\n(quantiles vs)\n(quantiles vs qs)\n(quantiles vs qs estimation-strategy)\n\nCalculate quantiles of a vs.\nQuantilizes is sequence with values from range 0.0-1.0.\nSee docs for interpolation strategy.\nOptionally you can provide estimation-strategy to change interpolation methods for selecting values. Default is :legacy. See more here\nSee also percentiles.\nsource\n\n\n\nr2\n\n(r2 [vs1 vs2-or-val])\n(r2 vs1 vs2-or-val)\n(r2 vs1 vs2-or-val no-of-variables)\n\nR2\nsource\n\n\n\nr2-determination\n\n(r2-determination [group1 group2])\n(r2-determination group1 group2)\n\nCoefficient of determination\nsource\n\n\n\nrank-epsilon-sq\n\n(rank-epsilon-sq xs)\n\nEffect size for Kruskal-Wallis test\nsource\n\n\n\nrank-eta-sq\n\n(rank-eta-sq xs)\n\nEffect size for Kruskal-Wallis test\nsource\n\n\n\nremove-outliers\n\n(remove-outliers vs)\n(remove-outliers vs estimation-strategy)\n(remove-outliers vs q1 q3)\n\nRemove outliers defined as values outside inner fences.\nLet Q1 is 25-percentile and Q3 is 75-percentile. IQR is (- Q3 Q1).\n\nLIF (Lower Inner Fence) equals (- Q1 (* 1.5 IQR)).\nUIF (Upper Inner Fence) equals (+ Q3 (* 1.5 IQR)).\n\nReturns a sequence without outliers.\nOptional estimation-strategy argument can be set to change quantile calculations estimation type. See estimation-strategies.\nsource\n\n\n\nrescale\n\n(rescale vs)\n(rescale vs low high)\n\nLineary rascale data to desired range, [0,1] by default\nsource\n\n\n\nrmse\n\n(rmse [vs1 vs2-or-val])\n(rmse vs1 vs2-or-val)\n\nRoot mean squared error\nsource\n\n\n\nrobust-standardize\n\n(robust-standardize vs)\n(robust-standardize vs q)\n\nNormalize samples to have median = 0 and MAD = 1.\nIf q argument is used, scaling is done by quantile difference (Q_q, Q_(1-q)). Set 0.25 for IQR.\nsource\n\n\n\nrows-&gt;contingency-table\n\n(rows-&gt;contingency-table xss)\n\nsource\n\n\n\nrss\n\n(rss [vs1 vs2-or-val])\n(rss vs1 vs2-or-val)\n\nResidual sum of squares\nsource\n\n\n\nsecond-moment DEPRECATED\nDeprecated: Use moment function\nsource\n\n\n\nsem\n\n(sem vs)\n\nStandard error of mean\nsource\n\n\n\nsem-extent\n\n(sem-extent vs)\n\n-/+ sem and mean\nsource\n\n\n\nsimilarity\n\n(similarity method P-observed Q-expected)\n(similarity method P-observed Q-expected {:keys [bins probabilities? epsilon], :or {probabilities? true, epsilon 1.0E-6}})\n\nVarious PDF similarities between two histograms (frequencies) or probabilities.\nQ can be a distribution object. Then, histogram will be created out of P.\nArguments:\n\nmethod - distance method\nP-observed - frequencies, probabilities or actual data (when Q is a distribution)\nQ-expected - frequencies, probabilities or distribution object (when P is a data)\n\nOptions:\n\n:probabilities? - should P/Q be converted to a probabilities, default: true.\n:epsilon - small number which replaces 0.0 when division or logarithm is used`\n:bins - number of bins or bins estimation method, see histogram.\n\nThe list of methods: :intersection, :czekanowski, :motyka, :kulczynski, :ruzicka, :inner-product, :harmonic-mean, :cosine, :jaccard, :dice, :fidelity, :squared-chord\nSee more: Comprehensive Survey on Distance/Similarity Measures between Probability Density Functions by Sung-Hyuk Cha\nsource\n\n\n\nskewness\n\n(skewness vs)\n(skewness vs typ)\n\nCalculate skewness from sequence.\nPossible types: :G1 (default), :g1 (:pearson), :b1, :B1 (:yule), :B3, :skew, :mode, :bowley, :hogg or :median.\nsource\n\n\n\nskewness-test\n\n(skewness-test xs)\n(skewness-test xs params)\n(skewness-test xs skew {:keys [sides type], :or {sides :two-sided, type :g1}})\n\nNormality test for skewness.\nsource\n\n\n\nspan\n\n(span vs)\n\nWidth of the sample, maximum value minus minimum value\nsource\n\n\n\nspearman-correlation\n\n(spearman-correlation [vs1 vs2])\n(spearman-correlation vs1 vs2)\n\nSpearman’s correlation of two sequences.\nsource\n\n\n\nstandardize\n\n(standardize vs)\n\nNormalize samples to have mean = 0 and stddev = 1.\nsource\n\n\n\nstats-map\n\n(stats-map vs)\n(stats-map vs estimation-strategy)\n\nCalculate several statistics of vs and return as map.\nOptional estimation-strategy argument can be set to change quantile calculations estimation type. See estimation-strategies.\nsource\n\n\n\nstddev\n\n(stddev vs)\n(stddev vs mu)\n\nCalculate standard deviation of vs.\nSee population-stddev.\nsource\n\n\n\nstddev-extent\n\n(stddev-extent vs)\n\n-/+ stddev and mean\nsource\n\n\n\nsum\n\n(sum vs)\n\nSum of all vs values.\nsource\n\n\n\nt-test-one-sample\n\n(t-test-one-sample xs)\n(t-test-one-sample xs m)\n\nOne sample Student’s t-test\n\nalpha - significance level (default: 0.05)\nsides - one of: :two-sided, :one-sided-less (short: :one-sided) or :one-sided-greater\nmu - mean (default: 0.0)\n\nsource\n\n\n\nt-test-two-samples\n\n(t-test-two-samples xs ys)\n(t-test-two-samples xs ys {:keys [paired? equal-variances?], :or {paired? false, equal-variances? false}, :as params})\n\nTwo samples Student’s t-test\n\nalpha - significance level (default: 0.05)\nsides - one of: :two-sided (default), :one-sided-less (short: :one-sided) or :one-sided-greater\nmu - mean (default: 0.0)\npaired? - unpaired or paired test, boolean (default: false)\nequal-variances? - unequal or equal variances, boolean (default: false)\n\nsource\n\n\n\ntrim\n\n(trim vs)\n(trim vs quantile)\n(trim vs quantile estimation-strategy)\n(trim vs low high nan)\n\nReturn trimmed data. Trim is done by using quantiles, by default is set to 0.2.\nsource\n\n\n\ntrim-lower\n\n(trim-lower vs)\n(trim-lower vs quantile)\n(trim-lower vs quantile estimation-strategy)\n\nTrim data below given quanitle, default: 0.2.\nsource\n\n\n\ntrim-upper\n\n(trim-upper vs)\n(trim-upper vs quantile)\n(trim-upper vs quantile estimation-strategy)\n\nTrim data above given quanitle, default: 0.2.\nsource\n\n\n\ntschuprows-t\n\n(tschuprows-t group1 group2)\n(tschuprows-t contingency-table)\n\nTschuprows T effect size for discrete data\nsource\n\n\n\nttest-one-sample DEPRECATED\nDeprecated: Use t-test-one-sample\nsource\n\n\n\nttest-two-samples DEPRECATED\nDeprecated: Use t-test-two-samples\nsource\n\n\n\nvariance\n\n(variance vs)\n(variance vs mu)\n\nCalculate variance of vs.\nSee population-variance.\nsource\n\n\n\nvariation\n\n(variation vs)\n\nCoefficient of variation CV = stddev / mean\nsource\n\n\n\nweighted-kappa\n\n(weighted-kappa contingency-table)\n(weighted-kappa contingency-table weights)\n\nCohen’s weighted kappa for indexed contingency table\nsource\n\n\n\nwinsor\n\n(winsor vs)\n(winsor vs quantile)\n(winsor vs quantile estimation-strategy)\n(winsor vs low high nan)\n\nReturn winsorized data. Trim is done by using quantiles, by default is set to 0.2.\nsource\n\n\n\nwmean DEPRECATED\nDeprecated: Use mean\n\n(wmean vs)\n(wmean vs weights)\n\nWeighted mean\nsource\n\n\n\nwmedian\n\n(wmedian vs ws)\n(wmedian vs ws method)\n\nWeighted median.\nCalculation is done using interpolation. There are three methods: * :linear - linear interpolation, default * :step - step interpolation * :average - average of ties\nBased on spatstat.geom::weighted.quantile from R.\nsource\n\n\n\nwmw-odds\n\n(wmw-odds [group1 group2])\n(wmw-odds group1 group2)\n\nWilcoxon-Mann-Whitney odds\nsource\n\n\n\nwquantile\n\n(wquantile vs ws q)\n(wquantile vs ws q method)\n\nWeighted quantile.\nCalculation is done using interpolation. There are three methods: * :linear - linear interpolation, default * :step - step interpolation * :average - average of ties\nBased on spatstat.geom::weighted.quantile from R.\nsource\n\n\n\nwquantiles\n\n(wquantiles vs ws)\n(wquantiles vs ws qs)\n(wquantiles vs ws qs method)\n\nWeighted quantiles.\nCalculation is done using interpolation. There are three methods: * :linear - linear interpolation, default * :step - step interpolation * :average - average of ties\nBased on spatstat.geom::weighted.quantile from R.\nsource\n\n\n\nwstddev\n\n(wstddev vs freqs)\n\nCalculate weighted (unbiased) standard deviation of vs\nsource\n\n\n\nwvariance\n\n(wvariance vs freqs)\n\nCalculate weighted (unbiased) variance of vs.\nsource\n\n\n\nyeo-johnson-transformation\n\n(yeo-johnson-transformation xs)\n(yeo-johnson-transformation xs lambda)\n(yeo-johnson-transformation xs lambda alpha)\n\nYeo-Johnson transformation\nArguments: * lambda - power parameter (default: 0.0) * alpha - shift parameter (optional)\nsource\n\n\n\nz-test-one-sample\n\n(z-test-one-sample xs)\n(z-test-one-sample xs m)\n\nOne sample z-test\n\nalpha - significance level (default: 0.05)\nsides - one of: :two-sided, :one-sided-less (short: :one-sided) or :one-sided-greater\nmu - mean (default: 0.0)\n\nsource\n\n\n\nz-test-two-samples\n\n(z-test-two-samples xs ys)\n(z-test-two-samples xs ys {:keys [paired? equal-variances?], :or {paired? false, equal-variances? false}, :as params})\n\nTwo samples z-test\n\nalpha - significance level (default: 0.05)\nsides - one of: :two-sided (default), :one-sided-less (short: :one-sided) or :one-sided-greater\nmu - mean (default: 0.0)\npaired? - unpaired or paired test, boolean (default: false)\nequal-variances? - unequal or equal variances, boolean (default: false)\n\nsource\n\nsource: clay/stats.clj",
    "crumbs": [
      "Statistics"
    ]
  },
  {
    "objectID": "complex_quaternions.html",
    "href": "complex_quaternions.html",
    "title": "Complex numbers and quaternions",
    "section": "",
    "text": "Complex numbers",
    "crumbs": [
      "Complex numbers and quaternions"
    ]
  },
  {
    "objectID": "complex_quaternions.html#complex-numbers",
    "href": "complex_quaternions.html#complex-numbers",
    "title": "Complex numbers and quaternions",
    "section": "",
    "text": "Reference\n\nfastmath.complex\nComplex numbers functions.\nComplex number is represented as Vec2 type (from clojure2d.math.vector namespace).\nTo create complex number use complex, vec2 or -&gt;Vec2.\nImplementation checks for ##Inf, ##NaN and some of the function distinguish +0.0 and -0.0\n\n\n-I\nsource\n\n\n\nI\nsource\n\n\n\nI-\nsource\n\n\n\nONE\nsource\n\n\n\nTWO\nsource\n\n\n\nZERO\nsource\n\n\n\nabs\n\n(abs z)\n\nAbsolute value, magnitude\nsource\n\n\n\nacos\n\n(acos z)\n\nacos\nsource\n\n\n\nacosh\n\n(acosh z)\n\nacosh\nsource\n\n\n\nacot\n\n(acot z)\n\nacot\nsource\n\n\n\nacoth\n\n(acoth z)\n\nsource\n\n\n\nacsc\n\n(acsc z)\n\nacsc\nsource\n\n\n\nacsch\n\n(acsch z)\n\nsource\n\n\n\nadd\n\n(add z1 z2)\n\nSum of two complex numbers\nsource\n\n\n\narg\n\n(arg z)\n\nArgument (angle) of the complex number\nsource\n\n\n\nasec\n\n(asec z)\n\nasec\nsource\n\n\n\nasech\n\n(asech z)\n\nsource\n\n\n\nasin\n\n(asin z)\n\nasin\nsource\n\n\n\nasinh\n\n(asinh z)\n\nasinh\nsource\n\n\n\natan\n\n(atan z)\n\natan\nsource\n\n\n\natanh\n\n(atanh z)\n\natanh\nsource\n\n\n\ncomplex\n\n(complex a b)\n(complex a)\n(complex)\n\nCreate complex number. Represented as Vec2.\nsource\n\n\n\nconjugate\n\n(conjugate z)\n\nComplex conjugate. \\(\\bar{z}\\)\nsource\n\n\n\ncos\n\n(cos z)\n\ncos\nsource\n\n\n\ncosh\n\n(cosh z)\n\ncosh\nsource\n\n\n\ncot\n\n(cot z)\n\ncsc\nsource\n\n\n\ncoth\n\n(coth z)\n\ncoth\nsource\n\n\n\ncsc\n\n(csc z)\n\ncsc\nsource\n\n\n\ncsch\n\n(csch z)\n\ncsch\nsource\n\n\n\ncsgn\n\n(csgn re im)\n(csgn z)\n\nComplex sgn.\nReturns 0 for 0+0i or calls m/sgn on real part otherwise.\nsource\n\n\n\ndelta-eq\n\n(delta-eq q1 q2)\n(delta-eq q1 q2 accuracy)\n\nCompare complex numbers with given accuracy (10e-6 by default)\nsource\n\n\n\ndiv\n\n(div z1 z2)\n\nDivide two complex numbers.\nsource\n\n\n\nevalpoly\n\n(evalpoly x & coeffs)\n\nEvaluate complex polynomial\nsource\n\n\n\nexp\n\n(exp z)\n\nexp\nsource\n\n\n\nflip\n\n(flip z)\n\nExchange imaginary and real parts\nsource\n\n\n\nim\n\n(im z)\n\nImaginary part\nsource\n\n\n\nimaginary?\n\n(imaginary? z)\n\nIs z is a pure imaginary number?\nsource\n\n\n\ninf?\n\n(inf? z)\n\nIs infinite?\nsource\n\n\n\nlog\n\n(log z)\n\nlog, principal value\nsource\n\n\n\nlogb\n\n(logb z b)\n\nlog with base b\nsource\n\n\n\nmakepoly\n\n(makepoly coeffs)\n\nCreate complex polynomial function for given coefficients\nsource\n\n\n\nmevalpoly MACRO\n\n(mevalpoly x & coeffs)\n\nEvaluate complex polynomial macro version in the form coeffs[0]+coeffs[1]x+coeffs[2]x^2+….\nsource\n\n\n\nmuladd\n\n(muladd x y z)\n\n(x y z) -&gt; (+ z (* x y))\nsource\n\n\n\nmult\n\n(mult z1 z2)\n\nMultiply two complex numbers.\nsource\n\n\n\nmult-I\n\n(mult-I z)\n\nsource\n\n\n\nmult-I-\n\n(mult-I- z)\n\nsource\n\n\n\nnan?\n\n(nan? z)\n\nIs NaN?\nsource\n\n\n\nneg\n\n(neg z)\n\nNegate complex number. \\(-z\\)\nsource\n\n\n\nnorm\n\n(norm z)\n\nNorm (Guass) of the complex number, absolute value squared\nsource\n\n\n\npow\n\n(pow z1 z2)\n\nPower. \\(z_1^{z_2}\\)\nsource\n\n\n\nre\n\n(re z)\n\nReal part\nsource\n\n\n\nreal?\n\n(real? z)\n\nIs z is a real number?\nsource\n\n\n\nreciprocal\n\n(reciprocal z)\n\n\\(\\frac{1}{z}\\)\nsource\n\n\n\nscale\n\n(scale z v)\n\nMultiply by real number\nsource\n\n\n\nsec\n\n(sec z)\n\nsec\nsource\n\n\n\nsech\n\n(sech z)\n\nsech\nsource\n\n\n\nsin\n\n(sin z)\n\nsin\nsource\n\n\n\nsinh\n\n(sinh z)\n\nsinh\nsource\n\n\n\nsq\n\n(sq z)\n\nSquare complex number. \\(z^2\\)\nsource\n\n\n\nsqrt\n\n(sqrt z)\n\nSqrt of complex number. \\(\\sqrt{z}\\)\nsource\n\n\n\nsqrt1z\n\n(sqrt1z z)\n\n\\(\\sqrt{1-z^2}\\)\nsource\n\n\n\nsub\n\n(sub z1 z2)\n\nDifference of two complex numbers\nsource\n\n\n\ntan\n\n(tan z)\n\ntan\nsource\n\n\n\ntanh\n\n(tanh z)\n\ntanh\nsource\n\n\n\nzero?\n\n(zero? z)\n\nIs zero?\nsource",
    "crumbs": [
      "Complex numbers and quaternions"
    ]
  },
  {
    "objectID": "complex_quaternions.html#quaternions",
    "href": "complex_quaternions.html#quaternions",
    "title": "Complex numbers and quaternions",
    "section": "Quaternions",
    "text": "Quaternions\n\nReference\n\nfastmath.quaternion\n\n\n-I\nsource\n\n\n\n-J\nsource\n\n\n\n-K\nsource\n\n\n\nI\nsource\n\n\n\nJ\nsource\n\n\n\nK\nsource\n\n\n\nONE\nsource\n\n\n\nZERO\nsource\n\n\n\nacos\n\n(acos q)\n\nsource\n\n\n\nacosh\n\n(acosh q)\n\nsource\n\n\n\nacot\n\n(acot q)\n\nsource\n\n\n\nacoth\n\n(acoth q)\n\nsource\n\n\n\nacsc\n\n(acsc q)\n\nsource\n\n\n\nacsch\n\n(acsch q)\n\nsource\n\n\n\nadd\n\n(add q1 q2)\n\nSum of two quaternions\nsource\n\n\n\narg\n\n(arg quaternion)\n\nArgument of quaternion, atan2(|vector(q)|, re(q))\nsource\n\n\n\nasec\n\n(asec q)\n\nsource\n\n\n\nasech\n\n(asech q)\n\nsource\n\n\n\nasin\n\n(asin q)\n\nsource\n\n\n\nasinh\n\n(asinh q)\n\nsource\n\n\n\natan\n\n(atan q)\n\nsource\n\n\n\natanh\n\n(atanh q)\n\nsource\n\n\n\ncomplex-&gt;quaternion\n\n(complex-&gt;quaternion z)\n\nCreate quaternion from complex number\nsource\n\n\n\nconjugate\n\n(conjugate quaternion)\n\nReturns conjugate of quaternion\nsource\n\n\n\ncos\n\n(cos q)\n\nsource\n\n\n\ncosh\n\n(cosh q)\n\nsource\n\n\n\ncot\n\n(cot q)\n\nsource\n\n\n\ncoth\n\n(coth q)\n\nsource\n\n\n\ncsc\n\n(csc q)\n\nsource\n\n\n\ncsch\n\n(csch q)\n\nsource\n\n\n\ndelta-eq\n\n(delta-eq q1 q2)\n(delta-eq q1 q2 accuracy)\n\nCompare quaternions with given accuracy (10e-6 by default)\nsource\n\n\n\ndiv\n\n(div q1 q2)\n\nDivide two quaternions\nsource\n\n\n\nexp\n\n(exp q)\n\nsource\n\n\n\nfrom-angles\n\n(from-angles [x y z])\n(from-angles x y z)\n\nConvert Tait–Bryan angles z-y′-x” to quaternion.\nsource\n\n\n\nfrom-euler\n\n(from-euler [roll pitch yaw])\n(from-euler roll pitch yaw)\n\nConvert Euler ZYX (body 3-2-1) representation to quaternion\nInput should be 3d vector contating roll (x), pitch (y) and yaw (z) angles, or individual values.\n\nroll and yaw should be from [-pi, pi] range\npitch should be from [-pi/2, pi/2] range\n\nsource\n\n\n\nfrom-rotation-matrix\n\n(from-rotation-matrix m)\n\nConvert rotation 3x3 matrix to a quaternion\nsource\n\n\n\nim-i\n\n(im-i quaternion)\n\nReturn i imaginary part\nsource\n\n\n\nim-j\n\n(im-j quaternion)\n\nReturn j imaginary part\nsource\n\n\n\nim-k\n\n(im-k quaternion)\n\nReturn k imaginary part\nsource\n\n\n\nimaginary?\n\n(imaginary? quaternion)\n\nIs q is a pure imaginary number?\nsource\n\n\n\ninf?\n\n(inf? quaternion)\n\nIs infinitive?\nsource\n\n\n\nlog\n\n(log q)\n\nsource\n\n\n\nlogb\n\n(logb quaternion b)\n\nlog with base b\nsource\n\n\n\nmult\n\n(mult q1 q2)\n\nMultiply two quaternions.\nsource\n\n\n\nnan?\n\n(nan? quaternion)\n\nIs NaN?\nsource\n\n\n\nneg\n\n(neg quaternion)\n\nNegation of quaternion.\nsource\n\n\n\nnorm\n\n(norm quaternion)\n\nNorm of the quaternion, length of the vector\nsource\n\n\n\nnormalize\n\n(normalize quaternion)\n\nNormalize quaternion\nsource\n\n\n\npow\n\n(pow q p)\n\nQuaternion power\nsource\n\n\n\nqsgn\n\n(qsgn re im-i im-j im-k)\n(qsgn q)\n\nsgn of the quaternion.\nReturns 0 for 0+0i+0j+0k or calls m/sgn on real part otherwise.\nsource\n\n\n\nquaternion\n\n(quaternion a b c d)\n(quaternion scalar [i j k])\n(quaternion a)\n\nCreate quaternion from individual values or scalar and vector parts, reprezented as Vec4.\nsource\n\n\n\nre\n\n(re quaternion)\n\nReturns scalar part of quaternion\nsource\n\n\n\nreal?\n\n(real? quaternion)\n\nIs q is a real number?\nsource\n\n\n\nreciprocal\n\n(reciprocal quaternion)\n\nsource\n\n\n\nrotate\n\n(rotate in rotq)\n(rotate in angle u)\n\nRotate 3d in vector around axis u, the same as fastmath.vector/axis-rotate.\nsource\n\n\n\nrotation-quaternion\n\n(rotation-quaternion angle u)\n\nCreate rotation quaternion around vector u and angle alpha\nsource\n\n\n\nscalar\n\n(scalar quaternion)\n\nReturns scalar part of quaternion, double\nsource\n\n\n\nscale\n\n(scale quaternion scale)\n\nScale the quaternion\nsource\n\n\n\nsec\n\n(sec q)\n\nsource\n\n\n\nsech\n\n(sech q)\n\nsource\n\n\n\nsin\n\n(sin q)\n\nsource\n\n\n\nsinh\n\n(sinh q)\n\nsource\n\n\n\nslerp\n\n(slerp q1 q2 t)\n\nInterpolate quaternions\nsource\n\n\n\nsq\n\n(sq quaternion)\n\nSquare of quaternion.\nsource\n\n\n\nsqrt\n\n(sqrt q)\n\nsource\n\n\n\nsub\n\n(sub q1 q2)\n\nDifference of two quaternions\nsource\n\n\n\ntan\n\n(tan q)\n\nsource\n\n\n\ntanh\n\n(tanh q)\n\nsource\n\n\n\nto-angles\n\n(to-angles q)\n\nConvert quaternion to Tait–Bryan angles, z-y′-x”.\nsource\n\n\n\nto-euler\n\n(to-euler q)\n\nConvert quaternion to Euler ZYX (body 3-2-1). Quaternion will be normalized before calculations.\nOutput will contain roll (x), pitch (y) and yaw (z) angles.\nsource\n\n\n\nto-rotation-matrix\n\n(to-rotation-matrix q)\n\nConvert quaternion to rotation 3x3 matrix\nsource\n\n\n\nvector\n\n(vector quaternion)\n\nReturns vector part of quaternion, Vec3 type\nsource\n\n\n\nzero?\n\n(zero? quaternion)\n\nIs zero?\nsource\n\nsource: clay/complex_quaternions.clj",
    "crumbs": [
      "Complex numbers and quaternions"
    ]
  },
  {
    "objectID": "special.html",
    "href": "special.html",
    "title": "Special functions",
    "section": "",
    "text": "Gamma\nGamma and related functions",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#gamma",
    "href": "special.html#gamma",
    "title": "Special functions",
    "section": "",
    "text": "Defined functions\n\n\n\n\ngamma, log-gamma\ninv-gamma-1pm1, log-gamma-1p\nupper-incomplete-gamma, lower-incomplete-gamma\nregularized-gamma-p, regularized-gamma-q\ndigamma, trigamma, polygamma\n\n\n\n\nGamma function\ngamma \\(\\Gamma(x)\\) function is an extension of the factorial.\n\\[\\Gamma(x) = \\int_0^\\infty t^{x-1}e^{-t}\\,dt\\]\nFor positive integer n\n\\[\\Gamma(n) = (n-1)!\\]\nGamma for negative integers is not defined.\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/gamma 1.5) ;; =&gt; 0.886226925452758\n(special/gamma -1.5) ;; =&gt; 2.3632718012073544\n(special/gamma -2.0) ;; =&gt; ##NaN\n(special/gamma 15) ;; =&gt; 8.71782912E10\n(m/factorial 14) ;; =&gt; 8.71782912E10\n\n\n\n\nAdditionally reciprocal gamma function inv-gamma-1pm1 is defined as:\n\\[\\frac{1}{\\Gamma(x+1)}-1\\text{ for } -0.5\\leq x\\leq 1.5\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/inv-gamma-1pm1 -0.5) ;; =&gt; -0.4358104164522437\n(special/inv-gamma-1pm1 0.5) ;; =&gt; 0.12837916709551256\n\n\n\n\n\nLog gamma\nLogartihm of gamma log-gamma \\(\\log\\Gamma(x)\\) with derivatives: digamma \\(\\psi\\), trigamma \\(\\psi_1\\) and polygamma \\(\\psi^{(m)}\\).\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/log-gamma 1.01) ;; =&gt; -0.005690307946069651\n(special/log-gamma 0.5) ;; =&gt; 0.5723649429247001\n(m/exp (special/log-gamma 5)) ;; =&gt; 24.000000000000004\n\n\n\n\nlog-gamma-1p is more accurate function defined as \\(\\log\\Gamma(x+1)\\) for \\(-0.5\\leq x 1.5\\)\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/log-gamma-1p -0.1) ;; =&gt; 0.06637623973474298\n(special/log-gamma-1p 0.01) ;; =&gt; -0.005690307946069646\n(special/log-gamma-1p 1.01) ;; =&gt; 0.004260022907098441\n\n\n\n\nDerivatives of log-gamma function. First derivative digamma.\n\\[\\operatorname{digamma}(x)=\\psi(x)=\\psi^{(0)}(x)=\\frac{d}{dx}\\log\\Gamma(x)=\\frac{\\Gamma'(x)}{\\Gamma(x)}\\]\n\n\n\n\nSecond derivative trigamma\n\\[\\operatorname{trigamma}(x)=\\psi_1(x)=\\psi^{(1)}(x)=\\frac{d}{dx}\\psi(x)=\\frac{d^2}{dx^2}\\log\\Gamma(x)\\]\n\n\n\n\npolygamma as mth derivative of digamma\n\\[\\operatorname{polygamma}(m,x)=\\psi^{(m)}=\\frac{d^m}{dx^m}\\psi(x)=\\frac{d^{m+1}}{dx^{m+1}}\\log\\Gamma(x)\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/digamma 0.5) ;; =&gt; -1.9635100260214235\n(special/trigamma 0.5) ;; =&gt; 4.93480220054468\n(special/polygamma 0 0.5) ;; =&gt; -1.9635100260214235\n(special/polygamma 1 0.5) ;; =&gt; 4.93480220054468\n(special/polygamma 2 0.5) ;; =&gt; -16.828796644234316\n(special/polygamma 3 0.5) ;; =&gt; 97.40909103400247\n\n\n\n\n\nIncomplete and regularized\nupper-incomplete-gamma \\(\\Gamma(s,x)\\) and lower-incomplete-gamma \\(\\gamma(s,x)\\) are versions of gamma function with parametrized integral limits.\nUpper incomplete gamma is defined as:\n\\[\\Gamma(s,x) = \\int_x^\\infty t^{s-1}e^{-t}\\,dt\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/upper-incomplete-gamma 2 0.5) ;; =&gt; 0.9097959895689501\n(special/upper-incomplete-gamma -2 0.5) ;; =&gt; 0.886417457100714\n\n\n\n\nLower incomplete gamma is defined as:\n\\[\\gamma(s,x) = \\int_0^x t^{s-1}e^{-t}\\,dt\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/lower-incomplete-gamma 0.5 3) ;; =&gt; 1.7470973415820528\n(special/lower-incomplete-gamma -0.5 3) ;; =&gt; -3.5516838378128024\n\n\n\n\nregularized-gamma-p \\(P(s,x)\\) and regularized-gamma-q \\(Q(s,x)\\) are normalized incomplete gamma functions by gamma of s. s can be negative non-integer.\n\\[P(s,x)=\\frac{\\gamma(s,x)}{\\Gamma(x)}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/regularized-gamma-p 2.5 0.5) ;; =&gt; 0.03743422675270362\n(special/regularized-gamma-p -2.5 0.5) ;; =&gt; 2.134513839251947\n\n\n\n\n\\[Q(s,x)=\\frac{\\Gamma(s,x)}{\\Gamma(x)}=1-P(s,x)\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/regularized-gamma-q 2.5 0.5) ;; =&gt; 0.9625657732472964\n(special/regularized-gamma-q -2.5 0.5) ;; =&gt; -1.134513839251947",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#beta",
    "href": "special.html#beta",
    "title": "Special functions",
    "section": "Beta",
    "text": "Beta\nBeta and related functions\n\n\n\n\n\n\nDefined functions\n\n\n\n\nbeta, log-beta\nincomplete-beta, regularized-beta\n\n\n\n\nBeta function\nbeta \\(B(p,q)\\) function, defined also for negative non-integer p and q.\n\\[B(p,q) = \\int_0^1 t^{p-1}(1-t)^{q-1}\\,dt = \\frac{\\Gamma(p)\\Gamma(q)}{\\Gamma(p+q)}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/beta 2 3) ;; =&gt; 0.08333333333333334\n(special/beta -1.2 0.1) ;; =&gt; 4.750441365819471\n(special/beta -1.2 -0.1) ;; =&gt; -15.574914582341846\n\n\n\n\nlog-beta is log of \\(B(p,q)\\) for positive p and q\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/log-beta 2 3) ;; =&gt; -2.4849066497880004\n(special/log-beta 2 3) ;; =&gt; -2.4849066497880004\n(m/log (special/beta 2 3)) ;; =&gt; -2.4849066497880004\n\n\n\n\n\nIncomplete and regularized\nincomplete-beta \\(B(x,a,b)\\) and regularized-beta \\(I_x(a,b)\\). Both are defined also for negative non-integer a and b.\n\\[B(x,a,b)=\\int_0^x t^{a-1}(1-t)^{b-1}\\,dt\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/incomplete-beta 0.5 0.1 0.2) ;; =&gt; 9.789912164505285\n(special/incomplete-beta 0.5 -0.1 -0.2) ;; =&gt; -9.707992848052843\n\n\n\n\\[I_x(a,b)=\\frac{B(x,a,b)}{B(a,b)}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/regularized-beta 0.99 -0.5 -0.7) ;; =&gt; 12.086770426418143\n(special/regularized-beta 0.01 0.5 0.5) ;; =&gt; 0.06376856085851987",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#bessel",
    "href": "special.html#bessel",
    "title": "Special functions",
    "section": "Bessel",
    "text": "Bessel\n\nBessel functions of the first (\\(J_\\alpha\\)) and the second (\\(Y_\\alpha\\)) kind\nModified Bessel functions of the first (\\(I_\\alpha\\)) and the second (\\(K_\\alpha\\)) kind\nSpherical Bessel functions of the first (\\(j_\\alpha\\)) and the second (\\(y_\\alpha\\)) kind\nModified spherical Bessel functions of the first (\\(i_\\alpha^{(1)}\\), \\(i_\\alpha^{(2)}\\)) and the second (\\(k_\\alpha\\)) kind\nSombrero function jinc\n\n\n\n\n\n\n\nDefined functions\n\n\n\n\nbessel-J0, bessel-J1, bessel-J, jinc\nbessel-Y0, bessel-Y1, bessel-Y\nbessel-I0, bessel-I1, bessel-I\nbessel-K0, bessel-K1, bessel-K, bessel-K-half-odd\nspherical-bessel-j0, spherical-bessel-j1, spherical-bessel-j2,spherical-bessel-j\nspherical-bessel-y0, spherical-bessel-y1, spherical-bessel-y2,spherical-bessel-y\nspherical-bessel-1-i0, spherical-bessel-1-i1, spherical-bessel-1-i2,spherical-bessel-1-i\nspherical-bessel-2-i0, spherical-bessel-2-i1, spherical-bessel-2-i2,spherical-bessel-2-1\nspherical-bessel-k0, spherical-bessel-k1, spherical-bessel-k2,spherical-bessel-k\n\n\n\n\nBessel J, j\nBessel functions of the first kind, bessel-J \\(J_\\alpha(x)\\). bessel-J0 and bessel-J1 are functions of orders 0 and 1. An order should be integer for negative arguments.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/bessel-J0 2.3) ;; =&gt; 0.055539784445602064\n(special/bessel-J1 2.3) ;; =&gt; 0.5398725326043137\n(special/bessel-J 2.1 3) ;; =&gt; 0.4761626361699597\n(special/bessel-J -3 -3.2) ;; =&gt; 0.3430663764006682\n(special/bessel-J 3 -3.2) ;; =&gt; -0.3430663764006682\n(special/bessel-J -3.1 -3.2) ;; =&gt; ##NaN\n(special/bessel-J 3.1 -3.2) ;; =&gt; ##NaN\n\n\n\n\nSpherical Bessel functions of the first kind spherical-bessel-j \\(j_\\alpha(x)\\), spherical-bessel-j0, spherical-bessel-j1 and spherical-bessel-j2 are functions of orders 0,1 and 2. Functions are defined for positive argument (only functions with orders 0, 1 and 2 accept non positive argument).\n\\[j_\\alpha(x)=\\sqrt{\\frac{\\pi}{2x}}J_{\\alpha+\\frac{1}{2}}(x)\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/spherical-bessel-j0 2.3) ;; =&gt; 0.3242196574681393\n(special/spherical-bessel-j1 2.3) ;; =&gt; 0.43065029510781005\n(special/spherical-bessel-j2 2.3) ;; =&gt; 0.23749811875943916\n(special/spherical-bessel-j 3.1 3.2) ;; =&gt; 0.1579561007291703\n(special/spherical-bessel-j -3.1 3.2) ;; =&gt; 0.12796785869167607\n\n\n\n\nadditional jinc (sombrero) function is defined as:\n\\[\\operatorname{jinc}(x)=\\frac{2J_1(\\pi x)}{\\pi x}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/jinc 0.0) ;; =&gt; 1.0\n(special/jinc -2.3) ;; =&gt; 0.01707103495964295\n(special/jinc 2.3) ;; =&gt; 0.01707103495964295\n\n\n\n\n\nBessel Y, y\nBessel functions of the second kind, bessel-Y, \\(Y_\\alpha(x)\\). bessel-Y0 and bessel-Y1 are functions of orders 0 and 1. They are defined for positive argument only and any order.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/bessel-Y0 2.3) ;; =&gt; 0.5180753962076221\n(special/bessel-Y1 2.3) ;; =&gt; 0.05227731584422471\n(special/bessel-Y 2 2.3) ;; =&gt; -0.47261686069090497\n(special/bessel-Y -2.1 2.3) ;; =&gt; -0.36752629274516924\n(special/bessel-Y 3 -1) ;; =&gt; ##NaN\n\n\n\n\nSpherical Bessel functions of the second kind spherical-bessel-y \\(y_\\alpha(x)\\), spherical-bessel-y0, spherical-bessel-y1 and spherical-bessel-y2 are functions of orders 0,1 and 2. Functions are defined for positive argument.\n\\[y_\\alpha(x)=\\sqrt{\\frac{\\pi}{2x}}Y_{\\alpha+\\frac{1}{2}}(x)\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/spherical-bessel-j0 2.3) ;; =&gt; 0.3242196574681393\n(special/spherical-bessel-j1 2.3) ;; =&gt; 0.43065029510781005\n(special/spherical-bessel-j2 2.3) ;; =&gt; 0.23749811875943916\n(special/spherical-bessel-j 3.1 3.2) ;; =&gt; 0.1579561007291703\n(special/spherical-bessel-j -3.1 3.2) ;; =&gt; 0.12796785869167607\n\n\n\n\n\nBessel I, i\nModified Bessel functions of the first kind, bessel-I, \\(I_\\alpha(x)\\), bessel-I0 and bessel-I1 are functions of orders 0 and 1. An order should be integer for negative arguments.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/bessel-I0 2.3) ;; =&gt; 2.8296056006275854\n(special/bessel-I1 2.3) ;; =&gt; 2.097800027517421\n(special/bessel-I 2 2.3) ;; =&gt; 1.0054316636559146\n(special/bessel-I -2.1 2.3) ;; =&gt; 0.9505851207098388\n(special/bessel-I -3 -1) ;; =&gt; -0.0221684249243319\n(special/bessel-I -3.1 -1) ;; =&gt; ##NaN\n\n\n\n\nTwo modfified spherical Bessel functions of the first kind spherical-bessel-1-i \\(i_\\alpha^{(1)}(x)\\) and spherical-bessel-2-i \\(i_\\alpha^{(2)}(x)\\). spherical-bessel-1-i0, spherical-bessel-1-i1, spherical-bessel-1-i2, spherical-bessel-2-i0, spherical-bessel-2-i1 and spherical-bessel-2-i2 are functions of orders 0,1 and 2. Functions are defined for positive argument.\n\\[i_\\alpha^{(1)}(x)=\\sqrt{\\frac{\\pi}{2x}}I_{\\alpha+\\frac{1}{2}}(x)\\] \\[i_\\alpha^{(2)}(x)=\\sqrt{\\frac{\\pi}{2x}}I_{-\\alpha-\\frac{1}{2}}(x)\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\\(i_\\alpha^{(1)}\\)\n\n(special/spherical-bessel-1-i0 2.3) ;; =&gt; 2.1465051328460687\n(special/spherical-bessel-1-i1 2.3) ;; =&gt; 1.256832833227258\n(special/spherical-bessel-1-i2 2.3) ;; =&gt; 0.5071579590713844\n(special/spherical-bessel-1-i 3.1 3.2) ;; =&gt; 0.48382455936204793\n(special/spherical-bessel-1-i -3.1 3.2) ;; =&gt; 1.271418391309527\n\n\\(i_\\alpha^{(2)}\\)\n\n(special/spherical-bessel-2-i0 2.3) ;; =&gt; 2.1900959344646793\n(special/spherical-bessel-2-i1 2.3) ;; =&gt; 1.1942895091657733\n(special/spherical-bessel-2-i2 2.3) ;; =&gt; 0.6323270094658442\n(special/spherical-bessel-2-i 3.1 3.2) ;; =&gt; 0.42032145323101916\n(special/spherical-bessel-2-i -3.1 3.2) ;; =&gt; 1.2425414548936577\n\n\n\n\n\nBessel K, k\nModified Bessel functions of the second kind, bessel-K, \\(K_\\alpha(x)\\), bessel-K0 and bessel-K1 are functions of orders 0 and 1. They are defined for positive argument only and any order.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/bessel-K0 2.3) ;; =&gt; 0.07913993300209364\n(special/bessel-K1 2.3) ;; =&gt; 0.09498244384536267\n(special/bessel-K 2 2.3) ;; =&gt; 0.1617333624328438\n(special/bessel-K -2.1 2.3) ;; =&gt; 0.17365527243516982\n(special/bessel-K 3 -1) ;; =&gt; ##NaN\n\n\n\n\nAdditionally bessel-K-half-odd function is optimized version for order of the half of odd integer, ie 1/2, 3/2, 5/2 and so on. First argument is an odd numerator.\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n[(special/bessel-K-half-odd 1 2.3) (special/bessel-K 0.5 2.3)] ;; =&gt; [0.0828549981836159 0.0828549981836159]\n[(special/bessel-K-half-odd 3 2.3) (special/bessel-K 1.5 2.3)] ;; =&gt; [0.11887891043736196 0.11887891043736196]\n[(special/bessel-K-half-odd 5 2.3) (special/bessel-K 2.5 2.3)] ;; =&gt; [0.23791444658017497 0.23791444658017497]\n\n\n\n\nModified spherical Bessel functions of the second kind spherical-bessel-k \\(k_\\alpha(x)\\), spherical-bessel-k0, spherical-bessel-k1 and spherical-bessel-k2 are functions of orders 0,1 and 2. Functions are defined for positive argument.\n\\[k_\\alpha(x)=\\sqrt{\\frac{\\pi}{2x}}K_{\\alpha+\\frac{1}{2}}(x)\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/spherical-bessel-k0 2.3) ;; =&gt; 0.06847227106455815\n(special/spherical-bessel-k1 2.3) ;; =&gt; 0.09824282370132256\n(special/spherical-bessel-k2 2.3) ;; =&gt; 0.19661508458802238\n(special/spherical-bessel-k 3.1 3.2) ;; =&gt; 0.10488382566292166\n(special/spherical-bessel-k -3.1 3.2) ;; =&gt; 0.047694101111715716",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#erf",
    "href": "special.html#erf",
    "title": "Special functions",
    "section": "Erf",
    "text": "Erf\n\n\n\n\n\n\nDefined functions\n\n\n\n\nerf, erfc\ninv-erf, inv-erfc\n\n\n\nError functions\n\\[\\operatorname{erf}(x)=\\frac{2}{\\sqrt\\pi}\\int_0^x e^{-t^2}\\,dt\\] \\[\\operatorname{erfc}(x)=1-\\operatorname{erf}(x)\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhen two arguments are passed, difference between erf of two values is calculated \\(\\operatorname{erf}(x_2)-\\operatorname{erf}(x_1)\\)\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/erf 0.4) ;; =&gt; 0.4283923550466685\n(special/erfc 0.4) ;; =&gt; 0.5716076449533315\n[(special/erf 0.5 0.4) (- (special/erf 0.4) (special/erf 0.5))] ;; =&gt; [-0.09210752276637812 -0.09210752276637812]\n\n\n\n\nInverse of error functions.\n\ninv-erf - inverse of erf defined on \\((-1,1)\\)\ninv-erfc- inverse of erfc defined on \\((0,2)\\)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/inv-erf 0.42839235504666856) ;; =&gt; 0.4\n(special/inv-erfc (- 1 0.42839235504666856)) ;; =&gt; 0.4000000000000001",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#airy",
    "href": "special.html#airy",
    "title": "Special functions",
    "section": "Airy",
    "text": "Airy\nAiry functions and derivatives\n\n\n\n\n\n\nDefined functions\n\n\n\n\nairy-Ai, airy-Bi\nairy-Ai' airy-Bi'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/airy-Ai 2.3) ;; =&gt; 0.02183199318062265\n(special/airy-Bi 2.3) ;; =&gt; 4.885061581835644\n(special/airy-Ai' 2.3) ;; =&gt; -0.03517312272081809\n(special/airy-Bi' 2.3) ;; =&gt; 6.709740812723825",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#integrals",
    "href": "special.html#integrals",
    "title": "Special functions",
    "section": "Integrals",
    "text": "Integrals\nTrigonometric, exponential and logarithmic integrals\n\n\n\n\n\n\nDefined functions\n\n\n\n\nSi, si, Ci, Cin\nE0, E1, Ei, Ein, En\nli, Li (offset)\n\n\n\n\nTrigonometric\nSine and cosine integrals\n\\[\\operatorname{Si}(x)=\\int_0^x\\frac{\\sin t}{t}\\, dt\\] \\[\\operatorname{si}(x)=-\\int_x^\\infty\\frac{\\sin t}{t}\\, dt = \\operatorname{Si}(x)-\\frac{\\pi}{2}\\] \\[\\operatorname{Ci}(x)=-\\int_x^\\infty\\frac{\\cos t}{t}\\, dt\\] \\[\\operatorname{Cin}(x)=\\int_0^x\\frac{1-\\cos t}{t}\\, dt = \\gamma + \\ln x- \\operatorname{Ci}(x)\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/Si 0.5) ;; =&gt; 0.49310741804306674\n(special/si 0.5) ;; =&gt; -1.0776889087518298\n(special/Ci 0.5) ;; =&gt; -0.17778407880661298\n(special/Cin 0.5) ;; =&gt; 0.06185256314820056\n\n\n\n\n\nExponential\nExponential integrals\n\\[E_0(x)=\\frac{e^{-x}}{x}\\] \\[E_1(x)=\\int_x^\\infty\\frac{e^{-t}}{t}\\,dt\\] \\[E_i(x)=-\\int_{-x}^\\infty\\frac{e^{-t}}{t}\\,dt\\] \\[E_{in}(x)=\\int_0^x\\frac{1-e^{-t}}{t}\\,dt\\] \\[E_n(x)=\\int_1^\\infty\\frac{e^{-xt}}{t^n}\\,dt\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/E0 0.6) ;; =&gt; 0.9146860601567108\n(special/E1 0.6) ;; =&gt; 0.4543795031894021\n(special/Ei 0.6) ;; =&gt; 0.7699269875786519\n(special/Ein 0.6) ;; =&gt; 0.5207695443249443\n(special/En 2 0.6) ;; =&gt; 0.2761839341803851\n(special/En -2 0.6) ;; =&gt; 9.04522881710525\n\n\n\n\n\nLogarithmic\nLogarithmic integrals\n\\[\\operatorname{li}(x)=\\int_0^x\\frac{dt}{\\ln t}\\] \\[\\operatorname{Li}(x)=\\int_2^x\\frac{dt}{\\ln t}=\\operatorname{li}(x)-\\operatorname{li}(2)\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/li 0.5) ;; =&gt; -0.378671043061088\n(special/Li 0.5) ;; =&gt; -1.423834823178581",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#zeta",
    "href": "special.html#zeta",
    "title": "Special functions",
    "section": "Zeta",
    "text": "Zeta\nZeta function and related\n\n\n\n\n\n\nDefined functions\n\n\n\n\nzeta - Riemann and Hurwitz zeta\nxi - Riemann (Landau) xi\neta - Dirichlet eta\ndirichlet-beta - Dirichlet beta\n\n\n\n\nRiemann zeta\n\\[\\zeta(s)=\\sum_{n=1}^\\infty\\frac{1}{n^s}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/zeta 0.0) ;; =&gt; -0.5\n(special/zeta 2.2) ;; =&gt; 1.4905432565068941\n(special/zeta -2.2) ;; =&gt; 0.0048792123593036025\n\n\n\n\n\nHurwitz zeta\n\\[\\zeta(s,z)=\\sum_{n=1}^\\infty\\frac{1}{(n+z)^s}\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/zeta 0.0 3) ;; =&gt; -2.5\n(special/zeta 2.2 3) ;; =&gt; 0.27290561568286237\n(special/zeta -2.2 3) ;; =&gt; -5.589914207628901\n(special/zeta 2.2 -3) ;; =&gt; 2.7973744041931727\n(special/zeta -2.2 -3) ;; =&gt; 16.811251088887037\n(special/zeta 0.0 -3) ;; =&gt; 2.5\n\n\n\n\n\nxi\nLandau’s Xi function, symmetrical along \\(x=0.5\\)\n\\[\\xi(s)=\\frac{1}{2}s(s-1)\\pi^{-\\frac{s}{2}}\\Gamma\\left(\\frac{s}{2}\\right)\\zeta(s)\\] \\[\\xi(s)=\\xi(1-s)\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/xi 0.0) ;; =&gt; 0.5\n(special/xi 3.5) ;; =&gt; 0.6111280074951515\n(special/xi (- 1.0 3.5)) ;; =&gt; 0.6111280074951515\n\n\n\n\n\neta\nDirichlet eta function\n\\[\\eta(s)=\\sum_{n=1}^\\infty\\frac{(-1)^{n-1}}{n^s}=(1-2^{1-s})\\zeta(s)\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/eta 0.0) ;; =&gt; 0.5\n(special/eta 3.5) ;; =&gt; 0.927553577773949\n(special/eta -3.5) ;; =&gt; -0.09604760404512332\n\n\n\n\n\nbeta\nDirichlet (Catalan) beta function\n\\[\\beta(s)=\\sum_{n=0}^\\infty\\frac{(-1)^n}{(2n+1)^s}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/dirichlet-beta 0.0) ;; =&gt; 0.5\n(special/dirichlet-beta 3.5) ;; =&gt; 0.9814025112714404\n(special/dirichlet-beta -3.5) ;; =&gt; 1.0708860161983005",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#hypergeometric",
    "href": "special.html#hypergeometric",
    "title": "Special functions",
    "section": "Hypergeometric",
    "text": "Hypergeometric\nSelection of hypergeometric functions \\({}_pF_q\\)\n\\[{{}_{p}F_{q}}\\left({a_{1},\\dots,a_{p}\\atop b_{1},\\dots,b_{q}};x\\right)=\\sum_{k=0}^{\\infty}\\frac{{\\left(a_{1}\\right)_{k}}\\cdots{\\left(a_{p}\\right)_{k}}}{{\\left(b_{1}\\right)_{k}}\\cdots{\\left(b_{q}\\right)_{k}}}\\frac{x^{k}}{k!}.\\]\nwhere \\((a_p)_k\\) and \\((b_q)_k\\) are kth rising factorials\n\n\n\n\n\n\nDefined functions\n\n\n\n\nhypergeometric-pFq, hypergeometric-pFq-ratio\nhypergeometric-0F0, hypergeometric-0F1, hypergeometric-0F2\nhypergeometric-1F0, hypergeometric-1F1\nhypergeometric-2F0, hypergeometric-2F1\nkummers-M, tricomis-U\nwhittaker-M, whittaker-W\n\n\n\nFunctions are implemented using various recursive formulas, Maclaurin series and Weniger acceleration.\n\npFq, generalized\nTwo implementations of general \\({}_pF_q\\) hypergeometric functions using Maclaurin series. One implementation operates on doubles (hypergeometric-pFq), second on Clojure ratio type which is accurate but slow (hypergeometric-pFq-ratio).\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-2F0 0.1 0.1 0.01) ;; =&gt; 1.0001006141146784\n(special/hypergeometric-pFq [0.1 0.1] [] 0.01) ;; =&gt; 1.0001006141146789\n(special/hypergeometric-pFq-ratio [0.1 0.1] [] 0.01) ;; =&gt; 1.000100614114679\n\n\n\nBoth functions accept optional max-iters parameter to control number of iterations.\nEvery implementation but ratio is unstable. Take a look at the example of \\({}_1F_1(-50;3;19.5)\\), only ratio version gives a valid result.\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-1F1 -50 3 19.5) ;; =&gt; 864.8061702264724\n(special/hypergeometric-pFq [-50] [3] 19.5) ;; =&gt; -1072.5532046613325\n(special/hypergeometric-pFq-ratio [-50] [3] 19.5) ;; =&gt; -1.195066852171838\n\n\n\nFollowing plot shows stable (but slow) implementation hypergeometric-pFq-ratio vs unstable (but fast) hypergeometric-1F1 and Maclaurin seriers hypergeometric-pFq.\n\n\n\n\n\n0F0, exp\n\\({}_0F_0\\) is simply exponential function.\n\\[{}_0F_0(;;x)=\\sum_{k=0}^\\infty\\frac{x^k}{k!}=e^x\\]\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-0F0 2.3) ;; =&gt; 9.97418245481472\n(m/exp 2.3) ;; =&gt; 9.97418245481472\n\n\n\n\n\n0F1\n\\({}_0F_1\\) is called confluent hypergeometric limit function.\n\\[{}_0F_1(;a;x)=\\sum_{k=0}^\\infty\\frac{x^k}{(a)_k k!}=\n\\begin{cases}\n1.0 & x=0 \\\\\n\\frac{J_{a-1}\\left(2\\sqrt{|x|}\\right)\\Gamma(a)}{|x|^\\frac{a-1}{2}} & x&lt;0 \\\\\n\\frac{I_{a-1}\\left(2\\sqrt{|x|}\\right)\\Gamma(a)}{|x|^\\frac{a-1}{2}} & x&gt;0\n\\end{cases}\n\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-pFq-ratio [] [-0.5] -2) ;; =&gt; -0.08000465565839093\n(special/hypergeometric-0F1 -0.5 -2) ;; =&gt; -0.08000465565839159\n\n\n\n\n\n0F2\n\\[{}_0F_2(;a,b;x)=\\sum_{k=0}^\\infty\\frac{x^k}{(a)_k(b)_k k!}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-pFq-ratio [] [-0.5 0.5] -2) ;; =&gt; 0.1239850666953995\n(special/hypergeometric-0F2 -0.5 0.5 -2) ;; =&gt; 0.12398506669539959\n\n\n\n\n\n1F0\n\\[{}_1F_0(a;;x)=\\sum_{k=0}^\\infty\\frac{(a)_k x^k}{k!}=(1-x)^{-a}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-pFq-ratio [0.5] [] -0.5) ;; =&gt; 0.8164965809277258\n(special/hypergeometric-1F0 0.5 -0.5) ;; =&gt; 0.816496580927726\n\n\n\n\n\n1F1, M\nConfluent hypergeometric function of the first kind, Kummer’s M.\n\\[{}_1F_1(a;b;x)=M(a,b,x)=\\sum_{k=0}^\\infty\\frac{(a)_k x^k}{(b)_k k!}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-pFq-ratio [0.5] [1] -0.5) ;; =&gt; 0.7910171621397194\n(special/hypergeometric-1F1 0.5 1 -0.5) ;; =&gt; 0.7910171621397188\n(special/kummers-M 0.5 1 -0.5) ;; =&gt; 0.7910171621397188\n\n\n\n\n\n2F0, U\n\\({}_2F_0\\) is related to the confluent hypergeometric function of the second kind, Tricomi’s U\n\\[{}_2F_0(a,b;;x)=\\sum_{k=0}^\\infty\\frac{(a)_k (b)_k x^k}{k!}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-pFq-ratio [0.1 -0.1] [] 0.01) ;; =&gt; 0.9998994982635961\n(special/hypergeometric-2F0 0.1 -0.1 0.01) ;; =&gt; 0.9998994982635958\n(special/hypergeometric-2F0 0.1 -0.1 1.2) ;; =&gt; 0.987133788261332\n\n\n\n\n\\[U(a,b,x) \\sim x^{-a}{}_2F_0(a,b;;-\\frac{1}{x})\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/tricomis-U 0.5 0.2 0.1) ;; =&gt; 1.090844545544952\n(special/tricomis-U -0.5 0.2 0.1) ;; =&gt; 0.5507462877526579\n\n\n\n\n\n2F1, Gauss\nGauss’ hypergeometric function \\({}_2F_1\\).\n\\[{}_2F_1(a,b;c;x)=\\sum_{k=0}^\\infty\\frac{(a)_k (b)_k x^k}{(c)_k k!}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/hypergeometric-pFq-ratio [1.1 -0.1] [0.2] 0.5) ;; =&gt; 0.5254580717634016\n(special/hypergeometric-2F1 1.1 -0.1 0.2 0.5) ;; =&gt; 0.5254580717633999\n\n\n\n\n\nWhittaker M and W\nModified hypergeometric functions by Whittaker\n\\[M_{\\kappa,\\mu}\\left(x\\right)=e^{-\\frac{1}{2}x}x^{\\frac{1}{2}+\\mu}M\\left(\\tfrac{1}{2}+\\mu-\\kappa,1+2\\mu,x\\right)\\] \\[W_{\\kappa,\\mu}\\left(x\\right)=e^{-\\frac{1}{2}x}x^{\\frac{1}{2}+\\mu}U\\left(\\tfrac{1}{2}+\\mu-\\kappa,1+2\\mu,x\\right)\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/whittaker-M 0.3 0.4 1.2) ;; =&gt; 1.0250053521045672\n(special/whittaker-W 0.3 0.4 1.2) ;; =&gt; 0.6219095691834272",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#other",
    "href": "special.html#other",
    "title": "Special functions",
    "section": "Other",
    "text": "Other\n\n\n\n\n\n\nDefined functions\n\n\n\n\nlambert-W (\\(W_0\\)), lambert-W-1 (\\(W_{-1}\\))\nharmonic-number\nminkowski - \\(?(x)\\)\n\n\n\n\nLambert W\nLambert W is a function for which \\(W(xe^x)=x\\). There are two branches \\(W_0\\) (lambert-W) and \\(W_{-1}\\) (lambert-W-1).\n\\[\n\\begin{align}\nW_0(xe^x)=x & \\text{ for } x\\ge -1 \\\\\nW_{-1}(xe^x)=x & \\text{ for } x\\le -1\n\\end{align}\n\\]\ndomain of functions\n\\[\n\\begin{align}\nW_0(t) & \\text{ for } t\\in(-1/e,\\infty) \\\\\nW_{-1}(t) & \\text{ for } t\\in(-1/e,0)\n\\end{align}\n\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/lambert-W m/E) ;; =&gt; 1.0\n(special/lambert-W (* 2.3 (m/exp 2.3))) ;; =&gt; 2.3\n(special/lambert-W-1 (* -2 (m/exp -2))) ;; =&gt; -2.0\n\n\n\n\n\nHarmonic H\nHarmonic numbers\n\\[H_n=\\int_0^1\\frac{1-x^n}{1-x}\\,dx=\\operatorname{digamma}(x+1)+\\gamma\\]\nFor non-negative integers\n\\[H_n=\\sum_{k=1}^n\\frac{1}{k}\\]\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/harmonic-number 2) ;; =&gt; 1.5\n(special/harmonic-number 2.5) ;; =&gt; 1.680372305546776\n(special/harmonic-number 3) ;; =&gt; 1.8333333333333335\n(special/harmonic-number -0.5) ;; =&gt; -1.3862943611198908\n\n\n\n\nGeneralized harmonic numbers for \\(m\\neq0\\) or \\(m\\neq1\\)\n\\[H_{n,m}=\\zeta(m)-\\zeta(m,n+1)\\] \\[H_{n,0}=n\\text{, }H_{n,1}=H_n\\]\nFor non-negative integer n\n\\[H_{n,m}=\\sum_{k=1}^n\\frac{1}{k^m}\\]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/harmonic-number 2.2 -0.5) ;; =&gt; 2.737173754376224\n(special/harmonic-number 2.2 0.5) ;; =&gt; 1.8306098144389147\n\n\n\n\n\nMinowski\nMinkowski’s question mark \\(?(x)\\) function.\n\n\n\n\n\n\n\n\n\nExamples\n\n\n\n\n(special/minkowski 0.5) ;; =&gt; 0.5\n[(special/minkowski 0.2) (- 1.0 (special/minkowski 0.8))] ;; =&gt; [0.0625 0.0625]\n[(special/minkowski (/ 0.5 1.5)) (/ (special/minkowski 0.5) 2)] ;; =&gt; [0.25 0.25]",
    "crumbs": [
      "Special functions"
    ]
  },
  {
    "objectID": "special.html#reference",
    "href": "special.html#reference",
    "title": "Special functions",
    "section": "Reference",
    "text": "Reference\n\nfastmath.special\nSpecial functions for real arguments and value.\n\nBessel J, Y, jinc\nModified Bessel I, K\nSpherical Bessel j, y\nModified spherical Bessel i1, i2, k\nGamma, log, digamma, trigamma, polygamma, regularized, lower/upper incomplete\nBeta, log, regularized, incomplete\nErf, inverse\nAiry A, B with derivatives\nZeta (Riemann, Hurwitz), Eta (Dirichlet), Xi (Landau), Beta (Dirichlet)\nIntegrals: Si, Ci, li/Li, Ei, En, Ein\nHypergeometric 0F0, 0F1, 1F0, 1F1, 2F1, 2F0, 0F2, pFq, Kummers M, Tricomis U, Whittaker M and W\nLambert W (0 and -1)\nMinkowski\nHarmonic H\n\n\n\nCi\n\n(Ci x)\n\nCosine integral\nsource\n\n\n\nCin\n\n(Cin x)\n\nCosine integral, alternative definition\nsource\n\n\n\nE0\n\n(E0 x)\n\nExponential integral E0\nsource\n\n\n\nE1\n\n(E1 x)\n\nExponential integral E1 for positive real numbers\nsource\n\n\n\nEi\n\n(Ei x)\n\nExponential integral\nsource\n\n\n\nEin\n\n(Ein x)\n\nExponential integral, alternative definition\nsource\n\n\n\nEn\n\n(En n x)\n\nGeneralized exponential integral En\nsource\n\n\n\nLi\n\n(Li x)\n\nOffset logarythmic integral\nsource\n\n\n\nSi\n\n(Si x)\n\nSine integral\nsource\n\n\n\nairy-Ai\n\n(airy-Ai x)\n\nAiry Ai function\nsource\n\n\n\nairy-Ai’\n\n(airy-Ai' x)\n\nFirst derivative of the Airy Ai function\nsource\n\n\n\nairy-Bi\n\n(airy-Bi x)\n\nAiry Bi function\nsource\n\n\n\nairy-Bi’\n\n(airy-Bi' x)\n\nFirst derivative of the Airy Bi function\nsource\n\n\n\nbessel-I\n\n(bessel-I order x)\n\nModified Bessel function of the first kind of order v, I_v(x)\nsource\n\n\n\nbessel-I0\n\n(bessel-I0 x)\n\nModified Bessel function of the first kind of order 0, I_0(x)\nsource\n\n\n\nbessel-I1\n\n(bessel-I1 x)\n\nModified Bessel function of the first kind of order 1, I_0(x)\nsource\n\n\n\nbessel-J\n\n(bessel-J order x)\n\nBessel function of the first kind of order v, J_v(x)\nsource\n\n\n\nbessel-J0\n\n(bessel-J0 x)\n\nBessel function of the first kind of order 0, J_0(x)\nsource\n\n\n\nbessel-J1\n\n(bessel-J1 x)\n\nBessel function of the first kind of order 1, J_1(x)\nsource\n\n\n\nbessel-K\n\n(bessel-K order x)\n\nModified Bessel function of the second kind and real order v, K_v(x)\nsource\n\n\n\nbessel-K-half-odd\n\n(bessel-K-half-odd odd-numerator x)\n\nBessel K_a function for a = order/2\nFunction accepts only odd integers for order\nsource\n\n\n\nbessel-K0\n\n(bessel-K0 x)\n\nModified Bessel function of the second kind of order 0, K_0(x)\nsource\n\n\n\nbessel-K1\n\n(bessel-K1 x)\n\nModified Bessel function of the second kind of order 1, K_1(x)\nsource\n\n\n\nbessel-Y\n\n(bessel-Y order x)\n\nBessel function of the second kind of order v, Y_v(x)\nsource\n\n\n\nbessel-Y0\n\n(bessel-Y0 x)\n\nBessel function of the second kind of order 0, Y_0(x)\nsource\n\n\n\nbessel-Y1\n\n(bessel-Y1 x)\n\nBessel function of the second kind of order 1, Y_1(x)\nsource\n\n\n\nbeta\n\n(beta p q)\n\nBeta function\nsource\n\n\n\ndigamma\n\n(digamma x)\n\nFirst derivative of log of Gamma function.\nsource\n\n\n\ndirichlet-beta\n\n(dirichlet-beta x)\n\nDirichlet Beta function\nsource\n\n\n\nerf\n\n(erf x)\n(erf x1 x2)\n\nError function.\nFor two arguments returns a difference between (erf x2) and (erf x1).\nsource\n\n\n\nerfc\n\n(erfc x)\n\nComplementary error function.\nsource\n\n\n\neta\n\n(eta x)\n\nDirichlet Eta function\nsource\n\n\n\ngamma\n\n(gamma x)\n\nGamma function \\(\\Gamma(x)\\). Extension of the factorial.\nsource\n\n\n\nharmonic-number\n\n(harmonic-number n)\n(harmonic-number n m)\n\nHarmonic number H_n or generalized harmonic number H_n,m\nsource\n\n\n\nhypergeometric-0F0\n\n(hypergeometric-0F0 x)\n\nHypergeometric ₀F₀ function, exp(x)\nsource\n\n\n\nhypergeometric-0F1\n\n(hypergeometric-0F1 a x)\n\nConfluent hypergeometric ₀F₁ limit function.\nsource\n\n\n\nhypergeometric-0F2\n\n(hypergeometric-0F2 a b x)\n\nGeneralized hypergeometric ₀F₂ function.\nsource\n\n\n\nhypergeometric-1F0\n\n(hypergeometric-1F0 a x)\n\nHypergeometric ₁F₀ function.\nsource\n\n\n\nhypergeometric-1F1\n\n(hypergeometric-1F1 a b x)\n\nConfluent hypergeometric ₁F₁ function of the first kind, Kummer’s M.\nsource\n\n\n\nhypergeometric-2F0\n\n(hypergeometric-2F0 a b x)\n\nGeneralized hypergeometric ₂F₀ function.\nsource\n\n\n\nhypergeometric-2F1\n\n(hypergeometric-2F1 a b c x)\n\nGauss’s hypergeometric ₂F₁ function.\nsource\n\n\n\nhypergeometric-pFq\n\n(hypergeometric-pFq ps qs z)\n(hypergeometric-pFq ps qs z max-iters)\n\nhypergeometric-pFq using MacLaurin series.\nmax-iters is set to 1000000 by default.\nsource\n\n\n\nhypergeometric-pFq-ratio\n\n(hypergeometric-pFq-ratio ps qs z)\n(hypergeometric-pFq-ratio ps qs z max-iters)\n\nHypergeometric-pFq using MacLaurin series on ratios. Can be very slow.\nmax-iters is set to 10000 by default.\nsource\n\n\n\nincomplete-beta\n\n(incomplete-beta x a b)\n\nIncomplete Beta B(x,a,b)\nsource\n\n\n\ninv-erf\n\n(inv-erf x)\n\nInverse of erf function.\nsource\n\n\n\ninv-erfc\n\n(inv-erfc x)\n\nInverse of erfc function.\nsource\n\n\n\ninv-gamma-1pm1\n\n(inv-gamma-1pm1 x)\n\n\\(\\frac{1}{\\Gamma(1+x)}-1\\) for \\(-0.5≤x≤1.5\\).\nsource\n\n\n\njinc\n\n(jinc x)\n\nBesselj1 devided by x\nsource\n\n\n\nkummers-M\n\n(kummers-M a b x)\n\nKummer’s (confluent hypergeometric, 1F1) function for real arguments.\nsource\n\n\n\nlambert-W\n\n(lambert-W x)\n\nLambert W_0 function. W(xe^x)=x for x&gt;=-1.0.\nsource\n\n\n\nlambert-W-1\n\n(lambert-W-1 x)\n\nLambert W_1 function. W_1(xe^x)=x for x&lt;=-1.0.\nsource\n\n\n\nli\n\n(li x)\n\nLogarythmic integral\nsource\n\n\n\nlog-beta\n\n(log-beta p q)\n\nLogarithm of Beta function.\nsource\n\n\n\nlog-gamma\n\n(log-gamma x)\n\nLog of Gamma function \\(\\log\\Gamma(x)\\).\nsource\n\n\n\nlog-gamma-1p\n\n(log-gamma-1p x)\n\n\\(\\ln\\Gamma(1+x)\\) for \\(-0.5≤x≤1.5\\).\nsource\n\n\n\nlower-incomplete-gamma\n\n(lower-incomplete-gamma s x)\n\nLower incomplete gamma function\nsource\n\n\n\nminkowski\n\n(minkowski x)\n\nMinkowski’s question mark function ?(x)\nsource\n\n\n\npolygamma\n\n(polygamma m x)\n\nPolygamma function of order m and real argument.\nsource\n\n\n\nregularized-beta\n\n(regularized-beta x a b)\n\nRegularized Beta I_x(a,b)\nsource\n\n\n\nregularized-gamma-p\n\n(regularized-gamma-p a x)\n\nRegularized gamma P(a,x)\nsource\n\n\n\nregularized-gamma-q\n\n(regularized-gamma-q a x)\n\nRegularized gamma Q(a,x)\nsource\n\n\n\nsi\n\n(si x)\n\nSine integral, Si shifted by -pi/2\nsource\n\n\n\nspherical-bessel-1-i\n\n(spherical-bessel-1-i order x)\n\nFirst modified spherical Bessel function of the first kind.\nsource\n\n\n\nspherical-bessel-1-i0\n\n(spherical-bessel-1-i0 x)\n\nFirst modified spherical Bessel function of the first kind and order 0.\nsource\n\n\n\nspherical-bessel-1-i1\n\n(spherical-bessel-1-i1 x)\n\nFirst modified spherical Bessel function of the first kind and order 1.\nsource\n\n\n\nspherical-bessel-1-i2\n\n(spherical-bessel-1-i2 x)\n\nFirst modified spherical Bessel function of the first kind and order 2.\nsource\n\n\n\nspherical-bessel-2-i\n\n(spherical-bessel-2-i order x)\n\nSecond modified spherical Bessel function of the first kind.\nsource\n\n\n\nspherical-bessel-2-i0\n\n(spherical-bessel-2-i0 x)\n\nSecond modified spherical Bessel function of the first kind and order 0.\nsource\n\n\n\nspherical-bessel-2-i1\n\n(spherical-bessel-2-i1 x)\n\nSecond modified spherical Bessel function of the first kind and order 1.\nsource\n\n\n\nspherical-bessel-2-i2\n\n(spherical-bessel-2-i2 x)\n\nSecond modified spherical Bessel function of the first kind and order 2.\nsource\n\n\n\nspherical-bessel-j\n\n(spherical-bessel-j order x)\n\nSpherical Bessel function of the first kind.\nsource\n\n\n\nspherical-bessel-j0\n\n(spherical-bessel-j0 x)\n\nSpherical Bessel function of the first kind and order 0.\nsource\n\n\n\nspherical-bessel-j1\n\n(spherical-bessel-j1 x)\n\nSpherical Bessel function of the first kind and order 1.\nsource\n\n\n\nspherical-bessel-j2\n\n(spherical-bessel-j2 x)\n\nSpherical Bessel function of the first kind and order 2.\nsource\n\n\n\nspherical-bessel-k\n\n(spherical-bessel-k order x)\n\nModified spherical Bessel function of the second kind.\nsource\n\n\n\nspherical-bessel-k0\n\n(spherical-bessel-k0 x)\n\nModified spherical Bessel function of the second kind and order 0.\nsource\n\n\n\nspherical-bessel-k1\n\n(spherical-bessel-k1 x)\n\nModified spherical Bessel function of the second kind and order 1.\nsource\n\n\n\nspherical-bessel-k2\n\n(spherical-bessel-k2 x)\n\nModified spherical Bessel function of the second kind and order 2.\nsource\n\n\n\nspherical-bessel-y\n\n(spherical-bessel-y order x)\n\nSpherical Bessel function of the second kind.\nsource\n\n\n\nspherical-bessel-y0\n\n(spherical-bessel-y0 x)\n\nSpherical Bessel function of the second kind and order 0.\nsource\n\n\n\nspherical-bessel-y1\n\n(spherical-bessel-y1 x)\n\nSpherical Bessel function of the second kind and order 1.\nsource\n\n\n\nspherical-bessel-y2\n\n(spherical-bessel-y2 x)\n\nSpherical Bessel function of the second kind and order 2.\nsource\n\n\n\ntricomis-U\n\n(tricomis-U a b x)\n\nConfluent hypergeometric function U of the second kind.\nsource\n\n\n\ntrigamma\n\n(trigamma x)\n\nSecond derivative of log of Gamma function.\nsource\n\n\n\nupper-incomplete-gamma\n\n(upper-incomplete-gamma s x)\n\nUpper incomplete gamma function\nsource\n\n\n\nwhittaker-M\n\n(whittaker-M kappa mu x)\n\nWhittaker’s M\nsource\n\n\n\nwhittaker-W\n\n(whittaker-W kappa mu x)\n\nWhittaker’s W\nsource\n\n\n\nxi\n\n(xi s)\n\nRiemann (Landau’s) Xi function\nsource\n\n\n\nzeta\n\n(zeta s)\n(zeta s z)\n\nRiemann and Hurwitz zeta functions for real arguments\nsource\n\nsource: clay/special.clj",
    "crumbs": [
      "Special functions"
    ]
  }
]