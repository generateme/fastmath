---
format:
  html:
    toc: true
    toc-depth: 5
    theme: [cosmo, ../../clay/custom.scss]
    toc-location: right
    anchor-sections: true
    reference-location: margin
    fontsize: 0.9em
    output-file: core.html
code-block-background: true

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="core_files/md-default46.js" type="text/javascript"></script><script src="core_files/md-default47.js" type="text/javascript"></script>

# Core {.unnumbered}

Collection of type hinted math macros and functions. Partially backed by Java static functions and exposed as macros. They are prepared to accept primitive long or double arguments and return long or double only.

There is a possibility to replace `clojure.core` functions with a selection of `fastmath.core` macros. Call:

* `(m/use-primitive-operators)` to replace functions with macros
* `(m/unuse-primitive-operators)` to revert replacement.

Be aware that there are some differences and `fastmath.core` versions shoudn't be treated as a drop-in replacement for `clojure.core` versions. Also, since Clojure 1.12, always call `unuse-primitive-operators` at the end of the namespace.

Here is the complete list of replaced functions:

* `* + - /`
* `> < >= <= ==`
* `rem quot mod`
* `bit-or bit-and bit-xor bit-not bit-and-not`
* `bit-shift-left bit-shift-right unsigned-bit-shift-right`
* `bit-set bit-clear bit-flip bit-test`
* `inc dec`
* `zero? neg? pos? even? odd?`
* `min max`
* `abs`


::: {.sourceClojure}
```clojure
(require '[fastmath.core :as m])
```
:::



## Basic operations

Basic math operations.

When used in an expression oprations are inlined and can accept mixture of `long` and `double` values. If all values are of `long` primitive type, `long` is returned, `double` otherwise.

When used in higher order function, `double` is returned always. To operate on `long` primitive type, reach for `long-` versions.

::: {.callout-tip title="Defined functions"}
* `+`, `-`, `*`, `/`, `quot`
* `inc`, `dec`
* `min`, `max`, `smooth-max`, `constrain`
* `rem`, `mod`, `remainder`, `wrap`
* `abs`

`long` versions

* `long-add`, `long-sub`, `long-mult`, `long-div`, `long-quot`
* `long-inc`, `long-dec`
* `long-min`, `long-max`
* `long-rem`, `long-mod`
* `long-abs`
:::


### Arithmetics

* addition, incrementation
* subtraction, decrementation
* multiplication
* division
* absolute value

::: {.callout-warning title="Division differences"}
Please note that there some differences between division in `fastmath` and `clojure.core`

* when called with one argument (`double` or `long`) `m//` always returns reciprocal (`clojure.core//` returns a ratio)
* when called on `long` arguments, `m//` is a long division (`clojure.core//` returns a ratio)
* `m//` for two `long` arguments is equivalent to `m/quot`
:::

::: {.callout-note title="Examples"}

Addition


::: {.sourceClojure}
```clojure
(m/+) ;; => 0.0
(m/+ 1 2 3 4) ;; => 10
(m/+ 1.0 2.5 3 4) ;; => 10.5
(reduce m/+ [1 2 3]) ;; => 6.0
```
:::



::: {.sourceClojure}
```clojure
(m/long-add) ;; => 0
(m/long-add 1 2 3 4) ;; => 10
(m/long-add 1.0 2.5 3 4) ;; => 10
(reduce m/long-add [1 2 3.5]) ;; => 6
```
:::


Subtraction


::: {.sourceClojure}
```clojure
[(m/- 1) (m/- 1.0)] ;; => [-1 -1.0]
(m/- 1 2 3 4) ;; => -8
(m/- 1.0 2.5 3 4) ;; => -8.5
(reduce m/- [1 2 3]) ;; => -4.0
```
:::



::: {.sourceClojure}
```clojure
(m/long-sub 1) ;; => -1
(m/long-sub 1 2 3 4) ;; => -8
(m/long-sub 1.0 2.5 3 4) ;; => -8
(reduce m/long-sub [1 2 3.5]) ;; => -4
```
:::


Multiplication


::: {.sourceClojure}
```clojure
(m/*) ;; => 1.0
(m/* 1 2 3 4) ;; => 24
(m/* 1.0 2.5 3 4) ;; => 30.0
(reduce m/* [1 2 3]) ;; => 6.0
```
:::



::: {.sourceClojure}
```clojure
(m/long-mult) ;; => 1
(m/long-mult 1 2 3 4) ;; => 24
(m/long-mult 1.0 2.5 3 4) ;; => 24
(reduce m/long-mult [1 2 3.5]) ;; => 6
```
:::


Division


::: {.sourceClojure}
```clojure
[(m// 2) (m// 2) (/ 2)] ;; => [0.5 0.5 1/2]
(m// 1 2 3 4) ;; => 0
(m// 1.0 2.5 3 4) ;; => 0.03333333333333333
(reduce m// [1 2 3]) ;; => 0.16666666666666666
(m/quot 10.5 -3) ;; => -3.0
```
:::



::: {.sourceClojure}
```clojure
(m/long-div 2) ;; => 0.5
(m/long-div 100 5 3) ;; => 6
(m/long-div 100.5 2.5 3) ;; => 16
(reduce m/long-div [100 2 3.5]) ;; => 16
(m/long-quot 10 -3) ;; => -3
```
:::


Increment and decrement


::: {.sourceClojure}
```clojure
(m/inc 4) ;; => 5
(m/inc 4.5) ;; => 5.5
(m/dec 4) ;; => 3
(m/dec 4.5) ;; => 3.5
(map m/inc [1 2 3.5 4.5]) ;; => (2.0 3.0 4.5 5.5)
```
:::



::: {.sourceClojure}
```clojure
(m/long-inc 4) ;; => 5
(m/long-inc 4.5) ;; => 5
(m/long-dec 4) ;; => 3
(m/long-dec 4.5) ;; => 3
(map m/long-inc [1 2 3.5 4.5]) ;; => (2 3 4 5)
```
:::


Absolute value


::: {.sourceClojure}
```clojure
(m/abs -3) ;; => 3
(m/long-abs -3) ;; => 3
(m/abs -3.5) ;; => 3.5
(m/long-abs -3.5) ;; => 3
```
:::


:::


### Remainders

* `rem` and `mod` are the same as in `clojure.core`,
* `remainder` returns $dividend - divisor * n$, where $n$ is the mathematical integer closest to $\frac{dividend}{divisor}$. Returned value is inside the $[\frac{-|divisor|}{2},\frac{|divisor|}{2}]$ range.
* `wrap` wraps the value to be within given interval (right open) $[a,b)$ `

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/0.png" /></td><td><img class="clay-image" src="core_files/1.png" /></td></tr><tr><td><img class="clay-image" src="core_files/2.png" /></td><td><img class="clay-image" src="core_files/3.png" /></td></tr></tbody></table>
```

:::


::: {.callout-note title="Examples"}


::: {.sourceClojure}
```clojure
(m/mod 10 4) ;; => 2
(m/mod -10.25 4.0) ;; => 1.75
(m/mod 10.25 -4.0) ;; => -1.75
(m/mod -10.25 -4.0) ;; => -2.25
(m/rem 10 4) ;; => 2
(m/rem -10.25 4.0) ;; => -2.25
(m/rem 10.25 -4.0) ;; => 2.25
(m/rem -10.25 -4.0) ;; => -2.25
(m/remainder 10 4) ;; => 2.0
(m/remainder -10.25 4.0) ;; => 1.75
(m/remainder 10.25 -4.0) ;; => -1.75
(m/remainder -10.25 -4.0) ;; => 1.75
(m/wrap -1.25 1.25 1.0) ;; => 1.0
(m/wrap -1.25 1.25 1.35) ;; => -1.15
(m/wrap -1.25 1.25 -1.25) ;; => -1.25
(m/wrap -1.25 1.25 1.25) ;; => -1.25
(m/wrap [-1.25 1.25] -1.35) ;; => 1.15
```
:::


:::


### Min, max, constrain

Constrain is a macro which is equivalent to `(max (min value mx) mn)`

::: {.callout-note title="Examples"}


::: {.sourceClojure}
```clojure
(m/min 1 2 -3) ;; => -3
(m/min 1.0 2 -3) ;; => -3.0
(m/max 1 2 -3) ;; => 2
(m/max 1.0 2 -3) ;; => 2.0
(m/constrain 10 -1 1) ;; => 1
(m/constrain -10 -1 1) ;; => -1
(m/constrain 0 -1 1) ;; => 0
```
:::


:::


#### Smooth maximum

Smooth maximum is a family of functions $\max_\alpha(xs)$ for which $\lim_{\alpha\to\infty}\max_\alpha(xs)=\max(xs)$. 

Five types of smooth maximum are defined (see [wikipedia](https://en.wikipedia.org/wiki/Smooth_maximum) for formulas):

* `:lse` - LogSumExp (default)
* `:boltzmann` - Boltzmann operator, works for small alpha values
* `:mellowmax`
* `:p-norm`
* `:smu` - smooth maximum unit, $\epsilon=\frac{1}{\alpha}$

`:lse`, `:boltzmann` and `:mellowmax` are also smooth minimum for negative $\alpha$ values.

The following plots show value of the smooth max for different $\alpha$ and set of the numbers equal to `[-3.5 -2 -1 0.1 3 4]`. Blue dashed horizontal lines are minimum (-3.5) and maximum values (4.0).

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/4.png" /></td><td><img class="clay-image" src="core_files/5.png" /></td></tr><tr><td><img class="clay-image" src="core_files/6.png" /></td></tr></tbody></table>
```

:::


The following plots are defined only for positive $\alpha$.

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/7.png" /></td><td><img class="clay-image" src="core_files/8.png" /></td></tr></tbody></table>
```

:::


::: {.callout-note title="Examples"}


::: {.sourceClojure}
```clojure
(m/smooth-max [-3.5 -2 -1 0.1 3 4] 4.0 :lse) ;; => 4.004537523710555
(m/smooth-max [-3.5 -2 -1 0.1 3 4] -4.0 :lse) ;; => -3.500630381944282
(m/smooth-max [-3.5 -2 -1 0.1 3 4] 4.0 :boltzmann) ;; => 3.9820131397304284
(m/smooth-max [-3.5 -2 -1 0.1 3 4] -4.0 :boltzmann) ;; => -3.496176019710726
(m/smooth-max [-3.5 -2 -1 0.1 3 4] 4.0 :mellowmax) ;; => 3.5565976564035413
(m/smooth-max [-3.5 -2 -1 0.1 3 4] -4.0 :mellowmax) ;; => -3.0526905146372685
(m/smooth-max [-3.5 -2 -1 0.1 3 4] 4.0 :p-norm) ;; => 4.738284340366858
(m/smooth-max [-3.5 -2 -1 0.1 3 4] 4.0 :smu) ;; => 4.060190281957045
```
:::


:::


### fma

Fused multiply-add $fma(a,b,c)=a+bc$ is the operation implemented with better accuracy in Java 9+ and as one instruction (see more [here](https://en.wikipedia.org/wiki/Multiply%E2%80%93accumulate_operation#Fused_multiply%E2%80%93add) and [here](https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html#fma-double-double-double-)). When Java 8 is used `fma` is replaced with direct `a+bc` formula.

::: {.callout-tip title="Defined functions"}
* `fma`, `muladd`, `negmuladd`
* `difference-of-products`, `sum-of-products`
:::

$$\operatorname{fma}(a,b,c)=\operatorname{muladd}(a,b,c)=a+bc$$
$$\operatorname{negmuladd}(a,b,c)=\operatorname{fma}(-a,b,c)$$

`difference-of-products` (dop) and `sum-of-products` (sop) are using Kahan's algorithm to avoid [catastrophic cancellation](https://en.wikipedia.org/wiki/Catastrophic_cancellation).

$$\operatorname{dop}(a,b,c,d)=ab-cd=\operatorname{fma}(a,b,-cd)+\operatorname{fma}(-c,d,cd)$$
$$\operatorname{sop}(a,b,c,d)=ab+cd=\operatorname{fma}(a,b,cd)+\operatorname{fma}(c,d,-cd)$$

The following example shows that $x^2-y^2$ differs from the best floating point approximation which is equal `1.8626451518330422e-9`.


::: {.sourceClojure}
```clojure
(let [x (m/inc (m/pow 2 -29))
      y (m/inc (m/pow 2 -30))]
  {:proper-value (m/difference-of-products x x y y)
   :wrong-value (m/- (m/* x x) (m/* y y))})
```
:::



::: {.printedClojure}
```clojure
{:proper-value 1.8626451518330422E-9, :wrong-value 1.862645149230957E-9}

```
:::


::: {.callout-note title="Examples"}


::: {.sourceClojure}
```clojure
(m/fma 3 4 5) ;; => 17.0
(m/muladd 3 4 5) ;; => 17.0
(m/negmuladd 3 4 5) ;; => -7.0
(m/difference-of-products 3 3 4 4) ;; => -7.0
(m/sum-of-products 3 3 4 4) ;; => 25.0
```
:::


:::


## Rounding

Various rounding functions.

::: {.callout-tip title="Defined functions"}
* `floor`, `ceil`
* `round`, `round-even`, `rint`, `approx`, `trunc`, `itrunc`
* `qfloor`, `qceil`, `qround`
* `frac`, `sfrac`
* `round-up-pow2`
:::

* `floor`, `ceil` and `rint` accept additional argument, `scale`, which allows to round to the nearest multiple of scale.
* `round` returns `long` while `rint` returns `double`
* `round-even` performs IEEE / IEC rounding (even-odd or bankers' rounding)
* `approx` rounds number to the given number of digits, uses `bigdec`
* `trunc` returns integer part of a number, `frac` returns fractional part
* `trunc` returns `double` while `itrunc` returns long
* `sfrac` keeps sign of the argument
* `qfloor`, `qceil` and `qround` are implemented using casting to `long`
* `round-up-pow2` rounds to the lowest power of 2 greater than an argument, $2^{\left\lceil{\log_2{x}}\right\rceil}$, returns `long`.

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/9.png" /></td><td><img class="clay-image" src="core_files/10.png" /></td></tr><tr><td><img class="clay-image" src="core_files/11.png" /></td><td><img class="clay-image" src="core_files/12.png" /></td></tr><tr><td><img class="clay-image" src="core_files/13.png" /></td><td><img class="clay-image" src="core_files/14.png" /></td></tr></tbody></table>
```

:::


::: {.callout-note title="Examples"}


::: {.sourceClojure}
```clojure
(map m/floor [-10.5 10.5]) ;; => (-11.0 10.0)
(m/floor 10.5 4.0) ;; => 8.0
(map m/ceil [-10.5 10.5]) ;; => (-10.0 11.0)
(m/ceil 10.5 4.0) ;; => 12.0
(map m/rint [-10.51 -10.5 -10.49 10.49 10.5 10.51]) ;; => (-11.0 -10.0 -10.0 10.0 10.0 11.0)
(m/rint 10.5 4.0) ;; => 12.0
(m/rint 10.591 0.1) ;; => 10.600000000000001
(map m/round [-10.51 -10.5 -10.49 10.49 10.5 10.51]) ;; => (-11 -10 -10 10 11 11)
(map m/round-even [-10.51 -10.5 -10.49 10.49 10.5 10.51]) ;; => (-11 -10 -10 10 10 11)
(map m/qfloor [-10.5 10.5]) ;; => (-11 10)
(map m/qceil [-10.5 10.5]) ;; => (-10 11)
(map m/qround [-10.51 -10.5 -10.49 10.49 10.5 10.51]) ;; => (-11 -11 -10 10 11 11)
(map m/trunc [-10.591 10.591]) ;; => (-10.0 10.0)
(map m/itrunc [-10.591 10.591]) ;; => (-10 10)
(m/approx 10.591) ;; => 10.59
(m/approx 10.591 1) ;; => 10.6
(m/approx 10.591 0) ;; => 11.0
(m/approx -10.591) ;; => -10.59
(m/approx -10.591 1) ;; => -10.6
(m/approx -10.591 0) ;; => -11.0
(map m/frac [-10.591 10.591]) ;; => (0.5909999999999993 0.5909999999999993)
(map m/sfrac [-10.591 10.591]) ;; => (-0.5909999999999993 0.5909999999999993)
(map m/round-up-pow2 (range 10)) ;; => (0 1 2 4 4 8 8 8 8 16)
```
:::


The difference between `rint` and `round`. `round` is bounded by minimum and maximum `long` values.


::: {.sourceClojure}
```clojure
(m/rint 1.23456789E30) ;; => 1.23456789E30
(m/round 1.23456789E30) ;; => 9223372036854775807
```
:::


:::


## Sign

Sign of the number.

::: {.callout-tip title="Defined functions"}
* `signum` and `sgn`
* `copy-sign`
:::

$$\operatorname{signum}(x)=\begin{cases}
-1 & x<0 \\
1 & x>0 \\
0 & x=0
\end{cases}$$

$$\operatorname{sgn}(x)=\begin{cases}
-1 & x<0 \\
1 & x\geq 0
\end{cases}$$

`copy-sign` sets the sign of the second argument to the first. Please note that `-0.0` is negative and `0.0` is positive.

$$\operatorname{copy-sign}(x,y)=\begin{cases}
|x| & y>0 \lor y=0.0\\
-|x| & y<0 \lor y=-0.0
\end{cases}$$

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/15.png" /></td><td><img class="clay-image" src="core_files/16.png" /></td></tr></tbody></table>
```

:::


::: {.callout-note title="Examples"}


::: {.sourceClojure}
```clojure
(m/signum -2.5) ;; => -1.0
(m/signum 2.5) ;; => 1.0
(m/sgn -2.5) ;; => -1.0
(m/sgn 2.5) ;; => 1.0
(m/signum 0) ;; => 0.0
(m/sgn 0) ;; => 1.0
(m/copy-sign 123 -10) ;; => -123.0
(m/copy-sign -123 10) ;; => 123.0
(m/copy-sign 123 -0.0) ;; => -123.0
(m/copy-sign -123 0.0) ;; => 123.0
```
:::


:::


## Predicates

Various predicates and comparison functions

::: {.callout-tip title="Defined functions"}
* `==`, `eq`, `not==`, `<`, `>`, `<=`, `>=`
* `approx-eq`, `approx=`, `delta-eq`, `delta=`
* `zero?`, `negative-zero?`, `near-zero?`, `one?`
* `neg?`, `pos?`, `not-neg?`, `not-pos?`
* `even?`, `odd?`
* `integer?`
* `nan?`, `inf?`, `pos-inf?`, `neg-inf?`, `invalid-double?`, `valid-double?`
* `between?`, `between-?`
:::


## Trigonometry

::: {.callout-tip title="Defined functions"}
* `sin`, `cos`, `tan`, `cot`, `sec`, `csc`
* `qsin`, `qcos`
* `sinpi`, `cospi`, `tanpi`, `cotpi`, `secpi`, `cscpi`
* `asin`, `acos`, `atan`, `atan2`, `acot`, `asec`, `acsc`
* `sinh`, `cosh`, `tanh`, `coth`, `sech`, `scsh`
* `asinh`, `acosh`, `atanh`, `acoth`, `asech`, `ascsh`
* `crd`, `acrd`
* `versin`, `coversin`, `vercos`, `covercos`
* `aversin`, `acoversin`, `avercos`, `acovercos`
* `haversin`, `hacoversin`, `havercos`, `hacovercos`
* `ahaversin`, `ahacoversin`, `ahavercos`, `ahacovercos`
* `exsec`, `excsc`
* `aexsec`, `aexcsc`
* `sinc`
:::

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/17.png" /></td><td><img class="clay-image" src="core_files/18.png" /></td></tr><tr><td><img class="clay-image" src="core_files/19.png" /></td><td><img class="clay-image" src="core_files/20.png" /></td></tr><tr><td><img class="clay-image" src="core_files/21.png" /></td><td><img class="clay-image" src="core_files/22.png" /></td></tr></tbody></table>
```

:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/23.png" /></td><td><img class="clay-image" src="core_files/24.png" /></td></tr><tr><td><img class="clay-image" src="core_files/25.png" /></td><td><img class="clay-image" src="core_files/26.png" /></td></tr></tbody></table>
```

:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/27.png" /></td><td><img class="clay-image" src="core_files/28.png" /></td></tr><tr><td><img class="clay-image" src="core_files/29.png" /></td><td><img class="clay-image" src="core_files/30.png" /></td></tr><tr><td><img class="clay-image" src="core_files/31.png" /></td><td><img class="clay-image" src="core_files/32.png" /></td></tr></tbody></table>
```

:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/33.png" /></td><td><img class="clay-image" src="core_files/34.png" /></td></tr><tr><td><img class="clay-image" src="core_files/35.png" /></td><td><img class="clay-image" src="core_files/36.png" /></td></tr><tr><td><img class="clay-image" src="core_files/37.png" /></td><td><img class="clay-image" src="core_files/38.png" /></td></tr></tbody></table>
```

:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="core_files/39.png" /></td><td><img class="clay-image" src="core_files/40.png" /></td></tr><tr><td><img class="clay-image" src="core_files/41.png" /></td><td><img class="clay-image" src="core_files/42.png" /></td></tr><tr><td><img class="clay-image" src="core_files/43.png" /></td><td><img class="clay-image" src="core_files/44.png" /></td></tr></tbody></table>
```

:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="core_files/45.png" />
```

:::



## Power and logarithms

::: {.callout-tip title="Defined functions"}
* `exp`, `exp2`, `exp10`, `qexp`
* `ln`, `log`, `logb`, `log2`, `log10`, `qlog`
* `expm1`, `exprel`, `xexpx`, `xexpy`, `cexpexp`, `expexp` 
* `log1p`, `log1pexp`, `log1mexp`, `log2mexp`, `log1psq`, `logexpm1`,`log1pmx`, `logmxp1`
* `xlogx`, `xlogy`, `xlog1py`, `cloglog`, `loglog`, `logcosh`
* `logaddexp`, `logsubexp`, `logsumexp`, `log2int`
* `sigmoid`, `logit`
* `sqrt`, `cbrt`, `sq`, `cb`
* `safe-sqrt`, `qsqrt`, `rqsqrt`
* `pow`, `spow`, `fpow`, `qpow`, `pow2`, `pow3`, `pow10`
* `low-2-exp`, `high-2-exp`, `low-exp`, `high-exp`
:::



## Bitwise operations

::: {.callout-tip title="Defined functions"}
* `bit-and`, `bit-or`, `bit-xor`,
* `bit-not`, `bit-nand`, `bit-nor`, `bit-xnor`, `bit-and-not`
* `bit-set`, `bit-clear`, `bit-flip`, `bit-test`
* `<<`, `bit-shift-left`, `>>`, `bit-shift-right`, `>>>`, `unsigned-bit-shift-right`
:::


## Floating point

::: {.callout-tip title="Defined functions"}
* `next-double`, `prev-double`, `ulp`
* `double-bits`, `double-high-bits`, `double-low-bits`, `bits->double`
* `double-exponent`, `double-significand`
:::


## Combinatorics

::: {.callout-tip title="Defined functions"}
* `factorial20`, `factorial`, `inv-factorial`, `log-factorial`
* `falling-factorial`, `falling-factorial-int`, `rising-factorial`, `rising-factorial-int`
* `combinations`, `log-combinations`
:::


## Rank and order

::: {.callout-tip title="Defined functions"}
* `rank`, `rank1`
* `order`
:::


## Interpolation and mapping

::: {.callout-tip title="Defined functions"}
* `norm`, `mnorm`, `cnorm`, `make-norm`
* `lerp`, `mlerp`
* `smoothstep`
* `cos-interpolation`, `smooth-interpolation`, `quad-interpolation`
:::


## Distance

::: {.callout-tip title="Defined functions"}
* `dist`, `qdist`, `hypot`, `hypot-sqrt`
* `haversine-dist`
:::


## Intervals

::: {.callout-tip title="Defined functions"}
* `slice-range`, `cut`
* `co-intervals`, `group-by-intervals`
:::


### Other

::: {.callout-tip title="Defined functions"}
* `gcd`, `lcm`
* `bool-not`, `bool-xor`, `xor`
* `identity-long`, `identity-double`
* `radians`, `degrees`
* `sample`
* `relative-error`, `absolute-error`
* `seq->double-array`, `seq->double-double-array`, `double-array->seq`, `double-double-array->seq`
* `use-primitive-operators`, `unuse-primitive-operators`
:::


## Constants

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>Constant symbol</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>-E</td><td>-2.718281828459045</td><td><span data-qmd="Value of $-\mathrm{e}$"></span></td></tr><tr><td>-HALF_PI</td><td>-1.5707963267948966</td><td><span data-qmd="Value of $\frac{\pi}{2}$"></span></td></tr><tr><td>-PI</td><td>-3.141592653589793</td><td><span data-qmd="Value of $-\pi$"></span></td></tr><tr><td>-QUARTER_PI</td><td>-0.7853981633974483</td><td><span data-qmd="Value of $\frac{\pi}{4}$"></span></td></tr><tr><td>-TAU</td><td>-6.283185307179586</td><td><span data-qmd="Value of $-2\pi$"></span></td></tr><tr><td>-THIRD_PI</td><td>1.0471975511965976</td><td><span data-qmd="Value of $\frac{\pi}{3}$"></span></td></tr><tr><td>-TWO_PI</td><td>-6.283185307179586</td><td><span data-qmd="Value of $-2\pi$"></span></td></tr><tr><td>CATALAN_G</td><td>0.915965594177219</td><td><span data-qmd="Catalan G"></span></td></tr><tr><td>E</td><td>2.718281828459045</td><td><span data-qmd="Value of $\mathrm{e}$"></span></td></tr><tr><td>EPSILON</td><td>1.0E-10</td><td><span data-qmd="$\varepsilon$, a small number"></span></td></tr><tr><td>FOUR_INV_PI</td><td>1.2732395447351628</td><td><span data-qmd="Value of $\frac{4}{\pi}$"></span></td></tr><tr><td>GAMMA</td><td>0.5772156649015329</td><td><span data-qmd="$\gamma$, Euler-Mascheroni constant"></span></td></tr><tr><td>HALF_PI</td><td>1.5707963267948966</td><td><span data-qmd="Value of $\frac{\pi}{2}$"></span></td></tr><tr><td>INV_FOUR_PI</td><td>0.07957747154594767</td><td><span data-qmd="Value of $\frac{2}{2\pi}$"></span></td></tr><tr><td>INV_LN2</td><td>1.4426950408889634</td><td><span data-qmd="Value of $\frac{1}{\ln{2}}$"></span></td></tr><tr><td>INV_LOG_HALF</td><td>-1.4426950408889634</td><td><span data-qmd="Value of $\frac{1}{\ln{\frac{1}{2}}}$"></span></td></tr><tr><td>INV_PI</td><td>0.3183098861837907</td><td><span data-qmd="Value of $\frac{1}{\pi}$"></span></td></tr><tr><td>INV_SQRT2PI</td><td>0.3989422804014327</td><td><span data-qmd="Value of $\frac{1}{\sqrt{2\pi}}$"></span></td></tr><tr><td>INV_SQRTPI</td><td>0.5641895835477563</td><td><span data-qmd="Value of $\frac{1}{\sqrt\pi}$"></span></td></tr><tr><td>INV_SQRT_2</td><td>0.7071067811865475</td><td><span data-qmd="Value of $\frac{1}{\sqrt{2}}$"></span></td></tr><tr><td>INV_TWO_PI</td><td>0.15915494309189535</td><td><span data-qmd="Value of $\frac{1}{2\pi}$"></span></td></tr><tr><td>LANCZOS_G</td><td>4.7421875</td><td><span data-qmd="Lanchos approximation of `g` constant"></span></td></tr><tr><td>LN10</td><td>2.302585092994046</td><td><span data-qmd="Value of $\ln{10}$"></span></td></tr><tr><td>LN2</td><td>0.6931471805599453</td><td><span data-qmd="Value of $\ln{2}$"></span></td></tr><tr><td>LN2_2</td><td>0.34657359027997264</td><td><span data-qmd="Value of $\frac{\ln{2}}{2}$"></span></td></tr><tr><td>LOG10E</td><td>0.4342944819032518</td><td><span data-qmd="$\log_{10}{\mathrm{e}}$"></span></td></tr><tr><td>LOG2E</td><td>1.4426950408889634</td><td><span data-qmd="$\log_{2}{\mathrm{e}}$"></span></td></tr><tr><td>LOG_HALF</td><td>-0.6931471805599453</td><td><span data-qmd="Value of $\ln{\frac{1}{2}}$"></span></td></tr><tr><td>LOG_PI</td><td>1.1447298858494002</td><td><span data-qmd="Value of $\ln{\pi}$"></span></td></tr><tr><td>LOG_TWO_PI</td><td>1.8378770664093453</td><td><span data-qmd="Value of $\ln{2\pi}$"></span></td></tr><tr><td>MACHINE-EPSILON</td><td>1.1102230246251565E-16</td><td><span data-qmd="$\frac{\operatorname{ulp}(1)}{2}$"></span></td></tr><tr><td>MACHINE-EPSILON10</td><td>1.1102230246251565E-15</td><td><span data-qmd="$5\operatorname{ulp}(1)$"></span></td></tr><tr><td>M_1_PI</td><td>0.3183098861837907</td><td><span data-qmd="Value of $\frac{1}{\pi}$"></span></td></tr><tr><td>M_2_PI</td><td>0.6366197723675814</td><td><span data-qmd="Value of $\frac{2}{\pi}$"></span></td></tr><tr><td>M_2_SQRTPI</td><td>1.1283791670955126</td><td><span data-qmd="Value of $\frac{2}{\sqrt\pi}$"></span></td></tr><tr><td>M_3PI_4</td><td>2.356194490192345</td><td><span data-qmd="Value of $\frac{3\pi}{4}$"></span></td></tr><tr><td>M_E</td><td>2.718281828459045</td><td><span data-qmd="Value of $\mathrm{e}$"></span></td></tr><tr><td>M_INVLN2</td><td>1.4426950408889634</td><td><span data-qmd="Value of $\frac{1}{\ln{2}}$"></span></td></tr><tr><td>M_IVLN10</td><td>0.43429448190325176</td><td><span data-qmd="Value of $\frac{1}{\ln{10}}$"></span></td></tr><tr><td>M_LN10</td><td>2.302585092994046</td><td><span data-qmd="Value of $\ln{10}$"></span></td></tr><tr><td>M_LN2</td><td>0.6931471805599453</td><td><span data-qmd="Value of $\ln{2}$"></span></td></tr><tr><td>M_LOG10E</td><td>0.4342944819032518</td><td><span data-qmd="Value of $\log_{10}{e}$"></span></td></tr><tr><td>M_LOG2E</td><td>1.4426950408889634</td><td><span data-qmd="Value of $\log_{2}{e}$"></span></td></tr><tr><td>M_LOG2_E</td><td>0.6931471805599453</td><td><span data-qmd="Value of $\ln{2}$"></span></td></tr><tr><td>M_PI</td><td>3.141592653589793</td><td><span data-qmd="Value of $\pi$"></span></td></tr><tr><td>M_PI_2</td><td>1.5707963267948966</td><td><span data-qmd="Value of $\frac{\pi}{2}$"></span></td></tr><tr><td>M_PI_4</td><td>0.7853981633974483</td><td><span data-qmd="Value of $\frac{\pi}{4}$"></span></td></tr><tr><td>M_SQRT1_2</td><td>0.7071067811865475</td><td><span data-qmd="Value of $\frac{1}{\sqrt{2}}$"></span></td></tr><tr><td>M_SQRT2</td><td>1.4142135623730951</td><td><span data-qmd="Value of $\sqrt{2}$"></span></td></tr><tr><td>M_SQRT3</td><td>1.7320508075688772</td><td><span data-qmd="Value of $\sqrt{3}$"></span></td></tr><tr><td>M_SQRT_PI</td><td>1.7724538509055159</td><td><span data-qmd="Value of $\sqrt\pi$"></span></td></tr><tr><td>M_TWOPI</td><td>6.283185307179586</td><td><span data-qmd="Value of $2\pi$"></span></td></tr><tr><td>ONE_SIXTH</td><td>0.16666666666666666</td><td><span data-qmd="Value of $\frac{1}{6}$"></span></td></tr><tr><td>ONE_THIRD</td><td>0.3333333333333333</td><td><span data-qmd="Value of $\frac{1}{3}$"></span></td></tr><tr><td>PHI</td><td>1.618033988749895</td><td><span data-qmd="Golden ratio $\phi$"></span></td></tr><tr><td>PI</td><td>3.141592653589793</td><td><span data-qmd="Value of $\pi$"></span></td></tr><tr><td>QUARTER_PI</td><td>0.7853981633974483</td><td><span data-qmd="Value of $\frac{\pi}{4}$"></span></td></tr><tr><td>SILVER</td><td>2.414213562373095</td><td><span data-qmd="Silver ratio $\delta_S$"></span></td></tr><tr><td>SIXTH</td><td>0.16666666666666666</td><td><span data-qmd="Value of $\frac{1}{6}$"></span></td></tr><tr><td>SQRT2</td><td>1.4142135623730951</td><td><span data-qmd="Value of $\sqrt{2}$"></span></td></tr><tr><td>SQRT2PI</td><td>2.5066282746310002</td><td><span data-qmd="Value of $\sqrt{2\pi}$"></span></td></tr><tr><td>SQRT2_2</td><td>0.7071067811865476</td><td><span data-qmd="Value of $\frac{\sqrt{2}}{2}$"></span></td></tr><tr><td>SQRT3</td><td>1.7320508075688772</td><td><span data-qmd="Value of $\sqrt{3}$"></span></td></tr><tr><td>SQRT3_2</td><td>0.8660254037844386</td><td><span data-qmd="Value of $\frac{\sqrt{3}}{2}$"></span></td></tr><tr><td>SQRT3_3</td><td>0.5773502691896257</td><td><span data-qmd="Value of $\frac{\sqrt{3}}{3}$"></span></td></tr><tr><td>SQRT3_4</td><td>0.4330127018922193</td><td><span data-qmd="Value of $\frac{\sqrt{3}}{4}$"></span></td></tr><tr><td>SQRT5</td><td>2.23606797749979</td><td><span data-qmd="Value of $\sqrt{5}$"></span></td></tr><tr><td>SQRTPI</td><td>1.7724538509055159</td><td><span data-qmd="Value of $\sqrt{\pi}$"></span></td></tr><tr><td>SQRT_2_PI</td><td>0.7978845608028654</td><td><span data-qmd="Value of $\sqrt{\frac{2}{\pi}}$"></span></td></tr><tr><td>SQRT_HALFPI</td><td>1.2533141373155001</td><td><span data-qmd="Value of $\sqrt{\frac{1}{2}\pi}$"></span></td></tr><tr><td>TAU</td><td>6.283185307179586</td><td><span data-qmd="Value of $2\pi$"></span></td></tr><tr><td>THIRD</td><td>0.3333333333333333</td><td><span data-qmd="Value of $\frac{1}{3}$"></span></td></tr><tr><td>THIRD_PI</td><td>1.0471975511965976</td><td><span data-qmd="Value of $\frac{\pi}{3}$"></span></td></tr><tr><td>TWO_INV_PI</td><td>0.6366197723675814</td><td><span data-qmd="Value of $\frac{2}{\pi}$"></span></td></tr><tr><td>TWO_PI</td><td>6.283185307179586</td><td><span data-qmd="Value of $2\pi$"></span></td></tr><tr><td>TWO_THIRD</td><td>0.6666666666666666</td><td><span data-qmd="Value of $\frac{2}{3}$"></span></td></tr><tr><td>TWO_THIRDS</td><td>0.6666666666666666</td><td><span data-qmd="Value of $\frac{2}{3}$"></span></td></tr><tr><td>deg-in-rad</td><td>0.017453292519943295</td><td><span data-qmd="$\frac{\pi}{180}$"></span></td></tr><tr><td>double-one-minus-epsilon</td><td>0.9999999999999999</td><td><span data-qmd="Value of 0x1.fffffffffffffp-1d = 0.(9)"></span></td></tr><tr><td>rad-in-deg</td><td>57.29577951308232</td><td><span data-qmd="$\frac{180}{\pi}$"></span></td></tr></tbody></table>
```

:::



## Reference

### fastmath.core

Collection of basic math functions and constants.

  Contains:
  
  * Basic math functions
  * Predicates
  * Bitwise operations
  * Trigonometry
  * Log/power
  * Floating point format operations
  * Factorial, combinations, gcd/lcd
  * Additional functions: sampling, rank, lerp

  Almost all math functions are backed by [FastMath](https://github.com/jeffhain/jafama) library. Almost all operates on primitive `double` and returns `double` or `long` and are inlined.

  #### Primitive math operators

  Inlined function operating on double/longs as a replacement of Clojure numerical tower: `*` `+` `-` `/` `>` `<` `>=` `<=` `==` `rem` `quot` `mod` `bit-or` `bit-and` `bit-xor` `bit-and-not` `bit-set` `bit-clear` `bit-test` `bit-flip` `bit-not` `bit-shift-left` `bit-shift-right` `unsigned-bit-shift-right` `inc` `dec` `zero?` `neg?` `pos?` `min` `max` `even?` `odd?` `abs`

  And additionally:

  * `<<` - bit shift left
  * `>>` - signed bit shift right
  * `>>>` - unsigned bit shift right
  * `not==` - not equal

  To turn on primitive math on your namespace call [use-primitive-operators](#LOS-use-primitive-operators).
  To turn off and revert original versions call [unuse-primitive-operators](#LOS-unuse-primitive-operators) which is recomended when Clojure 1.12+ is used.


```{=html}
<span id="#LOS-*"></span>
```


#### *

+ `(*)`
+ `(* a)`
+ `(* a b)`
+ `(* a b c)`
+ `(* a b c d)`
+ `(* a b c d & r)`

Primitive and inlined `*`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L128">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-+"></span>
```


#### +

+ `(+)`
+ `(+ a)`
+ `(+ a b)`
+ `(+ a b c)`
+ `(+ a b c d)`
+ `(+ a b c d & r)`

Primitive and inlined `+`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L82">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--"></span>
```


#### -

+ `(- a)`
+ `(- a b)`
+ `(- a b c)`
+ `(- a b c d)`
+ `(- a b c d & r)`

Primitive and inlined `-`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L106">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--E"></span>
```


#### -E ^~CONST~^

`-E = -2.718281828459045`

Value of $-\mathrm{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L661">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--HALF_PI"></span>
```


#### -HALF_PI ^~CONST~^

`-HALF_PI = -1.5707963267948966`

Value of $\frac{\pi}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L656">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--PI"></span>
```


#### -PI ^~CONST~^

`-PI = -3.141592653589793`

Value of $-\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L655">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--QUARTER_PI"></span>
```


#### -QUARTER_PI ^~CONST~^

`-QUARTER_PI = -0.7853981633974483`

Value of $\frac{\pi}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L658">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--TAU"></span>
```


#### -TAU ^~CONST~^

`-TAU = -6.283185307179586`

Value of $-2\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L660">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--THIRD_PI"></span>
```


#### -THIRD_PI ^~CONST~^

`-THIRD_PI = 1.0471975511965976`

Value of $\frac{\pi}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L657">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--TWO_PI"></span>
```


#### -TWO_PI ^~CONST~^

`-TWO_PI = -6.283185307179586`

Value of $-2\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L659">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-/"></span>
```


#### /

+ `(/ a)`
+ `(/ a b)`
+ `(/ a b c)`
+ `(/ a b c d)`
+ `(/ a b c d & r)`

Primitive and inlined `/`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L152">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&lt;"></span>
```


#### <

+ `(< _)`
+ `(< a b)`
+ `(< a b & r)`

Primitive math less-then function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L363">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&lt;&lt;"></span>
```


#### <<

+ `(<< x shift)`

Shift bits left


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L518">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&lt;="></span>
```


#### <=

+ `(<= _)`
+ `(<= a b)`
+ `(<= a b & r)`

Primitive math less-and-equal function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L385">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-=="></span>
```


#### ==

+ `(== _)`
+ `(== a b)`
+ `(== a b & r)`

Primitive math equality function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L342">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&gt;"></span>
```


#### >

+ `(> _)`
+ `(> a b)`
+ `(> a b & r)`

Primitive math greater-than function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L374">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&gt;="></span>
```


#### >=

+ `(>= _)`
+ `(>= a b)`
+ `(>= a b & r)`

Primitive math greater-and-equal function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L396">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&gt;&gt;"></span>
```


#### >>

+ `(>> x shift)`

Shift bits right and keep most significant bit unchanged


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L530">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&gt;&gt;&gt;"></span>
```


#### >>>

+ `(>>> x shift)`

Shift bits right and set most significant bit to `0`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L542">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-CATALAN_G"></span>
```


#### CATALAN_G ^~CONST~^

`CATALAN_G = 0.915965594177219`

Catalan G


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L670">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-E"></span>
```


#### E ^~CONST~^

`E = 2.718281828459045`

Value of $\mathrm{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L654">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-EPSILON"></span>
```


#### EPSILON ^~CONST~^

`EPSILON = 1.0E-10`

$\varepsilon$, a small number


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L667">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-FOUR_INV_PI"></span>
```


#### FOUR_INV_PI ^~CONST~^

`FOUR_INV_PI = 1.2732395447351628`

Value of $\frac{4}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L664">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-GAMMA"></span>
```


#### GAMMA ^~CONST~^

`GAMMA = 0.5772156649015329`

$\gamma$, Euler-Mascheroni constant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L668">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-HALF_PI"></span>
```


#### HALF_PI ^~CONST~^

`HALF_PI = 1.5707963267948966`

Value of $\frac{\pi}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L649">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_FOUR_PI"></span>
```


#### INV_FOUR_PI ^~CONST~^

`INV_FOUR_PI = 0.07957747154594767`

Value of $\frac{2}{2\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L666">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_LN2"></span>
```


#### INV_LN2 ^~CONST~^

`INV_LN2 = 1.4426950408889634`

Value of $\frac{1}{\ln{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1136">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_LOG_HALF"></span>
```


#### INV_LOG_HALF ^~CONST~^

`INV_LOG_HALF = -1.4426950408889634`

Value of $\frac{1}{\ln{\frac{1}{2}}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1139">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_PI"></span>
```


#### INV_PI ^~CONST~^

`INV_PI = 0.3183098861837907`

Value of $\frac{1}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L662">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_SQRT2PI"></span>
```


#### INV_SQRT2PI ^~CONST~^

`INV_SQRT2PI = 0.3989422804014327`

Value of $\frac{1}{\sqrt{2\pi}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1928">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_SQRTPI"></span>
```


#### INV_SQRTPI ^~CONST~^

`INV_SQRTPI = 0.5641895835477563`

Value of $\frac{1}{\sqrt\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1929">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_SQRT_2"></span>
```


#### INV_SQRT_2 ^~CONST~^

`INV_SQRT_2 = 0.7071067811865475`

Value of $\frac{1}{\sqrt{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1933">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_TWO_PI"></span>
```


#### INV_TWO_PI ^~CONST~^

`INV_TWO_PI = 0.15915494309189535`

Value of $\frac{1}{2\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L665">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LANCZOS_G"></span>
```


#### LANCZOS_G ^~CONST~^

`LANCZOS_G = 4.7421875`

Lanchos approximation of `g` constant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L669">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LN10"></span>
```


#### LN10 ^~CONST~^

`LN10 = 2.302585092994046`

Value of $\ln{10}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1138">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LN2"></span>
```


#### LN2 ^~CONST~^

`LN2 = 0.6931471805599453`

Value of $\ln{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1135">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LN2_2"></span>
```


#### LN2_2 ^~CONST~^

`LN2_2 = 0.34657359027997264`

Value of $\frac{\ln{2}}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1137">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG10E"></span>
```


#### LOG10E ^~CONST~^

`LOG10E = 0.4342944819032518`

$\log_{10}{\mathrm{e}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1414">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG2E"></span>
```


#### LOG2E ^~CONST~^

`LOG2E = 1.4426950408889634`

$\log_{2}{\mathrm{e}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1411">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG_HALF"></span>
```


#### LOG_HALF ^~CONST~^

`LOG_HALF = -0.6931471805599453`

Value of $\ln{\frac{1}{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1140">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG_PI"></span>
```


#### LOG_PI ^~CONST~^

`LOG_PI = 1.1447298858494002`

Value of $\ln{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1141">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG_TWO_PI"></span>
```


#### LOG_TWO_PI ^~CONST~^

`LOG_TWO_PI = 1.8378770664093453`

Value of $\ln{2\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1142">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-MACHINE-EPSILON"></span>
```


#### MACHINE-EPSILON ^~CONST~^

`MACHINE-EPSILON = 1.1102230246251565E-16`

$\frac{\operatorname{ulp}(1)}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L672">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-MACHINE-EPSILON10"></span>
```


#### MACHINE-EPSILON10 ^~CONST~^

`MACHINE-EPSILON10 = 1.1102230246251565E-15`

$5\operatorname{ulp}(1)$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L678">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_1_PI"></span>
```


#### M_1_PI ^~CONST~^

`M_1_PI = 0.3183098861837907`

Value of $\frac{1}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1925">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_2_PI"></span>
```


#### M_2_PI ^~CONST~^

`M_2_PI = 0.6366197723675814`

Value of $\frac{2}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1926">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_2_SQRTPI"></span>
```


#### M_2_SQRTPI ^~CONST~^

`M_2_SQRTPI = 1.1283791670955126`

Value of $\frac{2}{\sqrt\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1927">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_3PI_4"></span>
```


#### M_3PI_4 ^~CONST~^

`M_3PI_4 = 2.356194490192345`

Value of $\frac{3\pi}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1935">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_E"></span>
```


#### M_E ^~CONST~^

`M_E = 2.718281828459045`

Value of $\mathrm{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1917">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_INVLN2"></span>
```


#### M_INVLN2 ^~CONST~^

`M_INVLN2 = 1.4426950408889634`

Value of $\frac{1}{\ln{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1940">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_IVLN10"></span>
```


#### M_IVLN10 ^~CONST~^

`M_IVLN10 = 0.43429448190325176`

Value of $\frac{1}{\ln{10}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1938">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LN10"></span>
```


#### M_LN10 ^~CONST~^

`M_LN10 = 2.302585092994046`

Value of $\ln{10}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1921">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LN2"></span>
```


#### M_LN2 ^~CONST~^

`M_LN2 = 0.6931471805599453`

Value of $\ln{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1920">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LOG10E"></span>
```


#### M_LOG10E ^~CONST~^

`M_LOG10E = 0.4342944819032518`

Value of $\log_{10}{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1919">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LOG2E"></span>
```


#### M_LOG2E ^~CONST~^

`M_LOG2E = 1.4426950408889634`

Value of $\log_{2}{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1918">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LOG2_E"></span>
```


#### M_LOG2_E ^~CONST~^

`M_LOG2_E = 0.6931471805599453`

Value of $\ln{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1939">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_PI"></span>
```


#### M_PI ^~CONST~^

`M_PI = 3.141592653589793`

Value of $\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1922">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_PI_2"></span>
```


#### M_PI_2 ^~CONST~^

`M_PI_2 = 1.5707963267948966`

Value of $\frac{\pi}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1923">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_PI_4"></span>
```


#### M_PI_4 ^~CONST~^

`M_PI_4 = 0.7853981633974483`

Value of $\frac{\pi}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1924">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_SQRT1_2"></span>
```


#### M_SQRT1_2 ^~CONST~^

`M_SQRT1_2 = 0.7071067811865475`

Value of $\frac{1}{\sqrt{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1932">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_SQRT2"></span>
```


#### M_SQRT2 ^~CONST~^

`M_SQRT2 = 1.4142135623730951`

Value of $\sqrt{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1931">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_SQRT3"></span>
```


#### M_SQRT3 ^~CONST~^

`M_SQRT3 = 1.7320508075688772`

Value of $\sqrt{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1937">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_SQRT_PI"></span>
```


#### M_SQRT_PI ^~CONST~^

`M_SQRT_PI = 1.7724538509055159`

Value of $\sqrt\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1936">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_TWOPI"></span>
```


#### M_TWOPI ^~CONST~^

`M_TWOPI = 6.283185307179586`

Value of $2\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1934">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ONE_SIXTH"></span>
```


#### ONE_SIXTH ^~CONST~^

`ONE_SIXTH = 0.16666666666666666`

Value of $\frac{1}{6}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L686">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ONE_THIRD"></span>
```


#### ONE_THIRD ^~CONST~^

`ONE_THIRD = 0.3333333333333333`

Value of $\frac{1}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L682">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-PHI"></span>
```


#### PHI ^~CONST~^

`PHI = 1.618033988749895`

Golden ratio $\phi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1913">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-PI"></span>
```


#### PI ^~CONST~^

`PI = 3.141592653589793`

Value of $\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L648">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-QUARTER_PI"></span>
```


#### QUARTER_PI ^~CONST~^

`QUARTER_PI = 0.7853981633974483`

Value of $\frac{\pi}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L651">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SILVER"></span>
```


#### SILVER ^~CONST~^

`SILVER = 2.414213562373095`

Silver ratio $\delta_S$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1914">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SIXTH"></span>
```


#### SIXTH ^~CONST~^

`SIXTH = 0.16666666666666666`

Value of $\frac{1}{6}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L685">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT2"></span>
```


#### SQRT2 ^~CONST~^

`SQRT2 = 1.4142135623730951`

Value of $\sqrt{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1895">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT2PI"></span>
```


#### SQRT2PI ^~CONST~^

`SQRT2PI = 2.5066282746310002`

Value of $\sqrt{2\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1909">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT2_2"></span>
```


#### SQRT2_2 ^~CONST~^

`SQRT2_2 = 0.7071067811865476`

Value of $\frac{\sqrt{2}}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1896">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT3"></span>
```


#### SQRT3 ^~CONST~^

`SQRT3 = 1.7320508075688772`

Value of $\sqrt{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1899">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT3_2"></span>
```


#### SQRT3_2 ^~CONST~^

`SQRT3_2 = 0.8660254037844386`

Value of $\frac{\sqrt{3}}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1900">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT3_3"></span>
```


#### SQRT3_3 ^~CONST~^

`SQRT3_3 = 0.5773502691896257`

Value of $\frac{\sqrt{3}}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1901">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT3_4"></span>
```


#### SQRT3_4 ^~CONST~^

`SQRT3_4 = 0.4330127018922193`

Value of $\frac{\sqrt{3}}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1902">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT5"></span>
```


#### SQRT5 ^~CONST~^

`SQRT5 = 2.23606797749979`

Value of $\sqrt{5}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1905">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRTPI"></span>
```


#### SQRTPI ^~CONST~^

`SQRTPI = 1.7724538509055159`

Value of $\sqrt{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1908">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT_2_PI"></span>
```


#### SQRT_2_PI ^~CONST~^

`SQRT_2_PI = 0.7978845608028654`

Value of $\sqrt{\frac{2}{\pi}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1930">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT_HALFPI"></span>
```


#### SQRT_HALFPI ^~CONST~^

`SQRT_HALFPI = 1.2533141373155001`

Value of $\sqrt{\frac{1}{2}\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1910">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TAU"></span>
```


#### TAU ^~CONST~^

`TAU = 6.283185307179586`

Value of $2\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L653">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-THIRD"></span>
```


#### THIRD ^~CONST~^

`THIRD = 0.3333333333333333`

Value of $\frac{1}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L681">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-THIRD_PI"></span>
```


#### THIRD_PI ^~CONST~^

`THIRD_PI = 1.0471975511965976`

Value of $\frac{\pi}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L650">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TWO_INV_PI"></span>
```


#### TWO_INV_PI ^~CONST~^

`TWO_INV_PI = 0.6366197723675814`

Value of $\frac{2}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L663">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TWO_PI"></span>
```


#### TWO_PI ^~CONST~^

`TWO_PI = 6.283185307179586`

Value of $2\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L652">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TWO_THIRD"></span>
```


#### TWO_THIRD ^~CONST~^

`TWO_THIRD = 0.6666666666666666`

Value of $\frac{2}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L683">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TWO_THIRDS"></span>
```


#### TWO_THIRDS ^~CONST~^

`TWO_THIRDS = 0.6666666666666666`

Value of $\frac{2}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L684">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-abs"></span>
```


#### abs

+ `(abs x)`

Primitive and inlined version of abs.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1712">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-absolute-error"></span>
```


#### absolute-error

+ `(absolute-error v v-approx)`

Absolute error between two values


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2148">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acos"></span>
```


#### acos

+ `(acos x)`

acos(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L757">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acosh"></span>
```


#### acosh

+ `(acosh x)`

acosh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L793">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acot"></span>
```


#### acot

+ `(acot x)`

acot(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L857">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acoth"></span>
```


#### acoth

+ `(acoth x)`

Area hyperbolic cotangent


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L901">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acovercos"></span>
```


#### acovercos

+ `(acovercos x)`

Arc covercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L975">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acoversin"></span>
```


#### acoversin

+ `(acoversin x)`

Arc coversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L963">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acrd"></span>
```


#### acrd

+ `(acrd x)`

Inverse chord


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L927">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acsc"></span>
```


#### acsc

+ `(acsc x)`

acsc(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L869">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acsch"></span>
```


#### acsch

+ `(acsch v)`

Area hyperbolic cosecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L913">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-aexcsc"></span>
```


#### aexcsc

+ `(aexcsc x)`

Arc excosecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1056">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-aexsec"></span>
```


#### aexsec

+ `(aexsec x)`

Arc exsecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1050">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ahacovercos"></span>
```


#### ahacovercos

+ `(ahacovercos x)`

Arc hacovercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1032">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ahacoversin"></span>
```


#### ahacoversin

+ `(ahacoversin x)`

Arc hacoversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1020">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ahavercos"></span>
```


#### ahavercos

+ `(ahavercos x)`

Arc havecosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1026">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ahaversin"></span>
```


#### ahaversin

+ `(ahaversin x)`

Arc haversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1014">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-approx"></span>
```


#### approx

+ `(approx v)`
+ `(approx v digits)`

Round `v` to specified (default: 2) decimal places. Be aware of floating point number accuracy.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1740">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-approx-eq"></span>
```


#### approx-eq

+ `(approx-eq a b)`
+ `(approx-eq a b digits)`

Checks equality approximately. See [approx](#LOS-approx).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1745">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-approx="></span>
```


#### approx=

Alias for [approx-eq](#LOS-approx-eq)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1762">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-asec"></span>
```


#### asec

+ `(asec x)`

asec(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L863">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-asech"></span>
```


#### asech

+ `(asech x)`

Area hyperbolic secant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L907">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-asin"></span>
```


#### asin

+ `(asin x)`

asin(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L751">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-asinh"></span>
```


#### asinh

+ `(asinh x)`

asinh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L787">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-atan"></span>
```


#### atan

+ `(atan x)`

atan(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L763">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-atan2"></span>
```


#### atan2

+ `(atan2 x y)`

atan2(x,y)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L875">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-atanh"></span>
```


#### atanh

+ `(atanh x)`

atanh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L799">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-avercos"></span>
```


#### avercos

+ `(avercos x)`

Arc vecosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L969">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-aversin"></span>
```


#### aversin

+ `(aversin x)`

Arc versine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L957">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-between-?"></span>
```


#### between-?

+ `(between-? [x y] v)`
+ `(between-? x y v)`

Check if given number is within the range (x,y].


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2138">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-between?"></span>
```


#### between?

+ `(between? [x y] v)`
+ `(between? x y v)`

Check if given number is within the range [x,y].


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2131">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-and"></span>
```


#### bit-and

+ `(bit-and x)`
+ `(bit-and x y)`
+ `(bit-and x y & r)`

x ∧ y - bitwise AND


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L426">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-and-not"></span>
```


#### bit-and-not

+ `(bit-and-not x)`
+ `(bit-and-not x y)`
+ `(bit-and-not x y & r)`

x ∧ ~y - bitwise AND (with complement second argument)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L442">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-clear"></span>
```


#### bit-clear

+ `(bit-clear x bit)`

Clear bit (set to `0`).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L494">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-flip"></span>
```


#### bit-flip

+ `(bit-flip x bit)`

Flip bit (set to `0` when `1` or to `1` when `0`).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L500">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-nand"></span>
```


#### bit-nand

+ `(bit-nand x)`
+ `(bit-nand x y)`
+ `(bit-nand x y & r)`

~(x ∧ y) - bitwise NAND


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L434">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-nor"></span>
```


#### bit-nor

+ `(bit-nor x)`
+ `(bit-nor x y)`
+ `(bit-nor x y & r)`

~(x ∨ y) - bitwise NOR


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L458">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-not"></span>
```


#### bit-not

+ `(bit-not x)`

~x - bitwise NOT


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L482">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-or"></span>
```


#### bit-or

+ `(bit-or x)`
+ `(bit-or x y)`
+ `(bit-or x y & r)`

x ∨ y - bitwise OR


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L450">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-set"></span>
```


#### bit-set

+ `(bit-set x bit)`

Set bit (set to `1`).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L488">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-shift-left"></span>
```


#### bit-shift-left

+ `(bit-shift-left x shift)`

Shift bits left


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L512">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-shift-right"></span>
```


#### bit-shift-right

+ `(bit-shift-right x shift)`

Shift bits right and keep most significant bit unchanged


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L524">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-test"></span>
```


#### bit-test

+ `(bit-test x bit)`

Test bit (return to `true` when `1` or `false` when `0`).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L506">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-xnor"></span>
```


#### bit-xnor

+ `(bit-xnor x)`
+ `(bit-xnor x y)`
+ `(bit-xnor x y & r)`

~(x⊕y) - bitwise XNOR


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L474">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-xor"></span>
```


#### bit-xor

+ `(bit-xor x)`
+ `(bit-xor x y)`
+ `(bit-xor x y & r)`

x⊕y - bitwise XOR


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L466">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bits-&gt;double"></span>
```


#### bits->double

+ `(bits->double v)`

Convert 64 bits to double


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1852">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bool-not"></span>
```


#### bool-not

+ `(bool-not x)`

Primitive boolean not


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L548">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bool-xor"></span>
```


#### bool-xor

+ `(bool-xor x y)`
+ `(bool-xor x y & r)`

Primitive boolean xor


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L554">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cb"></span>
```


#### cb

+ `(cb x)`

$x^3$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1563">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cbrt"></span>
```


#### cbrt

+ `(cbrt x)`

$\sqrt[3]{x}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1320">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ceil"></span>
```


#### ceil

+ `(ceil x)`
+ `(ceil x scale)`

$\lceil x \rceil$. See: [qceil](#LOS-qceil).

  Rounding is done to a multiply of scale value (when provided).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1655">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cexpexp"></span>
```


#### cexpexp

+ `(cexpexp x)`

1-exp(-exp(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1292">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cloglog"></span>
```


#### cloglog

+ `(cloglog x)`

log(-log(1-x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1265">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cnorm"></span>
```


#### cnorm

+ `(cnorm v start1 stop1 start2 stop2)`
+ `(cnorm v start stop)`

Constrained version of norm. Result of [norm](#LOS-norm) is applied to [constrain](#LOS-constrain) to `[0,1]` or `[start2,stop2]` ranges.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1976">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-co-intervals"></span>
```


#### co-intervals

+ `(co-intervals data)`
+ `(co-intervals data number)`
+ `(co-intervals data number overlap)`

Divide sequence to overlaping intervals containing similar number of values. Same as R's `co.intervals()`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2177">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-combinations"></span>
```


#### combinations

+ `(combinations n k)`

Binomial coefficient (n choose k)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1524">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-constrain"></span>
```


#### constrain ^~MACRO~^

+ `(constrain value mn mx)`

Clamp `value` to the range `[mn,mx]`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1942">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-copy-sign"></span>
```


#### copy-sign

+ `(copy-sign magnitude sign)`

Returns a value with a magnitude of first argument and sign of second.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L706">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cos"></span>
```


#### cos

+ `(cos x)`

cos(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L727">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cos-interpolation"></span>
```


#### cos-interpolation

+ `(cos-interpolation start stop t)`

oF interpolateCosine interpolation. See also [lerp](#LOS-lerp)/[mlerp](#LOS-mlerp), [quad-interpolation](#LOS-quad-interpolation) or [smooth-interpolation](#LOS-smooth-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2010">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cosh"></span>
```


#### cosh

+ `(cosh x)`

cosh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L775">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cospi"></span>
```


#### cospi

+ `(cospi x)`

cos(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L733">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cot"></span>
```


#### cot

+ `(cot x)`

cot(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L819">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-coth"></span>
```


#### coth

+ `(coth x)`

Hyperbolic cotangent


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L882">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cotpi"></span>
```


#### cotpi

+ `(cotpi x)`

cot(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L825">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-covercos"></span>
```


#### covercos

+ `(covercos x)`

Covercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L951">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-coversin"></span>
```


#### coversin

+ `(coversin x)`

Coversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L939">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-crd"></span>
```


#### crd

+ `(crd x)`

Chord


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L921">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-csc"></span>
```


#### csc

+ `(csc x)`

csc(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L843">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-csch"></span>
```


#### csch

+ `(csch x)`

Hyperbolic cosecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L894">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cscpi"></span>
```


#### cscpi

+ `(cscpi x)`

csc(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L849">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cut"></span>
```


#### cut

+ `(cut data breaks)`
+ `(cut x1 x2 breaks)`

Cut range or sequence into intervals


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2167">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-dec"></span>
```


#### dec

+ `(dec x)`

Primitive and inlined `dec`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L186">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-deg-in-rad"></span>
```


#### deg-in-rad ^~CONST~^

`deg-in-rad = 0.017453292519943295`

$\frac{\pi}{180}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1335">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-degrees"></span>
```


#### degrees

+ `(degrees rad)`

Convert radians into degrees.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1343">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-delta-eq"></span>
```


#### delta-eq

+ `(delta-eq a b)`
+ `(delta-eq a b accuracy)`
+ `(delta-eq a b abs-tol rel-tol)`

Checks equality for given absolute accuracy (default `1.0e-6`).

  Version with 4-arity accepts absolute and relative accuracy.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1752">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-delta="></span>
```


#### delta=

Alias for [delta-eq](#LOS-delta-eq)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1763">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-difference-of-products"></span>
```


#### difference-of-products

+ `(difference-of-products a b c d)`

Kahan's algorithm for (a*b)-(c*d) to avoid catastrophic cancellation.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L635">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-dist"></span>
```


#### dist

+ `(dist [x1 y1] [x2 y2])`
+ `(dist x1 y1 x2 y2)`

Euclidean distance between points `(x1,y1)` and `(x2,y2)`. See [fastmath.vector](#LOS-fastmath.vector) namespace to see other metrics which work on vectors.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1628">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-array-&gt;seq"></span>
```


#### double-array->seq

Convert double array into sequence.

  Alias for `seq`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2316">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-array-type"></span>
```


#### double-array-type


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2313">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-bits"></span>
```


#### double-bits

+ `(double-bits v)`

Returns double as 64-bits (long)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1845">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-double-array-&gt;seq"></span>
```


#### double-double-array->seq

+ `(double-double-array->seq res)`

Convert double array of double arrays into sequence of sequences. 


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2331">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-double-array-type"></span>
```


#### double-double-array-type


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2314">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-exponent"></span>
```


#### double-exponent

+ `(double-exponent v)`

Extract exponent information from double


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1859">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-high-bits"></span>
```


#### double-high-bits

+ `(double-high-bits v)`

Returns high word from double as bits


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1831">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-low-bits"></span>
```


#### double-low-bits

+ `(double-low-bits v)`

Returns low word from double as bits


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1838">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-one-minus-epsilon"></span>
```


#### double-one-minus-epsilon ^~CONST~^

`double-one-minus-epsilon = 0.9999999999999999`

Value of 0x1.fffffffffffffp-1d = 0.(9)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1891">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-significand"></span>
```


#### double-significand

+ `(double-significand v)`

Extract significand from double


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1866">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-eq"></span>
```


#### eq

+ `(eq _)`
+ `(eq a b)`
+ `(eq a b & r)`

Primitive math equality function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L352">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-even?"></span>
```


#### even?

+ `(even? x)`

Primitive and inlined `even?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L320">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-excsc"></span>
```


#### excsc

+ `(excsc x)`

Excosecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1044">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-exp"></span>
```


#### exp

+ `(exp x)`

exp(x) = e^x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1071">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-exp10"></span>
```


#### exp10

+ `(exp10 x)`

exp10(x) = 10^x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1083">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-exp2"></span>
```


#### exp2

+ `(exp2 x)`

exp2(x) = 2^x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1077">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-expexp"></span>
```


#### expexp

+ `(expexp x)`

exp(-exp(-x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1299">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-expm1"></span>
```


#### expm1

+ `(expm1 x)`

exp(x)-1 for small x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1115">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-exprel"></span>
```


#### exprel

+ `(exprel x)`

(exp(x)-1)/x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1121">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-exsec"></span>
```


#### exsec

+ `(exsec x)`

Exsecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1038">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-factorial"></span>
```


#### factorial

+ `(factorial n)`

Factorial


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1469">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-factorial20"></span>
```


#### factorial20

+ `(factorial20 n)`

Factorial table up to 20!


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1464">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-falling-factorial"></span>
```


#### falling-factorial

+ `(falling-factorial n x)`

Falling (descending) factorial.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1497">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-falling-factorial-int"></span>
```


#### falling-factorial-int

+ `(falling-factorial-int n x)`

Falling (descending) factorial for integer n.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1487">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast*"></span>
```


#### fast* ^~DEPRECATED~^

*Deprecated: Use `*` instead*

+ `(fast*)`
+ `(fast* a)`
+ `(fast* a b)`
+ `(fast* a b & r)`

Primitive and inlined `*` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2398">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast+"></span>
```


#### fast+ ^~DEPRECATED~^

*Deprecated: Use `+` instead*

+ `(fast+)`
+ `(fast+ a)`
+ `(fast+ a b)`
+ `(fast+ a b & r)`

Primitive and inlined `+` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2378">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-"></span>
```


#### fast- ^~DEPRECATED~^

*Deprecated: Use `-` instead*

+ `(fast-)`
+ `(fast- a)`
+ `(fast- a b)`
+ `(fast- a b & r)`

Primitive and inlined `-` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2388">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-div"></span>
```


#### fast-div ^~DEPRECATED~^

*Deprecated: Use `/` instead*

+ `(fast-div)`
+ `(fast-div a)`
+ `(fast-div a b)`
+ `(fast-div a b & r)`

Primitive and inlined `/` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2408">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-identity"></span>
```


#### fast-identity ^~DEPRECATED~^

*Deprecated: Use `identity-double` instead*

+ `(fast-identity a)`

Identity on double.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2436">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-max"></span>
```


#### fast-max ^~DEPRECATED~^

*Deprecated: Use `max` instead*

+ `(fast-max a)`
+ `(fast-max a b)`
+ `(fast-max a b & r)`

Primitive and inlined `max` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2418">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-min"></span>
```


#### fast-min ^~DEPRECATED~^

*Deprecated: Use `min` instead*

+ `(fast-min a)`
+ `(fast-min a b)`
+ `(fast-min a b & r)`

Primitive and inlined `min` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2427">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-floor"></span>
```


#### floor

+ `(floor x)`
+ `(floor x scale)`

$\lfloor x \rfloor$. See: [qfloor](#LOS-qfloor).

  Rounding is done to a multiply of scale value (when provided).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1645">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fma"></span>
```


#### fma

+ `(fma x y z)`

`(x y z)` -> `(+ z (* x y))` or `Math/fma` for java 9+


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L620">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fpow"></span>
```


#### fpow

+ `(fpow x exponent)`

Fast version of pow where exponent is integer.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1439">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-frac"></span>
```


#### frac

+ `(frac v)`

Fractional part, always returns values from 0.0 to 1.0 (exclusive). See [sfrac](#LOS-sfrac) for signed version.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1772">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-gcd"></span>
```


#### gcd

+ `(gcd a b)`

Fast binary greatest common divisor (Stein's algorithm)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2224">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-group-by-intervals"></span>
```


#### group-by-intervals

+ `(group-by-intervals coll)`
+ `(group-by-intervals intervals coll)`

Group sequence of values into given intervals.

  If `intervals` are missing, use [co-intervals](#LOS-co-intervals) to find some.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2199">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-hacovercos"></span>
```


#### hacovercos

+ `(hacovercos x)`

Hacovercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1008">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-hacoversin"></span>
```


#### hacoversin

+ `(hacoversin x)`

Hacoversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L996">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-havercos"></span>
```


#### havercos

+ `(havercos x)`

Havercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1002">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-haversin"></span>
```


#### haversin

+ `(haversin x)`
+ `(haversin [lat1 lon1] [lat2 lon2])`
+ `(haversin lat1 lon1 lat2 lon2)`

Haversine formula for value or lattitude and longitude pairs.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L981">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-haversine"></span>
```


#### haversine

Haversine ([haversin](#LOS-haversin) alias)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L994">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-haversine-dist"></span>
```


#### haversine-dist

+ `(haversine-dist [lat1 lon1] [lat2 lon2])`
+ `(haversine-dist lat1 lon1 lat2 lon2)`

Haversine distance `d` for `r=1`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1062">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-high-2-exp"></span>
```


#### high-2-exp

+ `(high-2-exp x)`

Find lowest exponent (power of 2) which is greater or equal `x`. See [low-2-exp](#LOS-low-2-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1789">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-high-exp"></span>
```


#### high-exp

+ `(high-exp b x)`

Find lowest exponent for base `b` which is higher or equal`x`. See also [low-exp](#LOS-low-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1797">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-hypot"></span>
```


#### hypot

+ `(hypot x y)`
+ `(hypot x y z)`

Hypot.
  See also [hypot-sqrt](#LOS-hypot-sqrt).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1606">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-hypot-sqrt"></span>
```


#### hypot-sqrt

+ `(hypot-sqrt x y)`
+ `(hypot-sqrt x y z)`

Hypot, sqrt version: $\sqrt{x^2+y^2}$ or $\sqrt{x^2+y^2+z^2}$.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1617">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-iabs"></span>
```


#### iabs ^~DEPRECATED~^

*Deprecated: Use long-abs.*

+ `(iabs x)`

$|x|$ - `long` version. See [abs](#LOS-abs).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1718">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-identity-double"></span>
```


#### identity-double

+ `(identity-double a)`

Identity on double.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L578">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-identity-long"></span>
```


#### identity-long

+ `(identity-long a)`

Identity on double.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L583">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-inc"></span>
```


#### inc

+ `(inc x)`

Primitive and inlined `inc`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L174">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-inf?"></span>
```


#### inf?

+ `(inf? v)`

Check if a number is an infinite (positive or negative).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2101">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-integer?"></span>
```


#### integer?

+ `(integer? v)`

Check if given real number is an integer.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L588">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-inv-factorial"></span>
```


#### inv-factorial

+ `(inv-factorial n)`

Inverse of factorial, 1/n!


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1475">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-invalid-double?"></span>
```


#### invalid-double?

+ `(invalid-double? v)`

Check if a number is not finite double (NaN or ±Inf).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2119">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-itrunc"></span>
```


#### itrunc

+ `(itrunc v)`

Truncate fractional part, keep sign. Returns `long`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1735">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-jvm-version"></span>
```


#### jvm-version ^~CONST~^

`jvm-version = 21`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L42">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-lcm"></span>
```


#### lcm

+ `(lcm a b)`

Fast binary least common multiplier.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2229">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-lerp"></span>
```


#### lerp

+ `(lerp start stop t)`

Linear interpolation between `start` and `stop` for amount `t`. See also [mlerp](#LOS-mlerp), [cos-interpolation](#LOS-cos-interpolation), [quad-interpolation](#LOS-quad-interpolation) or [smooth-interpolation](#LOS-smooth-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1996">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ln"></span>
```


#### ln

+ `(ln x)`

log(x)=ln(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1097">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log"></span>
```


#### log

+ `(log x)`
+ `(log base x)`

log(x)=ln(x) or logarithm with given `base`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1089">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log-combinations"></span>
```


#### log-combinations

+ `(log-combinations n k)`

Log of binomial coefficient (n choose k)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1539">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log-factorial"></span>
```


#### log-factorial

+ `(log-factorial x)`

Log factorial, alias to log-gamma


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1481">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log10"></span>
```


#### log10

+ `(log10 x)`

log_10(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1103">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1mexp"></span>
```


#### log1mexp

+ `(log1mexp x)`

log(1-exp(x)), x<0


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1154">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1p"></span>
```


#### log1p

+ `(log1p x)`

log(1+x) for small x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1109">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1pexp"></span>
```


#### log1pexp

+ `(log1pexp x)`

log(1+exp(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1144">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1pmx"></span>
```


#### log1pmx

+ `(log1pmx x)`

log(1+x)-x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1190">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1psq"></span>
```


#### log1psq

+ `(log1psq x)`

log(1+x^2))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1168">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log2"></span>
```


#### log2

+ `(log2 x)`

Logarithm with base 2.

  $\ln_2{x}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1382">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log2int"></span>
```


#### log2int

+ `(log2int v)`

Fast and integer version of log2, returns long


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1873">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log2mexp"></span>
```


#### log2mexp

+ `(log2mexp x)`

log(2-exp(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1161">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logaddexp"></span>
```


#### logaddexp

+ `(logaddexp x y)`

log(exp(x)+exp(y))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1216">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logb"></span>
```


#### logb

+ `(logb b x)`

Logarithm with base `b`.

  $\ln_b{x}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1392">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logcosh"></span>
```


#### logcosh

+ `(logcosh x)`

log(cosh(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1401">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logexpm1"></span>
```


#### logexpm1

+ `(logexpm1 x)`

log(exp(x)-1))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1175">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logistic"></span>
```


#### logistic

Alias for [sigmoid](#LOS-sigmoid)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1365">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logit"></span>
```


#### logit

+ `(logit x)`

Logit function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1367">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-loglog"></span>
```


#### loglog

+ `(loglog x)`

-log(-log(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1272">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logmxp1"></span>
```


#### logmxp1

+ `(logmxp1 x)`

log(x)-x+1


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1205">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logsubexp"></span>
```


#### logsubexp

+ `(logsubexp x y)`

log(abs(exp(x)-exp(y)))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1224">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logsumexp"></span>
```


#### logsumexp

+ `(logsumexp xs)`

log(exp(x1)+...+exp(xn))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1232">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-abs"></span>
```


#### long-abs

+ `(long-abs x)`

$|x|$ - `long` version. See [abs](#LOS-abs).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1725">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-add"></span>
```


#### long-add

+ `(long-add)`
+ `(long-add a)`
+ `(long-add a b)`
+ `(long-add a b c)`
+ `(long-add a b c d)`
+ `(long-add a b c d & r)`

Primitive and inlined `+`. Coerces arguments and returned value to a long.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L94">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-dec"></span>
```


#### long-dec

+ `(long-dec x)`

Primitive and inlined `dec` coerced to a long


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L192">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-div"></span>
```


#### long-div

+ `(long-div a)`
+ `(long-div a b)`
+ `(long-div a b c)`
+ `(long-div a b c d)`
+ `(long-div a b c d & r)`

Primitive and inlined `/`. Coerces to arguments and returned value to a long.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L163">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-inc"></span>
```


#### long-inc

+ `(long-inc x)`

Primitive and inlined `inc` coerced to a long


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L180">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-max"></span>
```


#### long-max

+ `(long-max a)`
+ `(long-max a b)`
+ `(long-max a b c)`
+ `(long-max a b c d)`
+ `(long-max a b c d & r)`

Primitive and inlined `max`. Coerces arguments and returned values to longs.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L267">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-min"></span>
```


#### long-min

+ `(long-min a)`
+ `(long-min a b)`
+ `(long-min a b c)`
+ `(long-min a b c d)`
+ `(long-min a b c d & r)`

Primitive and inlined `min`. Coerces arguments and returned values to longs.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L245">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-mod"></span>
```


#### long-mod

+ `(long-mod x y)`

Primitive and inlined `mod` coerced to longs


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L228">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-mult"></span>
```


#### long-mult

+ `(long-mult)`
+ `(long-mult a)`
+ `(long-mult a b)`
+ `(long-mult a b c)`
+ `(long-mult a b c d)`
+ `(long-mult a b c d & r)`

Primitive and inlined `*`. Coerces arguments and returned value to a long.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L140">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-quot"></span>
```


#### long-quot

+ `(long-quot x y)`

Primitive and inlined `quot` coerced to longs


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L216">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-rem"></span>
```


#### long-rem

+ `(long-rem x y)`

Primitive and inlined `rem` coerced to longs


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L204">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-sub"></span>
```


#### long-sub

+ `(long-sub a)`
+ `(long-sub a b)`
+ `(long-sub a b c)`
+ `(long-sub a b c d)`
+ `(long-sub a b c d & r)`

Primitive and inlined `-`. Coerces arguments and returned value to a long.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L117">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-low-2-exp"></span>
```


#### low-2-exp

+ `(low-2-exp x)`

Find greatest exponent (power of 2) which is lower or equal `x`. See [high-2-exp](#LOS-high-2-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1785">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-low-exp"></span>
```


#### low-exp

+ `(low-exp b x)`

Find greatest exponent for base `b` which is lower or equal `x`. See also [high-exp](#LOS-high-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1793">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-make-norm"></span>
```


#### make-norm

+ `(make-norm start stop)`
+ `(make-norm start stop dstart dstop)`

Make [norm](#LOS-norm) function for given range. Resulting function accepts `double` value (with optional target `[dstart,dstop]` range) and returns `double`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1967">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-max"></span>
```


#### max

+ `(max a)`
+ `(max a b)`
+ `(max a b c)`
+ `(max a b c d)`
+ `(max a b c d & r)`

Primitive and inlined `max`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L256">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-min"></span>
```


#### min

+ `(min a)`
+ `(min a b)`
+ `(min a b c)`
+ `(min a b c d)`
+ `(min a b c d & r)`

Primitive and inlined `min`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L234">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-mlerp"></span>
```


#### mlerp ^~MACRO~^

+ `(mlerp start stop t)`

[lerp](#LOS-lerp) as macro. For inline code. See also [lerp](#LOS-lerp), [cos-interpolation](#LOS-cos-interpolation), [quad-interpolation](#LOS-quad-interpolation) or [smooth-interpolation](#LOS-smooth-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2004">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-mnorm"></span>
```


#### mnorm ^~MACRO~^

+ `(mnorm v start stop)`
+ `(mnorm v start1 stop1 start2 stop2)`

Macro version of [norm](#LOS-norm).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1960">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-mod"></span>
```


#### mod

+ `(mod x y)`

Primitive and inlined `mod`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L222">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-mpow"></span>
```


#### mpow

+ `(mpow x e m)`

Modular power


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1445">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-muladd"></span>
```


#### muladd

+ `(muladd x y z)`

`(x y z)` -> `(+ z (* x y))` or `Math/fma` for java 9+


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L613">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-nan?"></span>
```


#### nan?

+ `(nan? v)`

Check if a number is a NaN


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2095">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-near-zero?"></span>
```


#### near-zero?

+ `(near-zero? x)`
+ `(near-zero? x abs-tol)`
+ `(near-zero? x abs-tol rel-tol)`

Checks if given value is near zero with absolute (default: `1.0e-6`) and/or relative (default `0.0`) tolerance.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1765">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-neg-inf?"></span>
```


#### neg-inf?

+ `(neg-inf? v)`

Check if a number is negatively infinite.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2113">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-neg?"></span>
```


#### neg?

+ `(neg? x)`

Primitive and inlined `neg?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L296">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-negative-zero?"></span>
```


#### negative-zero?

+ `(negative-zero? x)`

Check if zero is negative, ie. -0.0


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L570">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-negmuladd"></span>
```


#### negmuladd

+ `(negmuladd x y z)`

`(x y z)` -> `(+ z (* -x y))` or `Math/fma` for java 9+


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L627">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-next-double"></span>
```


#### next-double

+ `(next-double v)`
+ `(next-double v delta)`

Next double value. Optional value `delta` sets step amount.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1813">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-norm"></span>
```


#### norm

+ `(norm v start stop)`
+ `(norm v start1 stop1 start2 stop2)`

Normalize `v` from the range `[start,stop]` to the range `[0,1]` or map `v` from the range `[start1,stop1]` to the range `[start2,stop2]`. See also [make-norm](#LOS-make-norm).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1947">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-not-neg?"></span>
```


#### not-neg?

+ `(not-neg? x)`

Primitive and inlined `not-neg?` (x>=0.0)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L308">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-not-pos?"></span>
```


#### not-pos?

+ `(not-pos? x)`

Primitive and inlined `not-pos?` (x<=0.0)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L314">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-not-zero?"></span>
```


#### not-zero?

+ `(not-zero? x)`

Primitive and inlined x<>0.0


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L284">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-not=="></span>
```


#### not==

+ `(not== _)`
+ `(not== a b)`
+ `(not== a b & r)`

Not equality. For more than two arguments, pairwise not equality is checked.

  `(not== 1 2 1)` === `(and (not= 1 2) (not= 2 1))`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L407">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-odd?"></span>
```


#### odd?

+ `(odd? x)`

Primitive and inlined `odd?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L326">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-one?"></span>
```


#### one?

+ `(one? x)`

Primitive and inlined `one?` (x==1.0)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L290">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-order"></span>
```


#### order

+ `(order vs)`
+ `(order vs decreasing?)`

Ordering permutation. See [R docs](https://www.rdocumentation.org/packages/base/versions/3.6.1/topics/order)

  Order uses 0 based indexing.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2299">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pos-inf?"></span>
```


#### pos-inf?

+ `(pos-inf? v)`

Check if a number is positively infinite.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2107">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pos?"></span>
```


#### pos?

+ `(pos? x)`

Primitive and inlined `pos?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L302">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pow"></span>
```


#### pow

+ `(pow x exponent)`

Power of a number


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1420">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pow10"></span>
```


#### pow10

+ `(pow10 x)`

$x^10$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1573">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pow2"></span>
```


#### pow2

+ `(pow2 x)`

Same as [sq](#LOS-sq). $x^2$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1558">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pow3"></span>
```


#### pow3

+ `(pow3 x)`

$x^3$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1568">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-prev-double"></span>
```


#### prev-double

+ `(prev-double v)`
+ `(prev-double v delta)`

Next double value. Optional value `delta` sets step amount.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1822">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qceil"></span>
```


#### qceil

+ `(qceil x)`

Fast version of [ceil](#LOS-ceil). Returns `long`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1692">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qcos"></span>
```


#### qcos

+ `(qcos x)`

Fast and less accurate cos(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L811">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qdist"></span>
```


#### qdist

+ `(qdist [x1 y1] [x2 y2])`
+ `(qdist x1 y1 x2 y2)`

Quick version of Euclidean distance between points. [qsqrt](#LOS-qsqrt) is used instead of [sqrt](#LOS-sqrt).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1636">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qexp"></span>
```


#### qexp

+ `(qexp x)`

Quick and less accurate version of [exp](#LOS-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1327">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qfloor"></span>
```


#### qfloor

+ `(qfloor x)`

Fast version of [floor](#LOS-floor). Returns `long`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1686">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qlog"></span>
```


#### qlog

+ `(qlog x)`

Fast and less accurate version of [log](#LOS-log).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1307">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qpow"></span>
```


#### qpow

+ `(qpow x exponent)`

Fast and less accurate version of [pow](#LOS-pow).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1433">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qround"></span>
```


#### qround

+ `(qround x)`

Fast version of [round](#LOS-round). Returns `long`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1698">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qsin"></span>
```


#### qsin

+ `(qsin x)`

Fast and less accurate sin(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L805">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qsqrt"></span>
```


#### qsqrt

+ `(qsqrt x)`

Approximated [sqrt](#LOS-sqrt) using binary operations with error `1.0E-2`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1594">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-quad-interpolation"></span>
```


#### quad-interpolation

+ `(quad-interpolation start stop t)`

Quad interpolation. See also [lerp](#LOS-lerp)/[mlerp](#LOS-mlerp), [cos-interpolation](#LOS-cos-interpolation) or [smooth-interpolation](#LOS-smooth-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2020">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-quot"></span>
```


#### quot

+ `(quot x y)`

Primitive and inlined `quot`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L210">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rad-in-deg"></span>
```


#### rad-in-deg ^~CONST~^

`rad-in-deg = 57.29577951308232`

$\frac{180}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1334">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-radians"></span>
```


#### radians

+ `(radians deg)`

Convert degrees into radians.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1337">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rank"></span>
```


#### rank

+ `(rank vs)`
+ `(rank vs ties)`
+ `(rank vs ties desc?)`

Sample ranks. See [R docs](https://www.rdocumentation.org/packages/base/versions/3.6.1/topics/rank).

  Rank uses 0 based indexing.
  
  Possible tie strategies: `:average`, `:first`, `:last`, `:random`, `:min`, `:max`, `:dense`.

  `:dense` is the same as in `data.table::frank` from R


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2261">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rank1"></span>
```


#### rank1


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2296">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-relative-error"></span>
```


#### relative-error

+ `(relative-error v v-approx)`

Relative error between two values


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2153">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rem"></span>
```


#### rem

+ `(rem x y)`

Primitive and inlined `rem`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L198">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-remainder"></span>
```


#### remainder

+ `(remainder dividend divisor)`

From `FastMath` doc: returns dividend - divisor * n,
  where n is the mathematical integer closest to dividend/divisor. Returned value in `[-|divisor|/2,|divisor|/2]`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1704">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rint"></span>
```


#### rint

+ `(rint x)`
+ `(rint x scale)`

Round to `double`. See [round](#LOS-round), [qround](#LOS-qround).

  Rounding is done to a multiply of scale value (when provided).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1670">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rising-factorial"></span>
```


#### rising-factorial

+ `(rising-factorial n x)`

Rising (Pochhammer) factorial.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1516">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rising-factorial-int"></span>
```


#### rising-factorial-int

+ `(rising-factorial-int n x)`

Rising (Pochhammer) factorial for integer n.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1506">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-round"></span>
```


#### round

+ `(round x)`

Round to `long`. See: [rint](#LOS-rint), [qround](#LOS-qround).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1665">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-round-even"></span>
```


#### round-even

+ `(round-even x)`

Round evenly (like in round in R), IEEE / IEC rounding


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1680">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-round-up-pow2"></span>
```


#### round-up-pow2

+ `(round-up-pow2 v)`

Round long to the next power of 2


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1801">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rqsqrt"></span>
```


#### rqsqrt

+ `(rqsqrt x)`

Reciprocal of [qsqrt](#LOS-qsqrt). Quick and less accurate.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1600">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-safe-sqrt"></span>
```


#### safe-sqrt

+ `(safe-sqrt value)`

Safe sqrt, for value <= 0 result is 0.

  $
  \left\\{
  \begin{array}{lr}
  0 & : x \leq 0\\\\
  \sqrt{x} & : x > 0
  \end{array}
  \\right.
  $


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1580">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sample"></span>
```


#### sample

+ `(sample f number-of-values)`
+ `(sample f number-of-values domain?)`
+ `(sample f domain-min domain-max number-of-values)`
+ `(sample f domain-min domain-max number-of-values domain?)`

Sample function `f` and return sequence of values.

  `range-min` defaults to 0.0, `range-max` to 1.0.

  Range is inclusive.

  When optional `domain?` is set to true (default: false) function returns pairs `[x,(f x)]`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2238">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sec"></span>
```


#### sec

+ `(sec x)`

sec(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L831">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sech"></span>
```


#### sech

+ `(sech x)`

Hyperbolic secant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L888">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-secpi"></span>
```


#### secpi

+ `(secpi x)`

sec(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L837">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-seq-&gt;double-array"></span>
```


#### seq->double-array

+ `(seq->double-array vs)`

Convert sequence to double array. Returns input if `vs` is double array already.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2320">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-seq-&gt;double-double-array"></span>
```


#### seq->double-double-array

+ `(seq->double-double-array vss)`

Convert sequence to double-array of double-arrays.
  
  If sequence is double-array of double-arrays returns `vss`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2336">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sfrac"></span>
```


#### sfrac

+ `(sfrac v)`

Fractional part, always returns values from -1.0 to 1.0 (exclusive). See [frac](#LOS-frac) for unsigned version.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1776">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sgn"></span>
```


#### sgn

+ `(sgn value)`

Return -1 when `value` is negative, 1 otherwise. See also [signum](#LOS-signum).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L697">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sigmoid"></span>
```


#### sigmoid

+ `(sigmoid x)`

Sigmoid function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1358">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-signum"></span>
```


#### signum

+ `(signum value)`

Return 1 if `value` is > 0, 0 if it is 0, -1 otherwise. See also [sgn](#LOS-sgn).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L688">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sin"></span>
```


#### sin

+ `(sin x)`

sin(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L715">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sinc"></span>
```


#### sinc

+ `(sinc v)`

Sinc function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1350">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sinh"></span>
```


#### sinh

+ `(sinh x)`

sinh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L769">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sinpi"></span>
```


#### sinpi

+ `(sinpi x)`

sin(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L721">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-slice-range"></span>
```


#### slice-range

+ `(slice-range start end cnt)`
+ `(slice-range cnt)`

Slice range to get `cnt` number of points evenly distanced.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2160">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-smooth-interpolation"></span>
```


#### smooth-interpolation

+ `(smooth-interpolation start stop t)`

Smoothstep based interpolation. See also [lerp](#LOS-lerp)/[mlerp](#LOS-mlerp), [quad-interpolation](#LOS-quad-interpolation) or [cos-interpolation](#LOS-cos-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2015">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-smooth-max"></span>
```


#### smooth-max

+ `(smooth-max xs)`
+ `(smooth-max xs alpha)`
+ `(smooth-max xs alpha family)`

Smooth maximum function.

  A smooth function with `alpha` argument. When `alpha` goes to infinity, function returns maximum value of `xs`.

  Family:

  * `:lse` - LogSumExp (default)
  * `:boltzmann` - Boltzmann operator, works for small alpha values
  * `:mellowmax`
  * `:p-norm`
  * `:smu` - smooth maximum unit, epsilon = 1/alpha > 0


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2066">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-smoothstep"></span>
```


#### smoothstep

+ `(smoothstep edge0 edge1 x)`

GL [smoothstep](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/smoothstep.xhtml).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2028">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-spow"></span>
```


#### spow

+ `(spow x exponent)`

Symmetric power of a number (keeping a sign of the argument.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1426">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sq"></span>
```


#### sq

+ `(sq x)`

Same as [pow2](#LOS-pow2). $x^2$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1553">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sqrt"></span>
```


#### sqrt

+ `(sqrt x)`

$\sqrt{x}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1314">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sum-of-products"></span>
```


#### sum-of-products

+ `(sum-of-products a b c d)`

Kahan's algorithm for (a*b)+(c*d) to avoid catastrophic cancellation.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L641">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-tan"></span>
```


#### tan

+ `(tan x)`

tan(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L739">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-tanh"></span>
```


#### tanh

+ `(tanh x)`

tanh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L781">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-tanpi"></span>
```


#### tanpi

+ `(tanpi x)`

tan(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L745">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-trunc"></span>
```


#### trunc

+ `(trunc v)`

Truncate fractional part, keep sign. Returns `double`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1731">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ulp"></span>
```


#### ulp

+ `(ulp x)`

Unit in the Last Place, distance between next value larger than `x` and `x`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1883">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-unsigned-bit-shift-right"></span>
```


#### unsigned-bit-shift-right

+ `(unsigned-bit-shift-right x shift)`

Shift bits right and set most significant bit to `0`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L536">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-unuse-primitive-operators"></span>
```


#### unuse-primitive-operators

+ `(unuse-primitive-operators)`
+ `(unuse-primitive-operators skip-set)`

Undoes the work of [use-primitive-operators](#LOS-use-primitive-operators). This is idempotent.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2367">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-use-primitive-operators"></span>
```


#### use-primitive-operators

+ `(use-primitive-operators)`
+ `(use-primitive-operators skip-set)`

Replaces Clojure's arithmetic and number coercion functions with primitive equivalents.  These are
   defined as macros, so they cannot be used as higher-order functions. This is an idempotent operation. Undo with [unuse-primitive-operators](#LOS-unuse-primitive-operators).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2356">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-valid-double?"></span>
```


#### valid-double?

+ `(valid-double? v)`

Check if a number is finite double.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2125">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-vercos"></span>
```


#### vercos

+ `(vercos x)`

Vercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L945">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-versin"></span>
```


#### versin

+ `(versin x)`

Versine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L933">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-wrap"></span>
```


#### wrap

+ `(wrap [start stop] value)`
+ `(wrap start stop value)`

Wrap overflowed value into the range, similar to [ofWrap](http://openframeworks.cc/documentation/math/ofMath/#!show_ofWrap).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L2037">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xexpx"></span>
```


#### xexpx

+ `(xexpx x)`

x * exp(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1279">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xexpy"></span>
```


#### xexpy

+ `(xexpy x y)`

x * exp(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1285">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xlog1py"></span>
```


#### xlog1py

+ `(xlog1py x y)`

x * log(1+y)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1259">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xlogx"></span>
```


#### xlogx

+ `(xlogx x)`

x * log(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1248">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xlogy"></span>
```


#### xlogy

+ `(xlogy x y)`

x * log(y)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L1253">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xor"></span>
```


#### xor

+ `(xor x y)`
+ `(xor x y & r)`

Primitive boolean xor


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L561">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-zero?"></span>
```


#### zero?

+ `(zero? x)`

Primitive and inlined `zero?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/tree/3.x/src/fastmath/core.clj#L278">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/generateme/fastmath//blob/master/clay/core.clj">clay/core.clj</a></small></small></pre></div>
```
