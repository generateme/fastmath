
---
format:
  html:
    toc: true
    toc-depth: 5
    theme: [cosmo, ../../clay/custom.scss]
    toc-location: right
    anchor-sections: true
    reference-location: margin
    fontsize: 0.9em
    output-file: core.html
fontsize: 0.9em
code-block-background: true

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
</style>
<script src="core_files/md-default0.js" type="text/javascript"></script><script src="core_files/md-default1.js" type="text/javascript"></script>

# Core {.unnumbered}


## Reference

### fastmath.core

Collection of fast math functions and plethora of constants known from other math libraries.

  ### Primitive math operators

  Inlined function operating on double/longs as a replacement of Clojure numerical tower: `*` `+` `-` `/` `>` `<` `>=` `<=` `==` `rem` `quot` `mod` `bit-or` `bit-and` `bit-xor` `bit-and-not` `bit-set` `bit-clear` `bit-test` `bit-flip` `bit-not` `bit-shift-left` `bit-shift-right` `unsigned-bit-shift-right` `inc` `dec` `zero?` `neg?` `pos?` `min` `max` `even?` `odd?` `abs`

  And additionally:

  * `<<` - bit shift left
  * `>>` - signed bit shift right
  * `>>>` - unsigned bit shift right
  * `not==` - not equal

  To turn on primitive math on your namespace call [use-primitive-operators](#LOS-use-primitive-operators).
  To turn off and revert original versions call [unuse-primitive-operators](#LOS-unuse-primitive-operators) which is recomended when Clojure 1.12+ is used.

  ### FastMath

  Almost all math functions are backed by [FastMath](https://github.com/jeffhain/jafama) library. Almost all operates on primitive `double` and returns `double` or `long`


```{=html}
<span id="#LOS-*"></span>
```


#### *

+ `(*)`
+ `(* a)`
+ `(* a b)`
+ `(* a b c)`
+ `(* a b c d)`
+ `(* a b c d & r)`

Primitive and inlined `*`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L119">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-+"></span>
```


#### +

+ `(+)`
+ `(+ a)`
+ `(+ a b)`
+ `(+ a b c)`
+ `(+ a b c d)`
+ `(+ a b c d & r)`

Primitive and inlined `+`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L73">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--"></span>
```


#### -

+ `(- a)`
+ `(- a b)`
+ `(- a b c)`
+ `(- a b c d)`
+ `(- a b c d & r)`

Primitive and inlined `-`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L97">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--E"></span>
```


#### -E ^~CONST~^

`-E = -2.718281828459045`

Value of $-e$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L641">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--HALF_PI"></span>
```


#### -HALF_PI ^~CONST~^

`-HALF_PI = -1.5707963267948966`

Value of $-\frac{\pi}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L636">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--PI"></span>
```


#### -PI ^~CONST~^

`-PI = -3.141592653589793`

Value of $-\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L635">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--QUARTER_PI"></span>
```


#### -QUARTER_PI ^~CONST~^

`-QUARTER_PI = -0.7853981633974483`

Value of $-\frac{\pi}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L638">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--TAU"></span>
```


#### -TAU ^~CONST~^

`-TAU = -6.283185307179586`

Alias for [TWO_PI-](#LOS-TWO_PI-)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L640">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--THIRD_PI"></span>
```


#### -THIRD_PI ^~CONST~^

`-THIRD_PI = 1.0471975511965976`

Value of $-\frac{\pi}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L637">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS--TWO_PI"></span>
```


#### -TWO_PI ^~CONST~^

`-TWO_PI = -6.283185307179586`

Value of $-2 {\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L639">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-/"></span>
```


#### /

+ `(/ a)`
+ `(/ a b)`
+ `(/ a b c)`
+ `(/ a b c d)`
+ `(/ a b c d & r)`

Primitive and inlined `/`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L143">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&lt;"></span>
```


#### <

+ `(< _)`
+ `(< a b)`
+ `(< a b & r)`

Primitive math less-then function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L348">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&lt;&lt;"></span>
```


#### <<

+ `(<< x shift)`

Shift bits left


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L503">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&lt;="></span>
```


#### <=

+ `(<= _)`
+ `(<= a b)`
+ `(<= a b & r)`

Primitive math less-and-equal function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L370">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-=="></span>
```


#### ==

+ `(== _)`
+ `(== a b)`
+ `(== a b & r)`

Primitive math equality function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L327">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&gt;"></span>
```


#### >

+ `(> _)`
+ `(> a b)`
+ `(> a b & r)`

Primitive math greater-than function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L359">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&gt;="></span>
```


#### >=

+ `(>= _)`
+ `(>= a b)`
+ `(>= a b & r)`

Primitive math greater-and-equal function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L381">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&gt;&gt;"></span>
```


#### >>

+ `(>> x shift)`

Shift bits right and keep most significant bit unchanged


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L515">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-&gt;&gt;&gt;"></span>
```


#### >>>

+ `(>>> x shift)`

Shift bits right and set most significant bit to `0`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L527">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-CATALAN_G"></span>
```


#### CATALAN_G ^~CONST~^

`CATALAN_G = 0.915965594177219`

Catalan G


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L650">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-E"></span>
```


#### E ^~CONST~^

`E = 2.718281828459045`

Value of $e$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L634">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-EPSILON"></span>
```


#### EPSILON ^~CONST~^

`EPSILON = 1.0E-10`

Very small number $\varepsilon$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L647">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-FOUR_INV_PI"></span>
```


#### FOUR_INV_PI ^~CONST~^

`FOUR_INV_PI = 1.2732395447351628`

Value of $\frac{4}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L644">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-GAMMA"></span>
```


#### GAMMA ^~CONST~^

`GAMMA = 0.5772156649015329`

Euler-Mascheroni constant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L648">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-HALF_PI"></span>
```


#### HALF_PI ^~CONST~^

`HALF_PI = 1.5707963267948966`

Value of $\frac{\pi}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L629">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_FOUR_PI"></span>
```


#### INV_FOUR_PI ^~CONST~^

`INV_FOUR_PI = 0.07957747154594767`

Value of $\frac{1}{4 \pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L646">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_LN2"></span>
```


#### INV_LN2 ^~CONST~^

`INV_LN2 = 1.4426950408889634`

$\frac{1}{\ln{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1059">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_LOG_HALF"></span>
```


#### INV_LOG_HALF ^~CONST~^

`INV_LOG_HALF = -1.4426950408889634`

$\frac{1}{\ln{0.5}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1062">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_PI"></span>
```


#### INV_PI ^~CONST~^

`INV_PI = 0.3183098861837907`

Value of $\frac{1}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L642">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_SQRT2PI"></span>
```


#### INV_SQRT2PI ^~CONST~^

`INV_SQRT2PI = 0.3989422804014327`

$\frac{1}{\sqrt{2\pi}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1808">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_SQRTPI"></span>
```


#### INV_SQRTPI ^~CONST~^

`INV_SQRTPI = 0.5641895835477563`

$\frac{1}{\sqrt\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1809">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_SQRT_2"></span>
```


#### INV_SQRT_2 ^~CONST~^

`INV_SQRT_2 = 0.7071067811865475`

$\frac{1}{\sqrt{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1813">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-INV_TWO_PI"></span>
```


#### INV_TWO_PI ^~CONST~^

`INV_TWO_PI = 0.15915494309189535`

Value of $\frac{1}{2 \pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L645">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LANCZOS_G"></span>
```


#### LANCZOS_G ^~CONST~^

`LANCZOS_G = 4.7421875`

Lanchos approximation `g` constant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L649">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LN10"></span>
```


#### LN10 ^~CONST~^

`LN10 = 2.302585092994046`

$\ln{10}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1061">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LN2"></span>
```


#### LN2 ^~CONST~^

`LN2 = 0.6931471805599453`

$\ln{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1058">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LN2_2"></span>
```


#### LN2_2 ^~CONST~^

`LN2_2 = 0.34657359027997264`

$\frac{\ln{2}}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1060">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG10E"></span>
```


#### LOG10E ^~CONST~^

`LOG10E = 0.4342944819032518`

$\log_{10}{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1329">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG2E"></span>
```


#### LOG2E ^~CONST~^

`LOG2E = 1.4426950408889634`

$\log_{2}{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1326">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG_HALF"></span>
```


#### LOG_HALF ^~CONST~^

`LOG_HALF = -0.6931471805599453`

$\ln{0.5}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1063">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG_PI"></span>
```


#### LOG_PI ^~CONST~^

`LOG_PI = 1.1447298858494002`

$\ln{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1064">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-LOG_TWO_PI"></span>
```


#### LOG_TWO_PI ^~CONST~^

`LOG_TWO_PI = 1.8378770664093453`

$\ln{2 \pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1065">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-MACHINE-EPSILON"></span>
```


#### MACHINE-EPSILON ^~CONST~^

`MACHINE-EPSILON = 1.1102230246251565E-16`

ULP(1)/2. Half of the smallest difference between 1.0 and next possible double floating point number.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L652">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-MACHINE-EPSILON10"></span>
```


#### MACHINE-EPSILON10 ^~CONST~^

`MACHINE-EPSILON10 = 1.1102230246251565E-15`

5*ULP(1)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L658">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_1_PI"></span>
```


#### M_1_PI ^~CONST~^

`M_1_PI = 0.3183098861837907`

$\frac{1}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1805">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_2_PI"></span>
```


#### M_2_PI ^~CONST~^

`M_2_PI = 0.6366197723675814`

$\frac{2}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1806">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_2_SQRTPI"></span>
```


#### M_2_SQRTPI ^~CONST~^

`M_2_SQRTPI = 1.1283791670955126`

$\frac{2}{\sqrt\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1807">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_3PI_4"></span>
```


#### M_3PI_4 ^~CONST~^

`M_3PI_4 = 2.356194490192345`

$\frac{3\pi}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1815">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_E"></span>
```


#### M_E ^~CONST~^

`M_E = 2.718281828459045`

$e$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1797">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_INVLN2"></span>
```


#### M_INVLN2 ^~CONST~^

`M_INVLN2 = 1.4426950408889634`

$\frac{1}{\ln{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1820">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_IVLN10"></span>
```


#### M_IVLN10 ^~CONST~^

`M_IVLN10 = 0.43429448190325176`

$\frac{1}{\ln{10}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1818">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LN10"></span>
```


#### M_LN10 ^~CONST~^

`M_LN10 = 2.302585092994046`

$\ln{10}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1801">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LN2"></span>
```


#### M_LN2 ^~CONST~^

`M_LN2 = 0.6931471805599453`

$\ln{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1800">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LOG10E"></span>
```


#### M_LOG10E ^~CONST~^

`M_LOG10E = 0.4342944819032518`

$\log_{10}{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1799">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LOG2E"></span>
```


#### M_LOG2E ^~CONST~^

`M_LOG2E = 1.4426950408889634`

$\log_{2}{e}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1798">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_LOG2_E"></span>
```


#### M_LOG2_E ^~CONST~^

`M_LOG2_E = 0.6931471805599453`

$\ln{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1819">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_PI"></span>
```


#### M_PI ^~CONST~^

`M_PI = 3.141592653589793`

$\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1802">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_PI_2"></span>
```


#### M_PI_2 ^~CONST~^

`M_PI_2 = 1.5707963267948966`

$\frac{\pi}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1803">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_PI_4"></span>
```


#### M_PI_4 ^~CONST~^

`M_PI_4 = 0.7853981633974483`

$\frac{\pi}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1804">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_SQRT1_2"></span>
```


#### M_SQRT1_2 ^~CONST~^

`M_SQRT1_2 = 0.7071067811865475`

$\frac{1}{\sqrt{2}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1812">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_SQRT2"></span>
```


#### M_SQRT2 ^~CONST~^

`M_SQRT2 = 1.4142135623730951`

$\sqrt{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1811">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_SQRT3"></span>
```


#### M_SQRT3 ^~CONST~^

`M_SQRT3 = 1.7320508075688772`

$\sqrt{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1817">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_SQRT_PI"></span>
```


#### M_SQRT_PI ^~CONST~^

`M_SQRT_PI = 1.7724538509055159`

$\sqrt\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1816">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-M_TWOPI"></span>
```


#### M_TWOPI ^~CONST~^

`M_TWOPI = 6.283185307179586`

$2\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1814">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ONE_SIXTH"></span>
```


#### ONE_SIXTH ^~CONST~^

`ONE_SIXTH = 0.16666666666666666`

Value of $\frac{1}{6}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L666">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ONE_THIRD"></span>
```


#### ONE_THIRD ^~CONST~^

`ONE_THIRD = 0.3333333333333333`

Value of $\frac{1}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L662">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-PHI"></span>
```


#### PHI ^~CONST~^

`PHI = 1.618033988749895`

Golden ratio $\phi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1793">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-PI"></span>
```


#### PI ^~CONST~^

`PI = 3.141592653589793`

Value of $\pi$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L628">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-QUARTER_PI"></span>
```


#### QUARTER_PI ^~CONST~^

`QUARTER_PI = 0.7853981633974483`

Value of $\frac{\pi}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L631">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SILVER"></span>
```


#### SILVER ^~CONST~^

`SILVER = 2.414213562373095`

Silver ratio $\delta_S$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1794">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SIXTH"></span>
```


#### SIXTH ^~CONST~^

`SIXTH = 0.16666666666666666`

Value of $\frac{1}{6}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L665">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT2"></span>
```


#### SQRT2 ^~CONST~^

`SQRT2 = 1.4142135623730951`

$\sqrt{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1775">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT2PI"></span>
```


#### SQRT2PI ^~CONST~^

`SQRT2PI = 2.5066282746310002`

$\sqrt{2\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1789">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT2_2"></span>
```


#### SQRT2_2 ^~CONST~^

`SQRT2_2 = 0.7071067811865476`

$\frac{\sqrt{2}}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1776">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT3"></span>
```


#### SQRT3 ^~CONST~^

`SQRT3 = 1.7320508075688772`

$\sqrt{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1779">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT3_2"></span>
```


#### SQRT3_2 ^~CONST~^

`SQRT3_2 = 0.8660254037844386`

$\frac{\sqrt{3}}{2}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1780">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT3_3"></span>
```


#### SQRT3_3 ^~CONST~^

`SQRT3_3 = 0.5773502691896257`

$\frac{\sqrt{3}}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1781">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT3_4"></span>
```


#### SQRT3_4 ^~CONST~^

`SQRT3_4 = 0.4330127018922193`

$\frac{\sqrt{3}}{4}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1782">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT5"></span>
```


#### SQRT5 ^~CONST~^

`SQRT5 = 2.23606797749979`

$\sqrt{5}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1785">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRTPI"></span>
```


#### SQRTPI ^~CONST~^

`SQRTPI = 1.7724538509055159`

$\sqrt{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1788">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT_2_PI"></span>
```


#### SQRT_2_PI ^~CONST~^

`SQRT_2_PI = 0.7978845608028654`

$\sqrt{\frac{2}{\pi}}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1810">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-SQRT_HALFPI"></span>
```


#### SQRT_HALFPI ^~CONST~^

`SQRT_HALFPI = 1.2533141373155001`

$\sqrt{\frac{1}{2}\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1790">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TAU"></span>
```


#### TAU ^~CONST~^

`TAU = 6.283185307179586`

Alias for [TWO_PI](#LOS-TWO_PI)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L633">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-THIRD"></span>
```


#### THIRD ^~CONST~^

`THIRD = 0.3333333333333333`

Value of $\frac{1}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L661">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-THIRD_PI"></span>
```


#### THIRD_PI ^~CONST~^

`THIRD_PI = 1.0471975511965976`

Value of $\frac{\pi}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L630">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TWO_INV_PI"></span>
```


#### TWO_INV_PI ^~CONST~^

`TWO_INV_PI = 0.6366197723675814`

Value of $\frac{2}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L643">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TWO_PI"></span>
```


#### TWO_PI ^~CONST~^

`TWO_PI = 6.283185307179586`

Value of $2 {\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L632">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TWO_THIRD"></span>
```


#### TWO_THIRD ^~CONST~^

`TWO_THIRD = 0.6666666666666666`

Value of $\frac{2}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L663">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-TWO_THIRDS"></span>
```


#### TWO_THIRDS ^~CONST~^

`TWO_THIRDS = 0.6666666666666666`

Value of $\frac{2}{3}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L664">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-abs"></span>
```


#### abs

+ `(abs x)`

$|x|$ - `double` version. See [iabs](#LOS-iabs).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1599">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acos"></span>
```


#### acos

+ `(acos x)`

acos(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L710">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acosh"></span>
```


#### acosh

+ `(acosh x)`

acosh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L746">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acot"></span>
```


#### acot

+ `(acot x)`

acot(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L810">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acoth"></span>
```


#### acoth

+ `(acoth x)`

Area hyperbolic cotangent


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L854">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acovercos"></span>
```


#### acovercos

+ `(acovercos x)`

Arc covercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L928">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acoversin"></span>
```


#### acoversin

+ `(acoversin x)`

Arc coversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L916">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acrd"></span>
```


#### acrd

+ `(acrd x)`

Inverse chord


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L880">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acsc"></span>
```


#### acsc

+ `(acsc x)`

acsc(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L822">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-acsch"></span>
```


#### acsch

+ `(acsch v)`

Area hyperbolic cosecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L866">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-aexcsc"></span>
```


#### aexcsc

+ `(aexcsc x)`

Arc excosecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1009">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-aexsec"></span>
```


#### aexsec

+ `(aexsec x)`

Arc exsecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1003">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ahacovercos"></span>
```


#### ahacovercos

+ `(ahacovercos x)`

Arc hacovercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L985">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ahacoversin"></span>
```


#### ahacoversin

+ `(ahacoversin x)`

Arc hacoversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L973">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ahavercos"></span>
```


#### ahavercos

+ `(ahavercos x)`

Arc havecosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L979">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ahaversin"></span>
```


#### ahaversin

+ `(ahaversin x)`

Arc haversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L967">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-approx"></span>
```


#### approx

+ `(approx v)`
+ `(approx v digits)`

Round `v` to specified (default: 2) decimal places. Be aware of `double` number accuracy.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1620">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-approx-eq"></span>
```


#### approx-eq

+ `(approx-eq a b)`
+ `(approx-eq a b digits)`

Checks equality approximately. See [approx](#LOS-approx).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1625">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-approx="></span>
```


#### approx=

Alias for [approx-eq](#LOS-approx-eq)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1642">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-asec"></span>
```


#### asec

+ `(asec x)`

asec(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L816">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-asech"></span>
```


#### asech

+ `(asech x)`

Area hyperbolic secant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L860">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-asin"></span>
```


#### asin

+ `(asin x)`

asin(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L704">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-asinh"></span>
```


#### asinh

+ `(asinh x)`

asinh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L740">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-atan"></span>
```


#### atan

+ `(atan x)`

atan(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L716">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-atan2"></span>
```


#### atan2

+ `(atan2 x y)`

atan2(x,y)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L828">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-atanh"></span>
```


#### atanh

+ `(atanh x)`

atanh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L752">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-avercos"></span>
```


#### avercos

+ `(avercos x)`

Arc vecosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L922">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-aversin"></span>
```


#### aversin

+ `(aversin x)`

Arc versine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L910">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-between-?"></span>
```


#### between-?

+ `(between-? [x y] v)`
+ `(between-? x y v)`

Check if given number is within the range (x,y].


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2064">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-between?"></span>
```


#### between?

+ `(between? [x y] v)`
+ `(between? x y v)`

Check if given number is within the range [x,y].


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2057">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-and"></span>
```


#### bit-and

+ `(bit-and x)`
+ `(bit-and x y)`
+ `(bit-and x y & r)`

x ∧ y - bitwise AND


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L411">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-and-not"></span>
```


#### bit-and-not

+ `(bit-and-not x)`
+ `(bit-and-not x y)`
+ `(bit-and-not x y & r)`

x ∧ ~y - bitwise AND (with complement second argument)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L427">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-clear"></span>
```


#### bit-clear

+ `(bit-clear x bit)`

Clear bit (set to `0`).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L479">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-flip"></span>
```


#### bit-flip

+ `(bit-flip x bit)`

Flip bit (set to `0` when `1` or to `1` when `0`).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L485">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-nand"></span>
```


#### bit-nand

+ `(bit-nand x)`
+ `(bit-nand x y)`
+ `(bit-nand x y & r)`

~(x ∧ y) - bitwise NAND


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L419">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-nor"></span>
```


#### bit-nor

+ `(bit-nor x)`
+ `(bit-nor x y)`
+ `(bit-nor x y & r)`

~(x ∨ y) - bitwise NOR


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L443">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-not"></span>
```


#### bit-not

+ `(bit-not x)`

~x - bitwise NOT


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L467">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-or"></span>
```


#### bit-or

+ `(bit-or x)`
+ `(bit-or x y)`
+ `(bit-or x y & r)`

x ∨ y - bitwise OR


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L435">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-set"></span>
```


#### bit-set

+ `(bit-set x bit)`

Set bit (set to `1`).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L473">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-shift-left"></span>
```


#### bit-shift-left

+ `(bit-shift-left x shift)`

Shift bits left


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L497">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-shift-right"></span>
```


#### bit-shift-right

+ `(bit-shift-right x shift)`

Shift bits right and keep most significant bit unchanged


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L509">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-test"></span>
```


#### bit-test

+ `(bit-test x bit)`

Test bit (return to `true` when `1` or `false` when `0`).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L491">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-xnor"></span>
```


#### bit-xnor

+ `(bit-xnor x)`
+ `(bit-xnor x y)`
+ `(bit-xnor x y & r)`

~(x⊕y) - bitwise XNOR


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L459">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bit-xor"></span>
```


#### bit-xor

+ `(bit-xor x)`
+ `(bit-xor x y)`
+ `(bit-xor x y & r)`

x⊕y - bitwise XOR


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L451">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bits-&gt;double"></span>
```


#### bits->double

+ `(bits->double v)`

Convert 64 bits to double


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1732">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bool-not"></span>
```


#### bool-not

+ `(bool-not x)`

Primitive boolean not


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L533">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-bool-xor"></span>
```


#### bool-xor

+ `(bool-xor x y)`
+ `(bool-xor x y & r)`

Primitive boolean xor


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L539">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cb"></span>
```


#### cb

+ `(cb x)`

$x^3$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1462">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cbrt"></span>
```


#### cbrt

+ `(cbrt x)`

$\sqrt[3]{x}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1243">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ceil"></span>
```


#### ceil

+ `(ceil x)`
+ `(ceil x scale)`

$\lceil x \rceil$. See: [qceil](#LOS-qceil).

  Rounding is done to a multiply of scale value (when provided).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1542">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cexpexp"></span>
```


#### cexpexp

+ `(cexpexp x)`

1-exp(-exp(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1215">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cloglog"></span>
```


#### cloglog

+ `(cloglog x)`

log(-log(1-x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1188">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cnorm"></span>
```


#### cnorm

+ `(cnorm v start1 stop1 start2 stop2)`
+ `(cnorm v start stop)`

Constrained version of norm. Result of [norm](#LOS-norm) is applied to [constrain](#LOS-constrain) to `[0,1]` or `[start2,stop2]` ranges.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1902">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-co-intervals"></span>
```


#### co-intervals

+ `(co-intervals data)`
+ `(co-intervals data number)`
+ `(co-intervals data number overlap)`

Divide sequence to overlaping intervals containing similar number of values. Same as R's `co.intervals()`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2091">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-combinations"></span>
```


#### combinations

+ `(combinations n k)`

Binomial coefficient (n choose k)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1418">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-constrain"></span>
```


#### constrain ^~MACRO~^

+ `(constrain value mn mx)`

Clamp `value` to the range `[mn,mx]`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1868">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-copy-sign"></span>
```


#### copy-sign

+ `(copy-sign magnitude sign)`

Returns a value with a magnitude of first argument and sign of second.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1861">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cos"></span>
```


#### cos

+ `(cos x)`

cos(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L680">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cos-interpolation"></span>
```


#### cos-interpolation

+ `(cos-interpolation start stop t)`

oF interpolateCosine interpolation. See also [lerp](#LOS-lerp)/[mlerp](#LOS-mlerp), [quad-interpolation](#LOS-quad-interpolation) or [smooth-interpolation](#LOS-smooth-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1936">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cosh"></span>
```


#### cosh

+ `(cosh x)`

cosh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L728">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cospi"></span>
```


#### cospi

+ `(cospi x)`

cos(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L686">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cot"></span>
```


#### cot

+ `(cot x)`

cot(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L772">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-coth"></span>
```


#### coth

+ `(coth x)`

Hyperbolic cotangent


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L835">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cotpi"></span>
```


#### cotpi

+ `(cotpi x)`

cot(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L778">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-covercos"></span>
```


#### covercos

+ `(covercos x)`

Covercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L904">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-coversin"></span>
```


#### coversin

+ `(coversin x)`

Coversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L892">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-crd"></span>
```


#### crd

+ `(crd x)`

Chord


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L874">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-csc"></span>
```


#### csc

+ `(csc x)`

csc(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L796">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-csch"></span>
```


#### csch

+ `(csch x)`

Hyperbolic cosecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L847">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cscpi"></span>
```


#### cscpi

+ `(cscpi x)`

csc(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L802">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-cut"></span>
```


#### cut

+ `(cut data breaks)`
+ `(cut x1 x2 breaks)`

Cut range or sequence into intervals


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2081">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-dec"></span>
```


#### dec

+ `(dec x)`

Primitive and inlined `dec`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L177">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-deg-in-rad"></span>
```


#### deg-in-rad ^~CONST~^

`deg-in-rad = 0.017453292519943295`

$\frac{\pi}{180}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1258">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-degrees"></span>
```


#### degrees

+ `(degrees rad)`

Convert radians into degrees.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1266">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-delta-eq"></span>
```


#### delta-eq

+ `(delta-eq a b)`
+ `(delta-eq a b accuracy)`
+ `(delta-eq a b abs-tol rel-tol)`

Checks equality for given absolute accuracy (default `1.0e-6`).

  Version with 4-arity accepts absolute and relative accuracy.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1632">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-delta="></span>
```


#### delta=

Alias for [delta-eq](#LOS-delta-eq)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1643">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-difference-of-products"></span>
```


#### difference-of-products

+ `(difference-of-products a b c d)`

Kahan's algorithm for (a*b)-(c*d) to avoid catastrophic cancellation.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L615">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-dist"></span>
```


#### dist

+ `(dist [x1 y1] [x2 y2])`
+ `(dist x1 y1 x2 y2)`

Euclidean distance between points `(x1,y1)` and `(x2,y2)`. See [fastmath.vector](#LOS-fastmath.vector) namespace to see other metrics which work on vectors.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1515">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-array-&gt;seq"></span>
```


#### double-array->seq

Convert double array into sequence.

  Alias for `seq`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2230">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-array-type"></span>
```


#### double-array-type


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2227">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-bits"></span>
```


#### double-bits

+ `(double-bits v)`

Returns double as 64-bits (long)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1725">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-double-array-&gt;seq"></span>
```


#### double-double-array->seq

+ `(double-double-array->seq res)`

Convert double array of double arrays into sequence of sequences. 


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2245">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-double-array-type"></span>
```


#### double-double-array-type


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2228">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-exponent"></span>
```


#### double-exponent

+ `(double-exponent v)`

Extract exponent information from double


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1739">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-high-bits"></span>
```


#### double-high-bits

+ `(double-high-bits v)`

Returns high word from double as bits


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1711">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-low-bits"></span>
```


#### double-low-bits

+ `(double-low-bits v)`

Returns low word from double as bits


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1718">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-one-minus-epsilon"></span>
```


#### double-one-minus-epsilon ^~CONST~^

`double-one-minus-epsilon = 0.9999999999999999`

Value of 0x1.fffffffffffffp-1d = 0.(9)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1771">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-double-significand"></span>
```


#### double-significand

+ `(double-significand v)`

Extract significand from double


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1746">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-eq"></span>
```


#### eq

+ `(eq _)`
+ `(eq a b)`
+ `(eq a b & r)`

Primitive math equality function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L337">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-even?"></span>
```


#### even?

+ `(even? x)`

Primitive and inlined `even?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L305">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-excsc"></span>
```


#### excsc

+ `(excsc x)`

Excosecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L997">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-exp"></span>
```


#### exp

+ `(exp x)`

exp(x) = e^x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1024">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-expexp"></span>
```


#### expexp

+ `(expexp x)`

exp(-exp(-x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1222">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-expm1"></span>
```


#### expm1

+ `(expm1 x)`

exp(x)-1 for small x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1053">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-exsec"></span>
```


#### exsec

+ `(exsec x)`

Exsecant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L991">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-factorial"></span>
```


#### factorial

+ `(factorial n)`

Factorial


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1363">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-factorial20"></span>
```


#### factorial20

+ `(factorial20 n)`

Factorial table up to 20!


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1358">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-falling-factorial"></span>
```


#### falling-factorial

+ `(falling-factorial n x)`

Falling (descending) factorial.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1391">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-falling-factorial-int"></span>
```


#### falling-factorial-int

+ `(falling-factorial-int n x)`

Falling (descending) factorial for integer n.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1381">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast*"></span>
```


#### fast* ^~DEPRECATED~^

*Deprecated: Use `*` instead*

+ `(fast*)`
+ `(fast* a)`
+ `(fast* a b)`
+ `(fast* a b & r)`

Primitive and inlined `*` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2312">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast+"></span>
```


#### fast+ ^~DEPRECATED~^

*Deprecated: Use `+` instead*

+ `(fast+)`
+ `(fast+ a)`
+ `(fast+ a b)`
+ `(fast+ a b & r)`

Primitive and inlined `+` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2292">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-"></span>
```


#### fast- ^~DEPRECATED~^

*Deprecated: Use `-` instead*

+ `(fast-)`
+ `(fast- a)`
+ `(fast- a b)`
+ `(fast- a b & r)`

Primitive and inlined `-` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2302">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-div"></span>
```


#### fast-div ^~DEPRECATED~^

*Deprecated: Use `/` instead*

+ `(fast-div)`
+ `(fast-div a)`
+ `(fast-div a b)`
+ `(fast-div a b & r)`

Primitive and inlined `/` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2322">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-identity"></span>
```


#### fast-identity ^~DEPRECATED~^

*Deprecated: Use `identity-double` instead*

+ `(fast-identity a)`

Identity on double.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2350">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-max"></span>
```


#### fast-max ^~DEPRECATED~^

*Deprecated: Use `max` instead*

+ `(fast-max a)`
+ `(fast-max a b)`
+ `(fast-max a b & r)`

Primitive and inlined `max` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2332">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fast-min"></span>
```


#### fast-min ^~DEPRECATED~^

*Deprecated: Use `min` instead*

+ `(fast-min a)`
+ `(fast-min a b)`
+ `(fast-min a b & r)`

Primitive and inlined `min` as a function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2341">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-floor"></span>
```


#### floor

+ `(floor x)`
+ `(floor x scale)`

$\lfloor x \rfloor$. See: [qfloor](#LOS-qfloor).

  Rounding is done to a multiply of scale value (when provided).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1532">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fma"></span>
```


#### fma

+ `(fma x y z)`

`(x y z)` -> `(+ z (* x y))` or `Math/fma` for java 9+


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L600">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-fpow"></span>
```


#### fpow

+ `(fpow x exponent)`

Fast version of pow where exponent is integer.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1347">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-frac"></span>
```


#### frac

+ `(frac v)`

Fractional part, always returns values from 0.0 to 1.0 (exclusive). See [sfrac](#LOS-sfrac) for signed version.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1652">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-gcd"></span>
```


#### gcd

+ `(gcd a b)`

Fast binary greatest common divisor (Stein's algorithm)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2138">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-group-by-intervals"></span>
```


#### group-by-intervals

+ `(group-by-intervals coll)`
+ `(group-by-intervals intervals coll)`

Group sequence of values into given intervals.

  If `intervals` are missing, use [co-intervals](#LOS-co-intervals) to find some.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2113">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-hacovercos"></span>
```


#### hacovercos

+ `(hacovercos x)`

Hacovercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L961">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-hacoversin"></span>
```


#### hacoversin

+ `(hacoversin x)`

Hacoversine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L949">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-havercos"></span>
```


#### havercos

+ `(havercos x)`

Havercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L955">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-haversin"></span>
```


#### haversin

+ `(haversin x)`
+ `(haversin [lat1 lon1] [lat2 lon2])`
+ `(haversin lat1 lon1 lat2 lon2)`

Haversine formula for value or lattitude and longitude pairs.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L934">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-haversine"></span>
```


#### haversine

Haversine ([haversin](#LOS-haversin) alias)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L947">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-haversine-dist"></span>
```


#### haversine-dist

+ `(haversine-dist [lat1 lon1] [lat2 lon2])`
+ `(haversine-dist lat1 lon1 lat2 lon2)`

Haversine distance `d` for `r=1`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1015">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-high-2-exp"></span>
```


#### high-2-exp

+ `(high-2-exp x)`

Find lowest exponent (power of 2) which is greater or equal `x`. See [low-2-exp](#LOS-low-2-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1669">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-high-exp"></span>
```


#### high-exp

+ `(high-exp b x)`

Find lowest exponent for base `b` which is higher or equal`x`. See also [low-exp](#LOS-low-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1677">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-hypot"></span>
```


#### hypot

+ `(hypot x y)`
+ `(hypot x y z)`

Hypot.
  See also [hypot-sqrt](#LOS-hypot-sqrt).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1493">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-hypot-sqrt"></span>
```


#### hypot-sqrt

+ `(hypot-sqrt x y)`
+ `(hypot-sqrt x y z)`

Hypot, sqrt version: $\sqrt{x^2+y^2}$ or $\sqrt{x^2+y^2+z^2}$.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1504">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-iabs"></span>
```


#### iabs

+ `(iabs x)`

$|x|$ - `long` version. See [abs](#LOS-abs).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1605">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-identity-double"></span>
```


#### identity-double

+ `(identity-double a)`

Identity on double.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L563">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-identity-long"></span>
```


#### identity-long

+ `(identity-long a)`

Identity on double.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L568">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-inc"></span>
```


#### inc

+ `(inc x)`

Primitive and inlined `inc`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L165">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-inf?"></span>
```


#### inf?

+ `(inf? v)`

Check if a number is an infinite (positive or negative).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2027">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-integer?"></span>
```


#### integer?

+ `(integer? v)`

Check if given real number is an integer.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L573">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-inv-factorial"></span>
```


#### inv-factorial

+ `(inv-factorial n)`

Inverse of factorial, 1/n!


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1369">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-invalid-double?"></span>
```


#### invalid-double?

+ `(invalid-double? v)`

Check if a number is not finite double (NaN or ±Inf).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2045">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-itrunc"></span>
```


#### itrunc

+ `(itrunc v)`

Truncate fractional part, keep sign. Returns `long`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1615">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-jvm-version"></span>
```


#### jvm-version ^~CONST~^

`jvm-version = 21`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L33">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-lcm"></span>
```


#### lcm

+ `(lcm a b)`

Fast binary least common multiplier.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2143">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-lerp"></span>
```


#### lerp

+ `(lerp start stop t)`

Linear interpolation between `start` and `stop` for amount `t`. See also [mlerp](#LOS-mlerp), [cos-interpolation](#LOS-cos-interpolation), [quad-interpolation](#LOS-quad-interpolation) or [smooth-interpolation](#LOS-smooth-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1922">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ln"></span>
```


#### ln

+ `(ln x)`

log(x)=ln(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1038">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log"></span>
```


#### log

+ `(log x)`
+ `(log base x)`

log(x)=ln(x) or logarithm with given `base`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1030">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log-combinations"></span>
```


#### log-combinations

+ `(log-combinations n k)`

Log of binomial coefficient (n choose k)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1433">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log-factorial"></span>
```


#### log-factorial

+ `(log-factorial x)`

Log factorial, alias to log-gamma


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1375">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log10"></span>
```


#### log10

+ `(log10 x)`

log_10(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1043">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1mexp"></span>
```


#### log1mexp

+ `(log1mexp x)`

log(1-exp(x)), x<0


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1077">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1p"></span>
```


#### log1p

+ `(log1p x)`

log(1+x) for small x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1048">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1pexp"></span>
```


#### log1pexp

+ `(log1pexp x)`

log(1+exp(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1067">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1pmx"></span>
```


#### log1pmx

+ `(log1pmx x)`

log(1+x)-x


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1113">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log1psq"></span>
```


#### log1psq

+ `(log1psq x)`

log(1+x^2))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1091">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log2"></span>
```


#### log2

+ `(log2 x)`

Logarithm with base 2.

  $\ln_2{x}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1297">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log2int"></span>
```


#### log2int

+ `(log2int v)`

Fast and integer version of log2, returns long


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1753">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-log2mexp"></span>
```


#### log2mexp

+ `(log2mexp x)`

log(2-exp(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1084">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logaddexp"></span>
```


#### logaddexp

+ `(logaddexp x y)`

log(exp(x)+exp(y))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1139">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logb"></span>
```


#### logb

+ `(logb b x)`

Logarithm with base `b`.

  $\ln_b{x}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1307">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logcosh"></span>
```


#### logcosh

+ `(logcosh x)`

log(cosh(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1316">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logexpm1"></span>
```


#### logexpm1

+ `(logexpm1 x)`

log(exp(x)-1))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1098">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logistic"></span>
```


#### logistic

Alias for [sigmoid](#LOS-sigmoid)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1288">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logit"></span>
```


#### logit

+ `(logit x)`

Logit function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1290">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-loglog"></span>
```


#### loglog

+ `(loglog x)`

-log(-log(x))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1195">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logmxp1"></span>
```


#### logmxp1

+ `(logmxp1 x)`

log(x)-x+1


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1128">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logsubexp"></span>
```


#### logsubexp

+ `(logsubexp x y)`

log(abs(exp(x)-exp(y)))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1147">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-logsumexp"></span>
```


#### logsumexp

+ `(logsumexp xs)`

log(exp(x1)+...+exp(xn))


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1155">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-add"></span>
```


#### long-add

+ `(long-add)`
+ `(long-add a)`
+ `(long-add a b)`
+ `(long-add a b c)`
+ `(long-add a b c d)`
+ `(long-add a b c d & r)`

Primitive and inlined `+`. Coerces arguments and returned value to a long.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L85">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-dec"></span>
```


#### long-dec

+ `(long-dec x)`

Primitive and inlined `dec` coerced to a long


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L183">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-div"></span>
```


#### long-div

+ `(long-div a)`
+ `(long-div a b)`
+ `(long-div a b c)`
+ `(long-div a b c d)`
+ `(long-div a b c d & r)`

Primitive and inlined `/`. Coerces to arguments and returned value to a long.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L154">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-inc"></span>
```


#### long-inc

+ `(long-inc x)`

Primitive and inlined `inc` coerced to a long


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L171">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-max"></span>
```


#### long-max

+ `(long-max a)`
+ `(long-max a b)`
+ `(long-max a b c)`
+ `(long-max a b c d)`
+ `(long-max a b c d & r)`

Primitive and inlined `max`. Coerces arguments and returned values to longs.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L258">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-min"></span>
```


#### long-min

+ `(long-min a)`
+ `(long-min a b)`
+ `(long-min a b c)`
+ `(long-min a b c d)`
+ `(long-min a b c d & r)`

Primitive and inlined `min`. Coerces arguments and returned values to longs.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L236">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-mod"></span>
```


#### long-mod

+ `(long-mod x y)`

Primitive and inlined `mod` coerced to longs


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L219">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-mult"></span>
```


#### long-mult

+ `(long-mult)`
+ `(long-mult a)`
+ `(long-mult a b)`
+ `(long-mult a b c)`
+ `(long-mult a b c d)`
+ `(long-mult a b c d & r)`

Primitive and inlined `*`. Coerces arguments and returned value to a long.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L131">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-quot"></span>
```


#### long-quot

+ `(long-quot x y)`

Primitive and inlined `quot` coerced to longs


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L207">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-rem"></span>
```


#### long-rem

+ `(long-rem x y)`

Primitive and inlined `rem` coerced to longs


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L195">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-long-sub"></span>
```


#### long-sub

+ `(long-sub a)`
+ `(long-sub a b)`
+ `(long-sub a b c)`
+ `(long-sub a b c d)`
+ `(long-sub a b c d & r)`

Primitive and inlined `-`. Coerces arguments and returned value to a long.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L108">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-low-2-exp"></span>
```


#### low-2-exp

+ `(low-2-exp x)`

Find greatest exponent (power of 2) which is lower or equal `x`. See [high-2-exp](#LOS-high-2-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1665">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-low-exp"></span>
```


#### low-exp

+ `(low-exp b x)`

Find greatest exponent for base `b` which is lower or equal `x`. See also [high-exp](#LOS-high-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1673">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-make-norm"></span>
```


#### make-norm

+ `(make-norm start stop)`
+ `(make-norm start stop dstart dstop)`

Make [norm](#LOS-norm) function for given range. Resulting function accepts `double` value (with optional target `[dstart,dstop]` range) and returns `double`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1893">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-max"></span>
```


#### max

+ `(max a)`
+ `(max a b)`
+ `(max a b c)`
+ `(max a b c d)`
+ `(max a b c d & r)`

Primitive and inlined `max`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L247">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-min"></span>
```


#### min

+ `(min a)`
+ `(min a b)`
+ `(min a b c)`
+ `(min a b c d)`
+ `(min a b c d & r)`

Primitive and inlined `min`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L225">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-mlerp"></span>
```


#### mlerp ^~MACRO~^

+ `(mlerp start stop t)`

[lerp](#LOS-lerp) as macro. For inline code. See also [lerp](#LOS-lerp), [cos-interpolation](#LOS-cos-interpolation), [quad-interpolation](#LOS-quad-interpolation) or [smooth-interpolation](#LOS-smooth-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1930">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-mnorm"></span>
```


#### mnorm ^~MACRO~^

+ `(mnorm v start stop)`
+ `(mnorm v start1 stop1 start2 stop2)`

Macro version of [norm](#LOS-norm).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1886">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-mod"></span>
```


#### mod

+ `(mod x y)`

Primitive and inlined `mod`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L213">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-muladd"></span>
```


#### muladd

+ `(muladd x y z)`

`(x y z)` -> `(+ z (* x y))` or `Math/fma` for java 9+


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L593">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-nan?"></span>
```


#### nan?

+ `(nan? v)`

Check if a number is a NaN


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2021">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-near-zero?"></span>
```


#### near-zero?

+ `(near-zero? x)`
+ `(near-zero? x abs-tol)`
+ `(near-zero? x abs-tol rel-tol)`

Checks if given value is near zero with absolute (default: `1.0e-6`) and/or relative (default `0.0`) tolerance.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1645">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-neg-inf?"></span>
```


#### neg-inf?

+ `(neg-inf? v)`

Check if a number is negatively infinite.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2039">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-neg?"></span>
```


#### neg?

+ `(neg? x)`

Primitive and inlined `neg?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L281">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-negative-zero?"></span>
```


#### negative-zero?

+ `(negative-zero? x)`

Check if zero is negative, ie. -0.0


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L555">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-negmuladd"></span>
```


#### negmuladd

+ `(negmuladd x y z)`

`(x y z)` -> `(+ z (* -x y))` or `Math/fma` for java 9+


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L607">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-next-double"></span>
```


#### next-double

+ `(next-double v)`
+ `(next-double v delta)`

Next double value. Optional value `delta` sets step amount.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1693">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-norm"></span>
```


#### norm

+ `(norm v start stop)`
+ `(norm v start1 stop1 start2 stop2)`

Normalize `v` from the range `[start,stop]` to the range `[0,1]` or map `v` from the range `[start1,stop1]` to the range `[start2,stop2]`. See also [make-norm](#LOS-make-norm).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1873">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-not-neg?"></span>
```


#### not-neg?

+ `(not-neg? x)`

Primitive and inlined `not-neg?` (x>=0.0)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L293">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-not-pos?"></span>
```


#### not-pos?

+ `(not-pos? x)`

Primitive and inlined `not-pos?` (x<=0.0)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L299">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-not=="></span>
```


#### not==

+ `(not== _)`
+ `(not== a b)`
+ `(not== a b & r)`

Not equality. For more than two arguments, pairwise not equality is checked.

  `(not== 1 2 1)` === `(and (not= 1 2) (not= 2 1))`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L392">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-odd?"></span>
```


#### odd?

+ `(odd? x)`

Primitive and inlined `odd?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L311">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-one?"></span>
```


#### one?

+ `(one? x)`

Primitive and inlined `one?` (x==1.0)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L275">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-order"></span>
```


#### order

+ `(order vs)`
+ `(order vs decreasing?)`

Ordering permutation. See [R docs](https://www.rdocumentation.org/packages/base/versions/3.6.1/topics/order)

  Order uses 0 based indexing.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2213">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pos-inf?"></span>
```


#### pos-inf?

+ `(pos-inf? v)`

Check if a number is positively infinite.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2033">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pos?"></span>
```


#### pos?

+ `(pos? x)`

Primitive and inlined `pos?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L287">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pow"></span>
```


#### pow

+ `(pow x exponent)`

Power of a number


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1335">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pow2"></span>
```


#### pow2

+ `(pow2 x)`

Same as [sq](#LOS-sq). $x^2$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1452">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-pow3"></span>
```


#### pow3

+ `(pow3 x)`

$x^3$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1457">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-prev-double"></span>
```


#### prev-double

+ `(prev-double v)`
+ `(prev-double v delta)`

Next double value. Optional value `delta` sets step amount.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1702">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qceil"></span>
```


#### qceil

+ `(qceil x)`

Fast version of [ceil](#LOS-ceil). Returns `long`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1579">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qcos"></span>
```


#### qcos

+ `(qcos x)`

Fast and less accurate cos(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L764">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qdist"></span>
```


#### qdist

+ `(qdist [x1 y1] [x2 y2])`
+ `(qdist x1 y1 x2 y2)`

Quick version of Euclidean distance between points. [qsqrt](#LOS-qsqrt) is used instead of [sqrt](#LOS-sqrt).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1523">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qexp"></span>
```


#### qexp

+ `(qexp x)`

Quick and less accurate version of [exp](#LOS-exp).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1250">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qfloor"></span>
```


#### qfloor

+ `(qfloor x)`

Fast version of [floor](#LOS-floor). Returns `long`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1573">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qlog"></span>
```


#### qlog

+ `(qlog x)`

Fast and less accurate version of [log](#LOS-log).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1230">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qpow"></span>
```


#### qpow

+ `(qpow x exponent)`

Fast and less accurate version of [pow](#LOS-pow).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1341">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qround"></span>
```


#### qround

+ `(qround x)`

Fast version of [round](#LOS-round). Returns `long`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1585">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qsin"></span>
```


#### qsin

+ `(qsin x)`

Fast and less accurate sin(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L758">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-qsqrt"></span>
```


#### qsqrt

+ `(qsqrt x)`

Approximated [sqrt](#LOS-sqrt) using binary operations with error `1.0E-2`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1481">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-quad-interpolation"></span>
```


#### quad-interpolation

+ `(quad-interpolation start stop t)`

Quad interpolation. See also [lerp](#LOS-lerp)/[mlerp](#LOS-mlerp), [cos-interpolation](#LOS-cos-interpolation) or [smooth-interpolation](#LOS-smooth-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1946">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-quot"></span>
```


#### quot

+ `(quot x y)`

Primitive and inlined `quot`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L201">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rad-in-deg"></span>
```


#### rad-in-deg ^~CONST~^

`rad-in-deg = 57.29577951308232`

$\frac{180}{\pi}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1257">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-radians"></span>
```


#### radians

+ `(radians deg)`

Convert degrees into radians.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1260">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rank"></span>
```


#### rank

+ `(rank vs)`
+ `(rank vs ties)`
+ `(rank vs ties desc?)`

Sample ranks. See [R docs](https://www.rdocumentation.org/packages/base/versions/3.6.1/topics/rank).

  Rank uses 0 based indexing.
  
  Possible tie strategies: `:average`, `:first`, `:last`, `:random`, `:min`, `:max`, `:dense`.

  `:dense` is the same as in `data.table::frank` from R


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2175">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rank1"></span>
```


#### rank1


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2210">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rem"></span>
```


#### rem

+ `(rem x y)`

Primitive and inlined `rem`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L189">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-remainder"></span>
```


#### remainder

+ `(remainder dividend divisor)`

From `FastMath` doc: returns dividend - divisor * n,
  where n is the mathematical integer closest to dividend/divisor. Returned value in `[-|divisor|/2,|divisor|/2]`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1591">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rint"></span>
```


#### rint

+ `(rint x)`
+ `(rint x scale)`

Round to `double`. See [round](#LOS-round), [qround](#LOS-qround).

  Rounding is done to a multiply of scale value (when provided).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1557">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rising-factorial"></span>
```


#### rising-factorial

+ `(rising-factorial n x)`

Rising (Pochhammer) factorial.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1410">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rising-factorial-int"></span>
```


#### rising-factorial-int

+ `(rising-factorial-int n x)`

Rising (Pochhammer) factorial for integer n.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1400">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-round"></span>
```


#### round

+ `(round x)`

Round to `long`. See: [rint](#LOS-rint), [qround](#LOS-qround).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1552">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-round-even"></span>
```


#### round-even

+ `(round-even x)`

Round evenly (like in round in R), IEEE / IEC rounding


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1567">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-round-up-pow2"></span>
```


#### round-up-pow2

+ `(round-up-pow2 v)`

Round long to the next power of 2


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1681">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-rqsqrt"></span>
```


#### rqsqrt

+ `(rqsqrt x)`

Reciprocal of [qsqrt](#LOS-qsqrt). Quick and less accurate.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1487">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-safe-sqrt"></span>
```


#### safe-sqrt

+ `(safe-sqrt value)`

Safe sqrt, for value <= 0 result is 0.

  $
  \left\\{
  \begin{array}{lr}
  0 & : x \leq 0\\\\
  \sqrt{x} & : x > 0
  \end{array}
  \\right.
  $


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1467">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sample"></span>
```


#### sample

+ `(sample f number-of-values)`
+ `(sample f number-of-values domain?)`
+ `(sample f domain-min domain-max number-of-values)`
+ `(sample f domain-min domain-max number-of-values domain?)`

Sample function `f` and return sequence of values.

  `range-min` defaults to 0.0, `range-max` to 1.0.

  Range is inclusive.

  When optional `domain?` is set to true (default: false) function returns pairs `[x,(f x)]`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2152">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sec"></span>
```


#### sec

+ `(sec x)`

sec(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L784">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sech"></span>
```


#### sech

+ `(sech x)`

Hyperbolic secant


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L841">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-secpi"></span>
```


#### secpi

+ `(secpi x)`

sec(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L790">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-seq-&gt;double-array"></span>
```


#### seq->double-array

+ `(seq->double-array vs)`

Convert sequence to double array. Returns input if `vs` is double array already.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2234">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-seq-&gt;double-double-array"></span>
```


#### seq->double-double-array

+ `(seq->double-double-array vss)`

Convert sequence to double-array of double-arrays.
  
  If sequence is double-array of double-arrays returns `vss`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2250">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sfrac"></span>
```


#### sfrac

+ `(sfrac v)`

Fractional part, always returns values from -1.0 to 1.0 (exclusive). See [frac](#LOS-frac) for unsigned version.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1656">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sgn"></span>
```


#### sgn

+ `(sgn value)`

Return -1 when `value` is negative, 1 otherwise. See also [signum](#LOS-signum).

  $
  \left\\{
  \begin{array}{lr}
  1.0 & : x \geq 0\\\\
  -1.0 & : x < 0\\\\
  \end{array}
  \\right.
  $


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1842">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sigmoid"></span>
```


#### sigmoid

+ `(sigmoid x)`

Sigmoid function


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1281">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-signum"></span>
```


#### signum

+ `(signum value)`

Return 1 if `value` is > 0, 0 if it is 0, -1 otherwise. See also [sgn](#LOS-sgn).

  $
  \left\\{
  \begin{array}{lr}
  1.0 & : x > 0\\\\
  -1.0 & : x < 0\\\\
  0.0 & : x = 0
  \end{array}
  \\right.
  $


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1822">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sin"></span>
```


#### sin

+ `(sin x)`

sin(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L668">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sinc"></span>
```


#### sinc

+ `(sinc v)`

Sinc function.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1273">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sinh"></span>
```


#### sinh

+ `(sinh x)`

sinh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L722">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sinpi"></span>
```


#### sinpi

+ `(sinpi x)`

sin(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L674">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-slice-range"></span>
```


#### slice-range

+ `(slice-range start end cnt)`
+ `(slice-range cnt)`

Slice range to get `cnt` number of points evenly distanced.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2074">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-smooth-interpolation"></span>
```


#### smooth-interpolation

+ `(smooth-interpolation start stop t)`

Smoothstep based interpolation. See also [lerp](#LOS-lerp)/[mlerp](#LOS-mlerp), [quad-interpolation](#LOS-quad-interpolation) or [cos-interpolation](#LOS-cos-interpolation).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1941">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-smooth-max"></span>
```


#### smooth-max

+ `(smooth-max xs)`
+ `(smooth-max xs alpha)`
+ `(smooth-max xs alpha family)`

Smooth maximum function.

  A smooth function with `alpha` argument. When `alpha` goes to infinity, function returns maximum value of `xs`.

  Family:

  * `:lse` - LogSumExp (default)
  * `:boltzmann` - Boltzmann operator, works for small alpha values
  * `:mellowmax`
  * `:p-norm`
  * `:smu` - smooth maximum unit, epsilon = 1/alpha > 0


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1992">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-smoothstep"></span>
```


#### smoothstep

+ `(smoothstep edge0 edge1 x)`

GL [smoothstep](https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/smoothstep.xhtml).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1954">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sq"></span>
```


#### sq

+ `(sq x)`

Same as [pow2](#LOS-pow2). $x^2$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1447">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sqrt"></span>
```


#### sqrt

+ `(sqrt x)`

$\sqrt{x}$


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1237">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-sum-of-products"></span>
```


#### sum-of-products

+ `(sum-of-products a b c d)`

Kahan's algorithm for (a*b)+(c*d) to avoid catastrophic cancellation.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L621">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-tan"></span>
```


#### tan

+ `(tan x)`

tan(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L692">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-tanh"></span>
```


#### tanh

+ `(tanh x)`

tanh(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L734">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-tanpi"></span>
```


#### tanpi

+ `(tanpi x)`

tan(pi*x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L698">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-trunc"></span>
```


#### trunc

+ `(trunc v)`

Truncate fractional part, keep sign. Returns `double`.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1611">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-ulp"></span>
```


#### ulp

+ `(ulp x)`

Unit in the Last Place, distance between next value larger than `x` and `x`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1763">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-unsigned-bit-shift-right"></span>
```


#### unsigned-bit-shift-right

+ `(unsigned-bit-shift-right x shift)`

Shift bits right and set most significant bit to `0`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L521">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-unuse-primitive-operators"></span>
```


#### unuse-primitive-operators

+ `(unuse-primitive-operators)`
+ `(unuse-primitive-operators skip-set)`

Undoes the work of [use-primitive-operators](#LOS-use-primitive-operators). This is idempotent.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2281">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-use-primitive-operators"></span>
```


#### use-primitive-operators

+ `(use-primitive-operators)`
+ `(use-primitive-operators skip-set)`

Replaces Clojure's arithmetic and number coercion functions with primitive equivalents.  These are
   defined as macros, so they cannot be used as higher-order functions. This is an idempotent operation. Undo with [unuse-primitive-operators](#LOS-unuse-primitive-operators).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2270">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-valid-double?"></span>
```


#### valid-double?

+ `(valid-double? v)`

Check if a number is finite double.


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L2051">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-vercos"></span>
```


#### vercos

+ `(vercos x)`

Vercosine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L898">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-versin"></span>
```


#### versin

+ `(versin x)`

Versine


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L886">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-wrap"></span>
```


#### wrap

+ `(wrap [start stop] value)`
+ `(wrap start stop value)`

Wrap overflowed value into the range, similar to [ofWrap](http://openframeworks.cc/documentation/math/ofMath/#!show_ofWrap).


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1963">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xexpx"></span>
```


#### xexpx

+ `(xexpx x)`

x * exp(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1202">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xexpy"></span>
```


#### xexpy

+ `(xexpy x y)`

x * exp(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1208">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xlog1py"></span>
```


#### xlog1py

+ `(xlog1py x y)`

x * log(1+y)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1182">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xlogx"></span>
```


#### xlogx

+ `(xlogx x)`

x * log(x)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1171">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xlogy"></span>
```


#### xlogy

+ `(xlogy x y)`

x * log(y)


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L1176">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-xor"></span>
```


#### xor

+ `(xor x y)`
+ `(xor x y & r)`

Primitive boolean xor


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L546">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<span id="#LOS-zero?"></span>
```


#### zero?

+ `(zero? x)`

Primitive and inlined `zero?`


```{=html}
<div style="text-align: right"><small><a href="https://github.com/generateme/fastmath/blob/master/src/fastmath/core.clj#L269">source</a></small><hr style="margin: 0" /></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/generateme/fastmath//blob/master/clay/core.clj">clay/core.clj</a></small></small></pre></div>
```
