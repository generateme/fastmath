---
format:
  html:
    toc: true
    toc-depth: 5
    theme: [cosmo, ../../clay/custom.scss]
    toc-location: right
    anchor-sections: true
    reference-location: margin
    fontsize: 0.9em
    output-file: interpolation.html
code-block-background: true

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
.clay-side-by-side .sourceCode {margin: 0}
.clay-side-by-side {margin: 1em 0}
</style>
<script src="interpolation_files/md-default61.js" type="text/javascript"></script><script src="interpolation_files/md-default62.js" type="text/javascript"></script>

# Interpolation {.unnumbered}

Interpolation namespace defines the unified API for various interpolation methods. Most of them also extrapolates. Methods include:

* 1d interpolation
* 2d interpolation on irregular grid points
* Multivariate interpolation
* Kernel based interpolation
* Smoothing

All methods are accessible from `fastmath.interpolation` namespace via a multimethod `interpolation`. Additionally each method is implemented as a regular function in the dedicated namespace. `interpolation` returns an interpolant function

Both examples below are equivalent:


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation :as i]
         '[fastmath.interpolation.linear :as linear])
```
:::



::: {.sourceClojure}
```clojure
(def i1 (i/interpolation :linear [1 2 3] [4 5 -1]))
```
:::



::: {.sourceClojure}
```clojure
(def i2 (linear/linear [1 2 3] [4 5 -1]))
```
:::



::: {.sourceClojure}
```clojure
{:i1 (i1 2.5)
 :i2 (i2 2.5)}
```
:::



::: {.printedClojure}
```clojure
{:i1 2.0, :i2 2.0}

```
:::


List of all possible methods:


::: {.sourceClojure}
```clojure
(sort (keys (methods i/interpolation)))
```
:::



::: {.printedClojure}
```clojure
(:akima :b-spline :barycentric :bicubic :bilinear :cir :cubic :cubic-2d :cubic-smoothing :divided-difference :gp :kriging :linear :loess :microsphere-projection :monotone :neville :pava :polynomial :rbf :shepard :sprague :step :step-after :step-before)

```
:::


The following functions and samples will be used as a target to illustrate usage of described method.


## 1d target

$$f(x)=\sin\left(\frac{x\cos(x+1)}{2}\right)$$


::: {.sourceClojure}
```clojure
(defn target-1d [x] (m/sin (* 0.5 x (m/cos (inc x)))))
```
:::



::: {.sourceClojure}
```clojure
(target-1d 4.0)
```
:::



::: {.printedClojure}
```clojure
0.5373775050861961

```
:::


Points used in interpolation


::: {.sourceClojure}
```clojure
(def xs1 [0.5 0.69 1.73 2.0 2.28 3.46 3.5 4.18 4.84 5.18 5.53 5.87 6.22 6.5])
```
:::



::: {.sourceClojure}
```clojure
(def ys1 (map target-1d xs1))
```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/0.png" />
```

:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/1.png" />
```

:::



### Monotone


::: {.sourceClojure}
```clojure
(def xxss (range 0 400 5))
```
:::



::: {.sourceClojure}
```clojure
(def data (mapv (fn [^long v] (m/+ v (m/+ (m/* 30 (m/sin (m// v 60.0)))
                                       (r/grand (m// v -2.0) (m// v 10.0))))) xxss))
```
:::



::: {.sourceClojure}
```clojure
(ggplot/->file
 (ggplot/function+scatter (i/interpolation :cir xxss data) xxss data {:dot-size 2
                                                                      :dot-alpha 0.6
                                                                      :title "CIR"}))
```
:::



::: {.printedClojure}
```clojure



```
:::



::: {.sourceClojure}
```clojure
(ggplot/->file
 (ggplot/function+scatter (i/interpolation :cir xxss data {:method :monotone})
                          xxss data {:dot-size 2
                                     :dot-alpha 0.6
                                     :title "CIR smoothed"}))
```
:::



::: {.printedClojure}
```clojure



```
:::



## 2d target

$$f(x,y)=\sin\left(\frac{x-100}{10}\cos\left(\frac{y}{20}\right)\right)+\frac{x}{100}+\left(\frac{y-100}{100}\right)^2+1$$


::: {.sourceClojure}
```clojure
(defn target-2d [[x y]] (m/+ 1.0 (m/sin (* (/ (- x 100.0) 10.0) (m/cos (/ y 20.0))))
                          (m// x 100.0)
                          (m/sq (m// (m/- y 100.0) 100.0))))
```
:::



::: {.sourceClojure}
```clojure
(target-2d [20 20])
```
:::



::: {.printedClojure}
```clojure
2.7649202623006808

```
:::



### Grid

Points for grid interpolation


::: {.sourceClojure}
```clojure
(def xs2 [20 25 30 35 40 50 58 66 100 121 140 150 160 170 180])
```
:::



::: {.sourceClojure}
```clojure
(def ys2 [20 30 58 66 90  121 140 152 170     180])
```
:::



::: {.sourceClojure}
```clojure
(def zss (for [x xs2]
         (for [y ys2]
           (target-2d [x y]))))
```
:::



::: {.sourceClojure}
```clojure
(def xss (repeatedly 300 #(vector (r/drandom uniform-seed-44 20 180)
                                (r/drandom uniform-seed-44 20 180))))
```
:::



::: {.sourceClojure}
```clojure
(def ys3 (map target-2d xss))
```
:::



::: {.sourceClojure}
```clojure
(defn error-1d
  [interpolant]
  (m/sqrt (calc/integrate (fn [^double x] (m/sq (m/- (target-1d x) (interpolant x)))) 0.5 6.5)))
```
:::



::: {.sourceClojure}
```clojure
(error-1d (linear/linear xs1 ys1))
```
:::



::: {.printedClojure}
```clojure
0.2110302144467739

```
:::


For 2d case the following formula will be used:

$$error_{2d}(f,g)=\|f-g\|=\sqrt{\int_{20}^{180}\int_{20}^{180}|f(x,y)-g(x,y)|^2\,dx dy}$$


::: {.sourceClojure}
```clojure
(defn error-2d
  [interpolant]
  (m/sqrt (calc/cubature (fn [xy] (m/sq (m/- (target-2d xy) (interpolant xy))))
                         [20.0 20.0]
                         [180.0 180.0])))
```
:::



::: {.sourceClojure}
```clojure
(error-2d (linear/bilinear xs2 ys2 zss))
```
:::



::: {.printedClojure}
```clojure
102.03678750452109

```
:::



## 1d


### Linear

Linear piecewise interpolation and extrapolation. Extrapolation uses a slope from the boundaries.
See more on [Wikipedia](https://en.wikipedia.org/wiki/Linear_interpolation)


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.linear :as linear])
```
:::



::: {.sourceClojure}
```clojure
(def linear (linear/linear xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(linear 4.0)
```
:::



::: {.printedClojure}
```clojure
0.49924424111385607

```
:::



::: {.sourceClojure}
```clojure
(error-1d linear)
```
:::



::: {.printedClojure}
```clojure
0.2110302144467739

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/2.png" />
```

:::



### Cubic

Natural cubic spline (second derivatives at boundary points have value $0$) interpolation and extrapolation.
See more on [Wikipedia](https://en.wikipedia.org/wiki/Spline_interpolation)


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.cubic :as cubic])
```
:::



::: {.sourceClojure}
```clojure
(def cubic (cubic/cubic xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(cubic 4.0)
```
:::



::: {.printedClojure}
```clojure
0.5516054931803801

```
:::



::: {.sourceClojure}
```clojure
(error-1d cubic)
```
:::



::: {.printedClojure}
```clojure
0.0275840592896124

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/3.png" />
```

:::



### Akima

See more on [Wikipedia](https://en.wikipedia.org/wiki/Akima_spline)


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.acm :as acm])
```
:::



::: {.sourceClojure}
```clojure
(def akima (acm/akima xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(akima 4.0)
```
:::



::: {.printedClojure}
```clojure
0.5335842087231077

```
:::



::: {.sourceClojure}
```clojure
(error-1d akima)
```
:::



::: {.printedClojure}
```clojure
0.03487751999898592

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/4.png" />
```

:::



### Neville

See more on [Wikipedia](https://en.wikipedia.org/wiki/Neville%27s_algorithm)


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.acm :as acm])
```
:::



::: {.sourceClojure}
```clojure
(def neville (acm/neville xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(neville 4.0)
```
:::



::: {.printedClojure}
```clojure
0.5432043004304535

```
:::



::: {.sourceClojure}
```clojure
(error-1d neville)
```
:::



::: {.printedClojure}
```clojure
0.8675392877418397

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/5.png" />
```

:::



### Barycentric

Rational interpolation as described in [Numerical Recipes ch. 3.4](https://numerical.recipes/book.html). The `order` (default $1$) parameter contols number of points used to calculate weights. Higher order means better accuracy.


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.barycentric :as barycentric])
```
:::



::: {.sourceClojure}
```clojure
(defn barycentric
  ([] (barycentric/barycentric xs1 ys1))
  ([order] (barycentric/barycentric xs1 ys1 {:order order})))
```
:::



::: {.sourceClojure}
```clojure
((barycentric) 4.0)
```
:::



::: {.printedClojure}
```clojure
0.5492673111356233

```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>order</th><th>error</th><th>barrycentric(4.0)</th><th>error at 4.0</th></tr></thead><tbody><tr><td>0</td><td>0.5193270391333753</td><td>0.6329368698778738</td><td>0.0955593647916777</td></tr><tr><td>1</td><td>0.03176373180495161</td><td>0.5492673111356233</td><td>0.011889806049427243</td></tr><tr><td>2</td><td>0.05019164899125852</td><td>0.5160607443493412</td><td>0.021316760736854845</td></tr><tr><td>3</td><td>0.028650229888319802</td><td>0.5232915410624766</td><td>0.014085964023719533</td></tr><tr><td>4</td><td>0.00351102181650211</td><td>0.5349629695697342</td><td>0.0024145355164618687</td></tr><tr><td>5</td><td>0.009022181871044352</td><td>0.5387189359388596</td><td>0.0013414308526634722</td></tr></tbody></table>
```

:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/6.png" /></td><td><img class="clay-image" src="interpolation_files/7.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/8.png" /></td><td><img class="clay-image" src="interpolation_files/9.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/10.png" /></td><td><img class="clay-image" src="interpolation_files/11.png" /></td></tr></tbody></table>
```

:::



### B-spline




::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.ssj :as ssj])
```
:::



::: {.sourceClojure}
```clojure
(defn b-spline
  ([] (ssj/b-spline xs1 ys1))
  ([degree] (b-spline degree nil))
  ([degree hp1] (ssj/b-spline xs1 ys1 {:degree degree :hp1 hp1})))
```
:::



::: {.sourceClojure}
```clojure
((b-spline) 4.0)
```
:::



::: {.printedClojure}
```clojure
0.1610170071559863

```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/12.png" /></td><td><img class="clay-image" src="interpolation_files/13.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/14.png" /></td><td><img class="clay-image" src="interpolation_files/15.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/16.png" /></td><td><img class="clay-image" src="interpolation_files/17.png" /></td></tr></tbody></table>
```

:::



### Divided difference


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.acm :as acm])
```
:::



::: {.sourceClojure}
```clojure
(def divided-difference (acm/divided-difference xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(divided-difference 4.0)
```
:::



::: {.printedClojure}
```clojure
0.5432043004304531

```
:::



::: {.sourceClojure}
```clojure
(error-1d divided-difference)
```
:::



::: {.printedClojure}
```clojure
0.8675392877418397

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/18.png" />
```

:::



### Polynomial


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.ssj :as ssj])
```
:::



::: {.sourceClojure}
```clojure
(def polynomial (ssj/polynomial xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(polynomial 4.0)
```
:::



::: {.printedClojure}
```clojure
0.5432043380309324

```
:::



::: {.sourceClojure}
```clojure
(error-1d polynomial)
```
:::



::: {.printedClojure}
```clojure
0.8675392846805364

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/19.png" />
```

:::



### Monotone


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.monotone :as monotone])
```
:::



::: {.sourceClojure}
```clojure
(def monotone (monotone/monotone xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(monotone 4.0)
```
:::



::: {.printedClojure}
```clojure
0.6588206176299103

```
:::



::: {.sourceClojure}
```clojure
(error-1d monotone)
```
:::



::: {.printedClojure}
```clojure
0.1517488499630331

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/20.png" />
```

:::



### Step


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.step :as step])
```
:::



::: {.sourceClojure}
```clojure
(defn step
  ([] (step/step xs1 ys1))
  ([point] (step/step xs1 ys1 {:point point})))
```
:::



::: {.sourceClojure}
```clojure
(def step-before (step/step-before xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(def step-after (step/step-after xs1 ys1))
```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th>method</th><th>error</th><th>value at 4.0</th></tr></thead><tbody><tr><td>step-before</td><td>0.849159325039357</td><td>0.8087819747808206</td></tr><tr><td>step-after</td><td>0.7429959099336633</td><td>-0.3605827968499356</td></tr><tr><td>step</td><td>0.4328611328633974</td><td>0.8087819747808206</td></tr><tr><td>step (point=0.55)</td><td>0.42287483285733546</td><td>0.8087819747808206</td></tr><tr><td>step (point=0.25)</td><td>0.5962341092433667</td><td>0.8087819747808206</td></tr><tr><td>step (point=0.75)</td><td>0.49446591280052093</td><td>-0.3605827968499356</td></tr></tbody></table>
```

:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/21.png" /></td><td><img class="clay-image" src="interpolation_files/22.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/23.png" /></td><td><img class="clay-image" src="interpolation_files/24.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/25.png" /></td><td><img class="clay-image" src="interpolation_files/26.png" /></td></tr></tbody></table>
```

:::



### Loess


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.acm :as acm])
```
:::



::: {.sourceClojure}
```clojure
(defn loess
  ([] (acm/loess xs1 ys1))
  ([bandwidth] (acm/loess xs1 ys1 {:bandwidth bandwidth})))
```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/27.png" /></td><td><img class="clay-image" src="interpolation_files/28.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/29.png" /></td><td><img class="clay-image" src="interpolation_files/30.png" /></td></tr></tbody></table>
```

:::



### Cubic smoothing


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.ssj :as ssj])
```
:::



::: {.sourceClojure}
```clojure
(defn cubic-smoothing
  ([] (ssj/cubic-smoothing xs1 ys1))
  ([rho] (ssj/cubic-smoothing xs1 ys1 {:rho rho})))
```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/31.png" /></td><td><img class="clay-image" src="interpolation_files/32.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/33.png" /></td><td><img class="clay-image" src="interpolation_files/34.png" /></td></tr></tbody></table>
```

:::



## 2d grid


### Bilinear


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.linear :as linear])
```
:::



::: {.sourceClojure}
```clojure
(def bilinear (linear/bilinear xs2 ys2 zss))
```
:::



::: {.sourceClojure}
```clojure
(error-2d bilinear)
```
:::



::: {.printedClojure}
```clojure
102.03678750452109

```
:::



### Bicubic


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.acm :as acm])
```
:::



::: {.sourceClojure}
```clojure
(def bicubic (acm/bicubic xs2 ys2 zss))
```
:::



::: {.sourceClojure}
```clojure
(error-2d bicubic)
```
:::



::: {.printedClojure}
```clojure
103.97025992767536

```
:::



### Cubic 2d


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.cubic :as cubic])
```
:::



::: {.sourceClojure}
```clojure
(def cubic-2d (cubic/cubic-2d xs2 ys2 zss))
```
:::



::: {.sourceClojure}
```clojure
(error-2d cubic-2d)
```
:::



::: {.printedClojure}
```clojure
103.23387133898065

```
:::



## Multivariate and kernel based


### Microsphere projection


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.acm :as acm])
```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="interpolation_files/35.png" /></td></tr></tbody></table>
```

:::



::: {.sourceClojure}
```clojure
(error-1d (acm/microsphere-projection xs1 ys1))
```
:::



::: {.printedClojure}
```clojure
0.20201293127226447

```
:::



::: {.sourceClojure}
```clojure
(error-2d (acm/microsphere-projection xss ys3))
```
:::



::: {.printedClojure}
```clojure
54.40226214886831

```
:::



### Shepard


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.shepard :as shepard])
```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/36.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/37.png" /></td></tr></tbody></table>
```

:::



### Radial Basis Function


::: {.sourceClojure}
```clojure
(require '[fastmath.interpolation.rbf :as rbf])
```
:::



::: {.sourceClojure}
```clojure
(defn chart-f [f title] (-> (ggplot/function f {:x [-5 5] :title title})
                         (ggplot/->image)))
```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/38.png" /></td><td><img class="clay-image" src="interpolation_files/39.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/40.png" /></td><td><img class="clay-image" src="interpolation_files/41.png" /></td></tr></tbody></table>
```

:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/42.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/43.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/44.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/45.png" /></td></tr></tbody></table>
```

:::



#### Polynomial term


::: {.sourceClojure}
```clojure
(defn polynomial-terms-1d [^double x]
  [1.0 x (m/sq x)])
```
:::



::: {.sourceClojure}
```clojure
(defn polynomial-terms-2d [[^double x ^double y]]
  [1.0 x y (m/* x y) (m/sq x) (m/sq y)])
```
:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td><img class="clay-image" src="interpolation_files/46.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/47.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/48.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/49.png" /></td></tr></tbody></table>
```

:::



::: {.sourceClojure}
```clojure
(error-2d (rbf/rbf xss ys3 (kernel/rbf :gaussian {:shape 0.1})))
```
:::



::: {.printedClojure}
```clojure
365.96788014805696

```
:::



::: {.sourceClojure}
```clojure
(error-2d (rbf/rbf xss ys3 (kernel/rbf :matern-c2 {:shape 0.15})))
```
:::



::: {.printedClojure}
```clojure
316.10296877225454

```
:::



::: {.sourceClojure}
```clojure
(error-2d (rbf/rbf xss ys3 (kernel/rbf :gaussians-laguerre-22 {:shape 0.07})))
```
:::



::: {.printedClojure}
```clojure
376.435234072405

```
:::



::: {.sourceClojure}
```clojure
(error-2d (rbf/rbf xss ys3 (kernel/rbf :thin-plate)))
```
:::



::: {.printedClojure}
```clojure
49.070725801843054

```
:::



#### Smoothing

::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="interpolation_files/50.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/51.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/52.png" /></td></tr></tbody></table>
```

:::



### Kriging


#### Variograms


::: {.sourceClojure}
```clojure
(require '[fastmath.kernel.variogram :as variogram]
         '[fastmath.interpolation.kriging :as kriging])
```
:::



::: {.sourceClojure}
```clojure
(defn svar-image [f emp title]
  (let [x (map :h emp)
        y (map :gamma emp)]
    (-> (ggplot/function+scatter f x y {:title title :ylim [0 nil]})
        (ggplot/->image))))
```
:::



::: {.sourceClojure}
```clojure
(def empirical-matheron-1d (variogram/empirical xs1 ys1))
```
:::



::: {.sourceClojure}
```clojure
(def empirical-matheron (variogram/empirical xss ys3 {:size 20}))
```
:::



::: {.sourceClojure}
```clojure
empirical-matheron
```
:::



::: {.printedClojure}
```clojure
[{:n 116, :h 3.3604788552002978, :gamma 0.05610650116225876} {:n 385, :h 7.841219583707931, :gamma 0.18995728933979483} {:n 606, :h 12.72578480586009, :gamma 0.399844655716175} {:n 856, :h 17.611233442491304, :gamma 0.4194793467635297} {:n 1019, :h 22.694649851980536, :gamma 0.4993167205111838} {:n 1173, :h 27.74503808347392, :gamma 0.5232922610403302} {:n 1322, :h 32.696030602647625, :gamma 0.5223125852571721} {:n 1527, :h 37.65818295299809, :gamma 0.5426056881417575} {:n 1594, :h 42.65227807229347, :gamma 0.5227361157844413} {:n 1803, :h 47.67443166086058, :gamma 0.5243286183079909} {:n 1784, :h 52.675449304556054, :gamma 0.5272068497879318} {:n 1922, :h 57.731016242599935, :gamma 0.5285755419763869} {:n 1909, :h 62.70585327047225, :gamma 0.5652895296636227} {:n 1966, :h 67.77992830214916, :gamma 0.5265816327093601} {:n 1977, :h 72.71580210020514, :gamma 0.49759061919470493}]

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/53.png" />
```

:::



::: {.sourceClojure}
```clojure
(def empirical-cressie (variogram/empirical xss ys3 {:estimator :cressie :size 20}))
```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/54.png" />
```

:::



::: {.sourceClojure}
```clojure
(def empirical-highly-robust (variogram/empirical xss ys3 {:estimator :highly-robust :size 20
                                                         :remove-outliers? true}))
```
:::



::: {.sourceClojure}
```clojure
empirical-highly-robust
```
:::



::: {.printedClojure}
```clojure
[{:n 116, :h 3.3604788552002978, :gamma 0.02913016400873318} {:n 385, :h 7.841219583707931, :gamma 0.14056514492191244} {:n 606, :h 12.72578480586009, :gamma 0.42633847448010354} {:n 856, :h 17.611233442491304, :gamma 0.44483727296978925} {:n 1019, :h 22.694649851980536, :gamma 0.5434941912574424} {:n 1173, :h 27.74503808347392, :gamma 0.571757191071463} {:n 1322, :h 32.696030602647625, :gamma 0.5504904163482222} {:n 1527, :h 37.65818295299809, :gamma 0.5905951431086924} {:n 1594, :h 42.65227807229347, :gamma 0.5577607587471852} {:n 1803, :h 47.67443166086058, :gamma 0.555261258787647} {:n 1784, :h 52.675449304556054, :gamma 0.561444986664588} {:n 1922, :h 57.731016242599935, :gamma 0.5631892305752904} {:n 1909, :h 62.70585327047225, :gamma 0.6128688264262536} {:n 1966, :h 67.77992830214916, :gamma 0.5591266023267967} {:n 1977, :h 72.71580210020514, :gamma 0.5142798048326319}]

```
:::



::: {.sourceClojure}
```clojure
(def empirical-quantile (variogram/empirical xss ys3 {:estimator :quantile :size 50
                                                    :quantile 0.92}))
```
:::



::: {.sourceClojure}
```clojure
(def empirical-M-robust (variogram/empirical xss ys3 {:estimator :m-robust :size 50}))
```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/55.png" />
```

:::



#### Semi-variograms


::: {.sourceClojure}
```clojure
(def variogram-linear  (variogram/fit empirical-quantile :linear))
```
:::



::: {.sourceClojure}
```clojure
(def variogram-gaussian (variogram/fit empirical-highly-robust :gaussian))
```
:::



::: {.sourceClojure}
```clojure
(def variogram-pentaspherical (variogram/fit empirical-highly-robust :pentaspherical))
```
:::



::: {.sourceClojure}
```clojure
(def variogram-rbf-wendland-2-3 (variogram/fit empirical-highly-robust (kernel/rbf :wendland {:s 2 :k 3})))
```
:::



::: {.sourceClojure}
```clojure
(def variogram-superspherical-1d (variogram/fit empirical-matheron-1d :tplstable {:order 1.9 :defaults {:beta 14.0}}))
```
:::



::: {.sourceClojure}
```clojure
(((variogram/->superspherical 1.0) {:nugget 0.1 :psill 0.5 :range 1.0}) 0.4)
```
:::



::: {.printedClojure}
```clojure
0.384

```
:::


::: {.clay-image}

```{=html}
<img class="clay-image" src="interpolation_files/56.png" />
```

:::


::: {.clay-table}

```{=html}
<table class="table table-hover table-responsive clay-table"><tbody><tr><td><img class="clay-image" src="interpolation_files/57.png" /></td><td><img class="clay-image" src="interpolation_files/58.png" /></td></tr><tr><td><img class="clay-image" src="interpolation_files/59.png" /></td><td><img class="clay-image" src="interpolation_files/60.png" /></td></tr></tbody></table>
```

:::



::: {.sourceClojure}
```clojure
(def kriging-linear (kriging/kriging xss ys3 variogram-linear))
```
:::



::: {.sourceClojure}
```clojure
(def kriging-gaussian (kriging/kriging xss ys3 variogram-gaussian))
```
:::



::: {.sourceClojure}
```clojure
(def kriging-pentaspherical (kriging/kriging xss ys3 variogram-pentaspherical))
```
:::



::: {.sourceClojure}
```clojure
(def kriging-rbf-wendland-2-3 (kriging/kriging xss ys3 variogram-rbf-wendland-2-3))
```
:::



::: {.sourceClojure}
```clojure
(error-2d kriging-linear)
```
:::



::: {.printedClojure}
```clojure
56.63634949359084

```
:::



::: {.sourceClojure}
```clojure
(def vl (variogram/linear {:nugget 0.03 :sill 0.5 :range 14.0}))
```
:::



#### Smoothing






### Gaussian processes


```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/generateme/fastmath//blob/master/clay/interpolation.clj">clay/interpolation.clj</a></small></small></pre></div>
```
